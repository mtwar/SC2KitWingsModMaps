//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Wings of Liberty
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibCamp"
include "LibWoLC"
include "LibWCUI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCamp_InitLib();
    libWoLC_InitLib();
    libWCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const string gv_aNIMID_BRIEFING = "Briefing";
const string gv_aNIMID_BRIEFINGVIDEOSWAP = "BriefingVideoSwap";
const string gv_aNIMID_HIGHLIGHT = "Highlight";
const string gv_aNIMID_HIGHLIGHTB = "HighlightB";
const string gv_aNIMID_FIDGET = "Fidget";
const string gv_aNIMID_FLASH = "Flash";
const string gv_aNIMID_SHEEN = "Sheen";
const string gv_aNIMID_ZOOM = "Zoom";
const string gv_aNIMID_CANTINABROKEN = "CantinaBroken";
const string gv_aNIMID_ACTORLIGHTING = "ActorLighting";
const string gv_aNIMID_ROOMLIGHTING = "RoomLighting";
const string gv_aNIMID_ACTORLISTEN = "ActorListen";
const string gv_aNIMID_BRIEFINGSCREENFUZZY = "BriefingScreenFuzzy";
const string gv_aNIMID_BRIEFINGSCREENSPLIT = "BriefingScreenSplit";
const string gv_aNIMID_INCOMINGTRANSMISSION = "IncomingTransmission";
const string gv_aNIMID_CHARTYCHUSANDGUN_STAND2 = "CharTychusAndGun";
const fixed gv_c_HighlightValue = 2.0;
const int gv_pBITEM_FIRST = 1;
const fixed gv_c_NEWITEMINFO_DURATION = 6.0;
const fixed gv_c_NEWITEMINFO_FLASHHEIGHT = 80.0;
const fixed gv_c_NEWITEMINFO_FLASHWIDTH = 500.0;
const int gv_c_ACTOR_FIRST = 1;
const int gv_c_ROOMLOCATION_FIRST = 1;
const string gv_sOUNDACTOR_Lab_LiquidTanks = "::global.LabLiquidTanksSound";
const string gv_sOUNDACTOR_Lab_Monitors = "::global.LabMonitorsSound";
const string gv_sOUNDACTOR_Lab_ResearchConsole = "::global.LabResearchConsoleSound";
const string gv_sOUNDACTOR_MarSara_Fan = "::global.MarSaraFanSound";
const string gv_sOUNDACTOR_MarSara_NeonSign = "::global.MarSaraNeonSignSound";
const string gv_rEF_STATUSBAR = "Ref_StatusBar";
const string gv_rEF_STATUSBAR01 = "Ref_StatusBar 01";
const string gv_rEF_STATUSBAR02 = "Ref_StatusBar 02";
const int gv_aBChoicePortraitOffsetX = 40;
const int gv_aBChoicePortraitOffsetY = -150;
const int gv_aBChoicePortraitWidth = 437;
const int gv_aBChoicePortraitHeight = 500;
const fixed gv_aBChoicePortraitScale = 1.15;
const string gv_c_HINTICON = "Assets\\Textures\\ui_btn_generic_exclemation.dds";
const string gv_c_TIPICON = "Assets\\Textures\\ui_tip_questionmark.dds";
const fixed gv_c_TIPINTERVAL = 4.0;
const fixed gv_c_TIPINTERVALSTART = 1.0;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_REC_JUKEBOX_PLAYBACK {
    int lv_trackCurrent;
    sound lv_music;
    bool lv_startedBefore;
    bool lv_muted;
    int lv_sessionID;
    bool lv_nextTrackCommentsDone;
    bool lv_nextTrackAnimationDone;
};

struct gs_REC_JUKEBOX {
    unit lv_box;
    soundlink[21] lv_tracks;
    text[21] lv_trackTitle;
    text[21] lv_trackAuthor;
    int lv_trackCount;
    string lv_fidgetSetTrack;
    string lv_fidgetSetTurnOff;
    bool lv_startRandom;
    gs_REC_JUKEBOX_PLAYBACK lv_playback;
};

struct gs_REC_PINBOARDITEM {
    int lv_iD;
    string lv_fidgetSet;
    unit lv_item;
    soundlink lv_activateSound;
    bool lv_showHide;
};

struct gs_REC_PINBOARD {
    int lv_iD;
    int[16] lv_items;
    int lv_itemCount;
    string lv_genericFidgetSet;
    unit lv_pinboard;
    int lv_room;
    string lv_zoomCamera;
    string lv_zoomAnimation;
    fixed lv_zoomDuration;
    string lv_zoomBackCamera;
    string lv_zoomBackAnimation;
    fixed lv_zoomBackDuration;
    int lv_range;
    int lv_highlight;
    soundlink lv_highlightSound;
};

struct gs_REC_NEWITEM {
    int lv_type;
    text lv_text;
    string lv_modelFlash;
    string lv_imagePortrait;
    fixed lv_displayDuration;
    int lv_customData;
    int lv_dialog;
    int lv_label;
    int lv_flash;
    bool lv_beingRemoved;
};

struct gs_REC_ACTOR {
    int lv_actorID;
    unit lv_unit;
    string lv_stringID;
    text lv_name;
    int lv_type;
    int lv_room;
    int lv_cantinaBGType;
    int lv_cantinaBGLocID;
    string lv_convoStateIndex;
    string[4] lv_roomAnim;
    bool lv_preloaded;
};

struct gs_REC_CANTINABGLOC {
    point lv_location;
    bool lv_haveFidget;
    bool lv_sitDown;
};

struct gs_REC_BGACTORNODE {
    int lv_type;
    point lv_target;
    bool lv_turnOrNot;
    fixed lv_stayDuration;
    string[4] lv_anim;
    fixed[4] lv_animDuration;
    int lv_animCount;
    trigger lv_actionTrigger;
};

struct gs_REC_BGACTOR {
    int lv_actorID;
    point lv_home;
    timer lv_timer;
    trigger lv_doTrigger;
    gs_REC_BGACTORNODE[41] lv_nodes;
    int lv_nodeCount;
    int lv_currentNodeID;
    bool lv_started;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_CustomDataIndex_CustomDataIndexClickableLock = 0;
const int ge_CustomDataIndex_CustomDataIndexClickableRoom = 1;
const int ge_CustomDataIndex_CustomDataIndexFlashingData = 2;
const int ge_ScreenButtonID_ButtonNone = 0;
const int ge_ScreenButtonID_ButtonBack = 1;
const int ge_ScreenButtonID_ButtonPlay = 2;
const int ge_ScreenButtonID_ButtonSimulate = 3;
const int ge_ScreenButtonID_ButtonHyperion = 4;
const int ge_SceneType_Scene = 0;
const int ge_SceneType_Convo = 1;
const int ge_SceneType_TV = 2;
const int ge_ConscriptionCheatToken_ConscriptionTokenIndex = 0;
const int ge_ConscriptionCheatToken_ActionTokenIndex = 1;
const int ge_ConscriptionCheatToken_UnitTokenStartIndex = 2;
const int ge_ConscriptionActionType_None = 0;
const int ge_ConscriptionActionType_EnableUnit = 1;
const int ge_ConscriptionActionType_DisableUnit = 2;
const int ge_ConscriptionActionType_PurchaseUnit = 3;
const int ge_ConscriptionActionType_RefundUnit = 4;
const int ge_ClickableCursorType_Move = 0;
const int ge_ClickableCursorType_Talk = 1;
const int ge_ClickableCursorType_Activate = 2;
const int ge_ClickableCursorType_Look = 3;
const int ge_ClickableType_Global = 0;
const int ge_ClickableType_Subspace = 1;
const int ge_MusicVolumeAction_Setup = 0;
const int ge_MusicVolumeAction_Restore = 1;
const int ge_MusicVolumeAction_Reapply = 2;
const int ge_PinboardItem_PBItemNone = 0;
const int ge_PinboardItem_PBItem01Armyphoto = 1;
const int ge_PinboardItem_PBItem02WantedPoster = 2;
const int ge_PinboardItem_PBItem03Fightforfreedomposter = 3;
const int ge_PinboardItem_PBItem04Localrebelsavescolonistsnewspaperclipping = 4;
const int ge_PinboardItem_PBItem05VikingPolaroid = 5;
const int ge_PinboardItem_PBItem06Evolutionofrevolution = 6;
const int ge_PinboardItem_PBItem07HeavensDevil = 7;
const int ge_PinboardItem_PBItem08Hydrahunt = 8;
const int ge_PinboardItem_PBItem09KarriganPhoto = 9;
const int ge_PinboardItem_PBItemLast = 10;
const int ge_Pinboard_PBNone = 0;
const int ge_Pinboard_PBMarSara = 1;
const int ge_Pinboard_PBCantina = 2;
const int ge_PinboardCameraRange_Close = 0;
const int ge_PinboardCameraRange_Long = 1;
const int ge_PinboardHighlightStates_Unhighlighted = 0;
const int ge_PinboardHighlightStates_Highlighted = 1;
const int ge_PinboardHighlightStates_Undecided = 2;
const int ge_NewItemType_None = 0;
const int ge_NewItemType_NewRoom = 1;
const int ge_NewItemType_NewActor = 2;
const int ge_NewItemType_SecondaryObjective = 3;
const int ge_NewItemType_ResearchUnlock = 4;
const int ge_NewItemType_ResearchComplete = 5;
const int ge_NewItemType_NewTechnology = 6;
const int ge_NewItemType_NewMercenary = 7;
const int ge_WorldMode_WorldModeGlobal = 0;
const int ge_WorldMode_WorldModeSubspaceTV = 1;
const int ge_WorldMode_WorldModeSubspaceConversation = 2;
const int ge_WorldMode_WorldModeSubspaceUI = 3;
const int ge_WorldMode_WorldModeSubspaceScene = 4;
const int ge_WorldMode_WorldModeSubspaceScriptedScene = 5;
const int ge_IdleState_Busy = 0;
const int ge_IdleState_Idle = 1;
const int ge_ActorID_ActorNone = 0;
const int ge_ActorID_ActorAdjutant = 1;
const int ge_ActorID_ActorAdjutantConfederate = 2;
const int ge_ActorID_ActorAnnabelle = 3;
const int ge_ActorID_ActorBralik = 4;
const int ge_ActorID_ActorBubba = -1;
const int ge_ActorID_ActorCade = 5;
const int ge_ActorID_ActorCooperBarTender = 6;
const int ge_ActorID_ActorStetmann = 7;
const int ge_ActorID_ActorEarl = 8;
const int ge_ActorID_ActorHanson = 9;
const int ge_ActorID_ActorHall = 10;
const int ge_ActorID_ActorHillMercContact = 11;
const int ge_ActorID_ActorHorner = 12;
const int ge_ActorID_ActorNico = -1;
const int ge_ActorID_ActorKachinsky = 13;
const int ge_ActorID_ActorRaynor = 14;
const int ge_ActorID_ActorRaynorMarine = 15;
const int ge_ActorID_ActorSwann = 16;
const int ge_ActorID_ActorTosh = 17;
const int ge_ActorID_ActorTychus = 18;
const int ge_ActorID_ActorUrsula = -1;
const int ge_ActorID_ActorValerian = 19;
const int ge_ActorID_ActorWarfield = 20;
const int ge_ActorID_ActorWarfieldAOD = 21;
const int ge_ActorID_ActorYbarraMiscMerc = 22;
const int ge_ActorID_ActorZeratul = 23;
const int ge_ActorID_ActorBridgeBG1 = 24;
const int ge_ActorID_ActorBridgeBG2 = 25;
const int ge_ActorID_ActorArmoryBG1 = 26;
const int ge_ActorID_ActorLast = 27;
const int ge_ActorType_None = 0;
const int ge_ActorType_MainWithConversation = 1;
const int ge_ActorType_MainWithFidget = 2;
const int ge_ActorType_BackgroundWithFidget = 3;
const int ge_ActorType_BackgroundNonInteractive = 4;
const int ge_ActorCantinaBGType_None = 0;
const int ge_ActorCantinaBGType_Possible = 1;
const int ge_ActorCantinaBGType_Always = 2;
const int ge_ActorLightingType_Default = 0;
const int ge_ActorLightingType_Convo = 1;
const int ge_ActorLightingType_Scene = 2;
const int ge_ActorSceneType_Conversation = 0;
const int ge_ActorSceneType_Scene = 1;
const int ge_RoomID_RoomNone = 0;
const int ge_RoomID_RoomBridge = 1;
const int ge_RoomID_RoomConscription = 2;
const int ge_RoomID_RoomArmory = 3;
const int ge_RoomID_RoomLab = 4;
const int ge_RoomID_RoomCantina = 5;
const int ge_RoomID_RoomChar = 6;
const int ge_RoomID_RoomMarSara = 7;
const int ge_RoomID_RoomCorridor = 8;
const int ge_RoomID_RoomFlagship = 9;
const int ge_RoomID_RoomObservatory = 10;
const int ge_RoomID_RoomMissionArchieves = 11;
const int ge_RoomID_RoomGalaxy = 12;
const int ge_RoomID_RoomLabResearch = 13;
const int ge_RoomID_RoomMercenary = 14;
const int ge_RoomID_RoomTechPurchase = 15;
const int ge_RoomID_RoomVoid = 16;
const int ge_RoomID_RoomLast = 17;
const int ge_CantinaStates_Normal = 0;
const int ge_CantinaStates_Broken = 1;
const int ge_RoomStateType_Visited = 0;
const int ge_RoomLocation_RoomLocationOthers = 0;
const int ge_RoomLocation_RoomLocationMarSara = 1;
const int ge_RoomLocation_RoomLocationHyperion = 2;
const int ge_RoomLocation_RoomLocationValerianFlagship = 3;
const int ge_RoomLocation_RoomLocationChar = 4;
const int ge_RoomLocation_RoomLocationLast = 5;
const int ge_BGAcotrNodeType_Stay = 0;
const int ge_BGAcotrNodeType_Move = 1;
const int ge_BGAcotrNodeType_Disappear = 2;
const int ge_BGAcotrNodeType_Appear = 3;
const int ge_CharRoomUI_CharRoomUINone = 0;
const int ge_CharRoomUI_CharRoomUIArmory = 1;
const int ge_CharRoomUI_CharRoomUIResearch = 2;
const int ge_CharRoomUI_CharRoomUIMercenaries = 3;
const int ge_CharRoomUI_CharRoomUINews = 4;
const int ge_CharRoomUI_CharRoomUIMissionArchives = 5;
const int ge_ConvoCameraType_ConvoCameraNone = 0;
const int ge_ConvoCameraType_ConvoCameraMaster = 1;
const int ge_ConvoCameraType_ConvoCameraCustom = 2;
const int ge_ConvoCameraType_ConvoCameraChar1Closeup = 3;
const int ge_ConvoCameraType_ConvoCameraChar1Medium = 4;
const int ge_ConvoCameraType_ConvoCameraChar1Shoulder = 5;
const int ge_ConvoCameraType_ConvoCameraChar1Pushin = 6;
const int ge_ConvoCameraType_ConvoCameraChar1Pullout = 7;
const int ge_ConvoCameraType_ConvoCameraChar1PanMedium = 8;
const int ge_ConvoCameraType_ConvoCameraChar2Closeup = 9;
const int ge_ConvoCameraType_ConvoCameraChar2Medium = 10;
const int ge_ConvoCameraType_ConvoCameraChar2Shoulder = 11;
const int ge_ConvoCameraType_ConvoCameraChar2Pushin = 12;
const int ge_ConvoCameraType_ConvoCameraChar2Pullout = 13;
const int ge_ConvoCameraType_ConvoCameraChar2PanMedium = 14;
const int ge_ConvoCameraType_ConvoCameraRaynorCloseup = 15;
const int ge_ConvoCameraType_ConvoCameraRaynorMedium = 16;
const int ge_ConvoCameraType_ConvoCameraRaynorShoulder = 17;
const int ge_ConvoCameraType_ConvoCameraRaynorPushin = 18;
const int ge_ConvoCameraType_ConvoCameraRaynorPullout = 19;
const int ge_ConvoCameraType_ConvoCameraRaynorPanMedium = 20;
const int ge_ConvoCameraType_ConvoCameraLast = 21;
const int ge_TimestampType_BeforeCinematic = 0;
const int ge_TimestampType_BeforeDebrief = 1;
const int ge_TimestampType_BeforeStorymode = 2;
const int ge_TimestampType_DuringBriefing = 3;
const int ge_BriefingScreen_None = 0;
const int ge_BriefingScreen_Main = 1;
const int ge_BriefingScreen_Center = 2;
const int ge_BriefingScreen_Left = 3;
const int ge_BriefingScreen_Right = 4;
const int ge_BriefingCamera_None = 0;
const int ge_BriefingCamera_BriefingScreen01 = 1;
const int ge_BriefingCamera_ScreenClose = 2;
const int ge_BriefingCamera_ScreenMedium = 3;
const int ge_BriefingCamera_BriefingScreen04 = 4;
const int ge_BriefingCamera_ScreenFar = 5;
const int ge_BriefingCamera_Intro2 = 6;
const int ge_BriefingCamera_Intro3 = 7;
const int ge_BriefingCamera_twoshots01 = 8;
const int ge_BriefingCamera_twoshots02 = 9;
const int ge_BriefingCamera_twoshots03 = 10;
const int ge_BriefingCamera_twoshots04 = 11;
const int ge_BriefingCamera_raynor01 = 12;
const int ge_BriefingCamera_tychus01 = 13;
const int ge_BriefingCamera_Horner01 = 14;
const int ge_BriefingCamera_Hanson01 = 15;
const int ge_ABChoiceAB_A = 0;
const int ge_ABChoiceAB_B = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
fixed gv_talkBlendTime;
fixed gv_standBlendTime;
fixed gv_idleFidgetStartTime;
fixed gv_idleFidgetRepeatTime;
int gv_customFadeDialog;
int gv_customFadeImage;
unitgroup gv_clickables;
unitgroup gv_cantinaPinboardClickables;
unitgroup gv_cantinaTrophiesClickables;
unitgroup gv_labResearchTubeClickables;
unitgroup gv_visibleUnits;
fixed gv_waitForSkipTimeout;
int gv_waitForSkipTimeType;
trigger gv_backButtonCallback;
bool gv_backButtonHidden;
int gv_tBDWindowDialog;
int gv_tBDWindowButtonClose;
trigger gv_tBDWindowExitCallback;
int gv_soundChannelVolumesRefCount;
gs_REC_JUKEBOX[3] gv_jukeboxes;
int gv_jukeboxCount;
int gv_jukeboxTrackTitle;
int gv_tP_JukeboxID;
int gv_tP_JukeboxSessionIDLocal;
int gv_pB_FIRST;
int gv_pB_LAST;
int gv_pBITEM_LAST;
gs_REC_PINBOARDITEM[51] gv_pinboardItems;
gs_REC_PINBOARD[6] gv_pinboards;
int gv_pinboardCount;
int gv_pinboardCurrent;
int gv_pinboardItemCurrent;
int gv_tP_NEWITEMAVAILABLE_Type;
text gv_tP_NEWITEMAVAILABLE_Text;
string gv_tP_NEWITEMAVAILABLE_ImagePortrait;
string gv_tP_NEWITEMAVAILABLE_ModelFlash;
fixed gv_tP_NEWITEMAVAILABLE_Duratioin;
int gv_tP_NEWITEMAVAILABLE_CustomData;
bool gv_newItemInfoPaused;
gs_REC_NEWITEM[41] gv_newItems;
int gv_newItemsCount;
int gv_tP_CreateNewItem_NewItemIndex;
fixed gv_tP_CreateNewItem_Offset;
int gv_tP_MoveNewItem_NewItemIndex;
fixed gv_tP_MoveNewItem_OffsetY;
fixed gv_tP_MoveNewItem_Duration;
int gv_tP_NewItemBeingRemoved;
int gv_worldMode;
int gv_idleState;
int gv_idleStateLockCount;
int gv_fullscreenImageDialog;
int gv_fullscreenImageDialogImage;
bool gv_lookAtEnabled;
bool gv_queryDialogClosed;
int gv_queryDialogResult;
int gv_cinematicDebugValue;
trigger[41] gv_cinematicDebugPlaylist;
bool gv_returned;
bool gv_researchUnlockedProt;
bool gv_researchUnlockedZerg;
bool gv_mercUnlocked;
bool gv_isTransitionalLoad;
bool gv_isForDebug;
bool gv_terranUpTheNightPlaying;
int gv_debugSceneCount;
int gv_debugSceneRowY;
int[41] gv_debugSceneButtons;
int gv_debugSceneExitButton;
trigger[41] gv_debugSceneCallbacks;
int gv_debugSceneDialog;
bool gv_debugSceneCheat;
text[41] gv_debugSceneLabels;
int gv_roomCheatDialog;
int gv_roomCheatButtonMarSara;
int gv_roomCheatButtonBridge;
int gv_roomCheatButtonConscription;
int gv_roomCheatButtonArmory;
int gv_roomCheatButtonCantina;
int gv_roomCheatButtonLab;
int gv_roomCheatButtonChar;
int gv_roomCheatButtonObservatory;
int gv_roomCheatButtonCancel;
int gv_roomCheatSizeX;
int gv_roomCheatSizeY;
unit gv_debugTestCameraUnit;
int gv_roomCameraDialog;
int gv_roomCameraButtonMarSara;
int gv_roomCameraButtonBridge;
int gv_roomCameraButtonConscription;
int gv_roomCameraButtonArmory;
int gv_roomCameraButtonCantina;
int gv_roomCameraButtonLab;
int gv_roomCameraButtonChar;
int gv_roomCameraButtonCancel;
int gv_roomCameraSizeX;
int gv_roomCameraSizeY;
bool gv_debug_BriefingCheating;
int gv_debug_BriefingDialog;
int gv_debug_BriefingButtonClose;
int[51] gv_debug_BriefingMissioniButton;
int gv_debug_BriefingMissioniButtonCount;
int gv_debug_BriefingMissioniButtonX;
fixed gv_debug_BriefingMissioniButtonXMax;
int gv_debug_BriefingMissioniButtonY;
bool gv_debug_BriefingMissioniButtonNewLine;
int gv_debug_TVNewsDialog;
int gv_debug_TVNewsButtonClose;
int[51] gv_debug_TVNewsMissioniButton;
int gv_debug_TVNewsMissioniButtonCount;
int gv_debug_TVNewsMissioniButtonX;
fixed gv_debug_TVNewsMissioniButtonXMax;
int gv_debug_TVNewsMissioniButtonY;
bool gv_debug_TVNewsMissioniButtonNewLine;
bool gv_debug_TVNewsOn;
bool gv_debug_RoomChangeTimerDone;
text gv_debug_RoomChangeTimerMessage;
bool gv_debugStoryModeEnabled;
bool gv_debugCinematicModeEnabled;
int gv_debugDialogForSizePos;
int gv_c_ACTOR_LAST;
gs_REC_ACTOR[51] gv_actors;
gs_REC_CANTINABGLOC[21] gv_cantinaBGLocs;
int gv_cantinaBGLocCount;
int gv_armoryGreaseMonkeyPlacement;
bool gv_actorReloadLocked;
int[21] gv_actorScenePrepared;
int[21] gv_actorScenePreparedToActor;
int[21] gv_actorScenePreparedRoom;
int[21] gv_actorScenePreparedType;
int gv_actorScenePreparedCount;
int gv_c_ROOM_FIRST;
int gv_c_ROOM_LAST;
int gv_currentRoom;
bool gv_onHyperion;
bool gv_onChar;
unit gv_armoryRoom;
unitgroup gv_armoryRoomUnits;
unitgroup gv_armoryRoomZoomRemovableUnits;
unit gv_armoryWindowPlanet;
actor gv_armoryOutHourse;
unit gv_bridgeRoom;
unitgroup gv_bridgeRoomUnits;
unit gv_bridgeNose;
actor gv_bridgeOutHourse;
unit gv_cantinaRoom;
unitgroup gv_cantinaRoomUnits;
unit gv_charRoom;
unitgroup gv_charRoomUnits;
unit gv_conscriptionRoom;
unitgroup gv_conscriptionRoomUnits;
unit gv_corridorRoom;
unitgroup gv_corridorRoomUnits;
unit gv_labRoom;
unitgroup gv_labRoomUnits;
unit gv_marSaraRoom;
unitgroup gv_marSaraRoomUnits;
unit gv_galaxyRoom;
unitgroup gv_galaxyRoomUnits;
unit gv_flagshipRoom;
unitgroup gv_flagshipRoomUnits;
unit gv_observatoryRoom;
unitgroup gv_observatoryRoomUnits;
unit gv_voidRoom;
unitgroup gv_voidRoomUnits;
bool gv_stetmannFront;
int gv_cantinaState;
bool[21] gv_roomPreloaded;
string gv_armorySpaceLightningAnim;
int gv_c_ROOMLOCATION_LAST;
int gv_currentLocation;
bool[11] gv_roomLocationEnabled;
sound gv_bridgeBGSoundRadioBanter01;
sound gv_bridgeBGSoundRadioBanter02;
sound gv_bridgeBGSoundRadioBanter03;
sound gv_bridgeBGSoundWalla;
sound gv_cantinaBGSoundWallaLeft;
sound gv_cantinaBGSoundWallaRight;
sound gv_bridgeBGSoundWalla2;
sound gv_bridgeBGSoundWalla3;
int[6] gv_roomScenePrepared;
int[6] gv_roomScenePreparedType;
int gv_roomScenePreparedCount;
bool gv_roomSceneLightingAnimation_ShouldPlay;
bool gv_roomChangePanelCreated;
int[21] gv_roomChangePanelButtonId;
unit gv_doorHighlightedDoor;
bool gv_doorHighlighted;
bool[21] gv_doorOpened;
gs_REC_BGACTOR[21] gv_bGActors;
int gv_bGActorCount;
int gv_tP_BGActorID;
int gv_tP_BGActorCurrentNodeID;
int gv_bridgeBGMonkeyDoorOpenNode1;
int gv_bridgeBGMonkeyDoorCloseNode1;
int gv_bridgeBGMonkeyDoorOpenNode2;
int gv_bridgeBGMonkeyDoorCloseNode2;
int gv_armoryGradientDialog;
int gv_armoryGradientDialogImage;
int[10] gv_armoryAnchor;
unit gv_armoryTechSpiderMinePHCrates;
unit gv_armoryTechVikingPHCrates;
unit gv_armoryTechTankPHCrates;
unit gv_armoryTechMarauderPHCrates;
unit gv_armoryTechSpectreCratesPHCrates;
unit gv_armoryTechGhostCratesPHCrates;
unit gv_armoryTechFirebatPHCrates;
unit gv_armoryTechDropshipPHCrates;
unit gv_armoryTechBansheePHCrates;
unit gv_armoryTechSpiderMines;
unit gv_armoryTechSpectreCrates;
unit gv_armoryTechGhostCrates;
unit gv_armoryTechBanshee1;
unit gv_armoryTechBanshee2;
unit gv_armoryTechDropship;
unit gv_armoryTechFirebat;
unit gv_armoryTechGhostRifle;
unit gv_armoryTechMarauder;
unit gv_armoryTechTank;
unit gv_armoryTechViking;
unit gv_armoryConsole;
unit gv_armoryCrane;
unit gv_armoryDoor;
unit gv_armorySimulator;
unit gv_armorySpaceLightning;
unit gv_bridgeMissionArchieves;
unit gv_bridgeCommunicator;
unit gv_bridgeDoor;
unit gv_bridgeStarmap;
unit gv_bridgeStarmapHolomap;
unit gv_bridgeWindow;
unit gv_cantinaArcade;
unit gv_cantinaBadge;
unit gv_cantinaDoor;
unit gv_cantinaJukebox;
unit gv_cantinaMercLabtop;
unit gv_cantinaPinboard;
unit[21] gv_cantinaPinboardItems;
int gv_cantinaPinboardItemCount;
unit gv_cantinaPoster1;
unit gv_cantinaPoster2;
unit gv_cantinaPoster3;
unit gv_cantinaPoster4;
unit gv_cantinaPoster5;
unit gv_cantinaProps;
unit gv_cantinaTV;
unit gv_cantinaTrophyFrame;
unit gv_cantinaTrophyHydraClaw;
unit gv_cantinaTrophyHansonA;
unit gv_cantinaTrophyHansonB;
unit gv_cantinaTrophyHorner;
unit gv_cantinaTrophyToshA;
unit gv_cantinaTrophyToshB;
unit gv_cantinaTrophyZeratul;
unit gv_charArtifact;
unit gv_charConsole;
unit gv_charDropship;
unit gv_charRadio;
unit gv_charSet2;
unit gv_charSet3;
unit gv_charBansheeA;
unit gv_charBansheeB;
unit gv_charMutaA;
unit gv_charMutaB;
unit gv_charGatlingGun;
unit gv_charViking;
unit gv_charMarineA;
unit gv_charMarineB;
unit gv_labArtifactField;
unit gv_labArtifact1;
unit gv_labArtifact2;
unit gv_labArtifact3;
unit gv_labArtifact4;
unitgroup gv_labArtifacts;
bool gv_labArtifactsClickable;
unit gv_labConsole;
unit gv_labCrystal;
unit gv_labDoor;
unit[3][7] gv_labTubeSamples;
unit gv_labTubeProtoss;
unit gv_labTubeZerg;
unit gv_labStageLight;
unit gv_marSaraProps;
unit gv_marSaraAdjutant;
unit gv_marSaraBriefcase;
unit gv_marSaraHydra;
unit gv_marSaraBadge;
unit gv_marSaraJukebox;
unit gv_marSaraPinboard;
unit[21] gv_marSaraPinboardItems;
int gv_marSaraPinboardItemCount;
unit gv_marSaraTV;
unit gv_observatoryProp;
unit gv_observatoryPainting;
unit gv_observatorySet2;
unitgroup gv_hotspots_NoHighlightEffect;
unit gv_hotspotClicked;
unitgroup gv_hotspots_Flashing;
int[31] gv_hotspots_FlashingTextTags;
bool[31] gv_hotspots_FlashingPaused;
int gv_hotspots_FlashingTextTagCount;
bool gv_missionArchivesOn;
int gv_cantinaJukeboxID;
bool gv_cantinaJukeboxPlayed;
bool gv_cantinaTrophiesZoomedIn;
sound gv_charArtifactOpenSound;
int gv_marSaraJukeboxID;
bool gv_marSaraBriefcaseLeaveYesNoOn;
trigger gv_travelPanel_LeaveCallback;
bool gv_travelPanel_CharInvasionQueryDone;
int gv_travelPanel_CharInvasionQueryResult;
trigger gv_travelPanelZeratul_LeaveCallback;
string gv_travelPanelZeratulMission;
int gv_introTextDialog;
int gv_introTextDialogLabel;
int[5] gv_armoryTextDialog;
int[5] gv_armoryTextDialogLabel;
int gv_currentGossipActor;
unit gv_bridgeHornerCameras;
unit gv_bridgeTychusCameras;
unit gv_bridgeHansonCameras;
unit gv_bridgeToshCameras;
unit gv_cantinaToshCameras;
unit gv_cantinaTychusCameras;
unit gv_cantinaYbarraCameras;
unit gv_labAdjutantCameras;
unit gv_labHansonCameras;
unit gv_labCowinCameras;
unit gv_marSaraTychusCameras;
unit gv_armorySwannCameras;
int gv_c_ConvoCameraTypeFirst;
int gv_c_ConvoCameraTypeLast;
camerainfo[31] gv_convoCameras;
int gv_convoCameraRoom;
int gv_convoCameraActor1;
unit gv_convoCameraObjectCurrent1;
int gv_convoCameraActor2;
unit gv_convoCameraObjectCurrent2;
trigger gv_convoCameraCustomCallback;
trigger gv_convoCameraChangeCallback;
int gv_convoCameraCurrent;
bool gv_convoCameraChangeResult;
int gv_bridgeCommunicatorPortraitValerian;
bool gv_tychusObsessionUnlocked;
bool gv_hornerObsessionUnlocked;
sound gv_sceneSound;
bool gv_sceneSkipped;
unitgroup gv_sceneCantinaTrophies;
unitgroup gv_sceneLabTrophies;
unit gv_briefing_BridgeMain;
unit gv_briefing_BridgeCenter;
unit gv_briefing_BridgeLeft;
unit gv_briefing_BridgeRight;
unit gv_briefing_MarSaraMain;
unit gv_briefing_MarSaraCenter;
unit gv_briefing_MarSaraLeft;
unit gv_briefing_MarSaraRight;
actor gv_lookAtScreenRight;
actor gv_lookAtScreenLeft;
actor gv_lookAtScreenMain;
actor gv_lookAtGuest1;
actor gv_lookAtGuest2;
actor gv_lookAtRaynor;
unit gv_briefing_CharRight;
unit gv_briefing_CharLeft;
unit gv_briefing_CharCenter;
unit gv_briefing_CharMain;
int[11] gv_briefingPortraits;
int gv_briefingPortraitCount;
string gv_briefingVideoPlaying;
string gv_briefingMovieTexturePlaying;
int gv_briefingMovieTransmission;
sound gv_briefingMovieSound;
sound gv_briefingSoundPlayed;
bool gv_briefingCompleted;
sound gv_briefingMusic;
int gv_briefingTHorner02Text;
bool gv_briefingTHorner02ITDone;
actor gv_briefingTZeratulCrystalEffect;
int gv_briefing_TZeratulPortraitZeratul;
sound gv_aBChoiceSoundPlayed;
int gv_aBChoicePortraitA;
int gv_aBChoicePortraitB;
bool gv_aBChoiceOn;
bool gv_aBChoiceReplaying;
int gv_aBChoicePanel;
int gv_aBChoiceFrame;
int gv_aBChoiceButtonA;
int gv_aBChoiceButtonB;
int gv_aBChoiceButtonReplay;
trigger gv_aBChoiceButtonACallback;
trigger gv_aBChoiceButtonBCallback;
trigger gv_aBChoiceButtonReplayCallback;
trigger gv_aBChoiceButtonBackCallback;
string gv_abChoiceCurrent;
int gv_abChoiceDifficulty;
bool gv_aBChoiceSaved;
bool gv_aBChoiceSaved2;
int gv_aBChoiceTHanson03PortraitPlanet;
int gv_aBChoiceTHanson03PortraitSelendis;
int gv_aBChoiceTTosh03PortraitTosh;
int gv_aBChoiceTTosh03PortraitToshLeft;
int gv_aBChoiceTTosh03PortraitNova;
int gv_aBChoiceTTosh03PortraitNova_Right;
bool gv_aBChoiceTValerian02BriefingCompleted;
bool gv_debriefingLabCantinaOpenedDone;
unit gv_debriefingTRaynor03WalkingOfficer;
unit gv_debriefingTRaynor03StarmapOfficer;
bool gv_debriefingTHorner01FirstPartCompleted;
bool gv_debriefingTHorner02FirstPartCompleted;
actor gv_debriefingTTychus02CrystalEffect;
unit gv_debriefingTTychus04_1_KerriganPhoto;
bool gv_debriefingTTychus04_1_Completed;
unit gv_scriptSceneMercIntroAnnabelle;
unit gv_armoryIntroBGUnit_Wave;
unit gv_armoryIntroBGUnit_Walk;
unit gv_armoryIntroBGUnit_Walkup;
unit gv_armoryIntroBGUnit_Fidget;
trigger gv_tVNewsCurrentThread;
bool gv_tipStart;
bool gv_armoryOpenedNew;
bool gv_conscriptionOpenedNew;
bool gv_cantinaOpenedNew;
bool gv_labOpenedNew;

void InitGlobals () {
    int init_i;
    int init_i1;
    int init_i2;

    gv_talkBlendTime = 0.75;
    gv_standBlendTime = 0.75;
    gv_idleFidgetStartTime = 40.0;
    gv_idleFidgetRepeatTime = 30.0;
    gv_customFadeDialog = c_invalidDialogId;
    gv_customFadeImage = c_invalidDialogControlId;
    gv_clickables = UnitGroupEmpty();
    gv_cantinaPinboardClickables = UnitGroupEmpty();
    gv_cantinaTrophiesClickables = UnitGroupEmpty();
    gv_labResearchTubeClickables = UnitGroupEmpty();
    gv_visibleUnits = UnitGroupEmpty();
    gv_waitForSkipTimeType = c_timeReal;
    gv_tBDWindowDialog = c_invalidDialogId;
    gv_tBDWindowButtonClose = c_invalidDialogControlId;
    gv_jukeboxTrackTitle = c_textTagNone;
    gv_pB_FIRST = (ge_Pinboard_PBMarSara);
    gv_pB_LAST = (ge_Pinboard_PBCantina);
    gv_pBITEM_LAST = ((ge_PinboardItem_PBItemLast) - 1);
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_pinboardItems[init_i].lv_iD = ge_PinboardItem_PBItemNone;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_pinboards[init_i].lv_iD = ge_Pinboard_PBNone;
        for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
            gv_pinboards[init_i].lv_items[init_i1] = ge_PinboardItem_PBItemNone;
        }
        gv_pinboards[init_i].lv_zoomCamera = "";
        gv_pinboards[init_i].lv_zoomBackCamera = "";
        gv_pinboards[init_i].lv_range = ge_PinboardCameraRange_Close;
        gv_pinboards[init_i].lv_highlight = ge_PinboardHighlightStates_Unhighlighted;
    }
    gv_pinboardCurrent = ge_Pinboard_PBNone;
    gv_pinboardItemCurrent = ge_PinboardItem_PBItemNone;
    gv_tP_NEWITEMAVAILABLE_Type = ge_NewItemType_None;
    gv_tP_NEWITEMAVAILABLE_Text = StringToText("");
    for (init_i = 0; init_i <= 40; init_i += 1) {
        gv_newItems[init_i].lv_type = ge_NewItemType_None;
        gv_newItems[init_i].lv_text = StringToText("");
        gv_newItems[init_i].lv_dialog = c_invalidDialogId;
        gv_newItems[init_i].lv_label = c_invalidDialogControlId;
        gv_newItems[init_i].lv_flash = c_invalidPortraitId;
    }
    gv_worldMode = ge_WorldMode_WorldModeGlobal;
    gv_idleState = ge_IdleState_Idle;
    gv_fullscreenImageDialog = c_invalidDialogId;
    gv_fullscreenImageDialogImage = c_invalidDialogControlId;
    gv_lookAtEnabled = true;
    gv_queryDialogResult = libNtve_ge_CustomDialogResult_c_customDialogResultYes;
    gv_debugSceneRowY = 40;
    for (init_i = 0; init_i <= 40; init_i += 1) {
        gv_debugSceneButtons[init_i] = c_invalidDialogControlId;
    }
    gv_debugSceneExitButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 40; init_i += 1) {
        gv_debugSceneLabels[init_i] = StringToText("");
    }
    gv_roomCheatDialog = c_invalidDialogId;
    gv_roomCheatButtonMarSara = c_invalidDialogControlId;
    gv_roomCheatButtonBridge = c_invalidDialogControlId;
    gv_roomCheatButtonConscription = c_invalidDialogControlId;
    gv_roomCheatButtonArmory = c_invalidDialogControlId;
    gv_roomCheatButtonCantina = c_invalidDialogControlId;
    gv_roomCheatButtonLab = c_invalidDialogControlId;
    gv_roomCheatButtonChar = c_invalidDialogControlId;
    gv_roomCheatButtonObservatory = c_invalidDialogControlId;
    gv_roomCheatButtonCancel = c_invalidDialogControlId;
    gv_roomCameraDialog = c_invalidDialogId;
    gv_roomCameraButtonMarSara = c_invalidDialogControlId;
    gv_roomCameraButtonBridge = c_invalidDialogControlId;
    gv_roomCameraButtonConscription = c_invalidDialogControlId;
    gv_roomCameraButtonArmory = c_invalidDialogControlId;
    gv_roomCameraButtonCantina = c_invalidDialogControlId;
    gv_roomCameraButtonLab = c_invalidDialogControlId;
    gv_roomCameraButtonChar = c_invalidDialogControlId;
    gv_roomCameraButtonCancel = c_invalidDialogControlId;
    gv_debug_BriefingDialog = c_invalidDialogId;
    gv_debug_BriefingButtonClose = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_debug_BriefingMissioniButton[init_i] = c_invalidDialogControlId;
    }
    gv_debug_TVNewsDialog = c_invalidDialogId;
    gv_debug_TVNewsButtonClose = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_debug_TVNewsMissioniButton[init_i] = c_invalidDialogControlId;
    }
    gv_debugStoryModeEnabled = true;
    gv_debugCinematicModeEnabled = true;
    gv_debugDialogForSizePos = c_invalidDialogId;
    gv_c_ACTOR_LAST = ((ge_ActorID_ActorLast) - 1);
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_actors[init_i].lv_actorID = ge_ActorID_ActorNone;
        gv_actors[init_i].lv_stringID = "";
        gv_actors[init_i].lv_name = StringToText("");
        gv_actors[init_i].lv_type = ge_ActorType_None;
        gv_actors[init_i].lv_room = ge_RoomID_RoomNone;
        gv_actors[init_i].lv_cantinaBGType = ge_ActorCantinaBGType_None;
    }
    gv_armoryGreaseMonkeyPlacement = -1;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_actorScenePrepared[init_i] = ge_ActorID_ActorNone;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_actorScenePreparedToActor[init_i] = ge_ActorID_ActorNone;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_actorScenePreparedRoom[init_i] = ge_RoomID_RoomNone;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_actorScenePreparedType[init_i] = ge_SceneType_Scene;
    }
    gv_c_ROOM_FIRST = 1;
    gv_c_ROOM_LAST = ((ge_RoomID_RoomLast) - 1);
    gv_currentRoom = ge_RoomID_RoomNone;
    gv_armoryRoomUnits = UnitGroupEmpty();
    gv_armoryRoomZoomRemovableUnits = UnitGroupEmpty();
    gv_bridgeRoomUnits = UnitGroupEmpty();
    gv_cantinaRoomUnits = UnitGroupEmpty();
    gv_charRoomUnits = UnitGroupEmpty();
    gv_conscriptionRoomUnits = UnitGroupEmpty();
    gv_corridorRoomUnits = UnitGroupEmpty();
    gv_labRoomUnits = UnitGroupEmpty();
    gv_marSaraRoomUnits = UnitGroupEmpty();
    gv_galaxyRoomUnits = UnitGroupEmpty();
    gv_flagshipRoomUnits = UnitGroupEmpty();
    gv_observatoryRoomUnits = UnitGroupEmpty();
    gv_voidRoomUnits = UnitGroupEmpty();
    gv_cantinaState = ge_CantinaStates_Normal;
    gv_armorySpaceLightningAnim = "Stand";
    gv_c_ROOMLOCATION_LAST = ((ge_RoomLocation_RoomLocationLast) - 1);
    gv_currentLocation = ge_RoomLocation_RoomLocationOthers;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_roomScenePrepared[init_i] = ge_RoomID_RoomNone;
    }
    gv_roomSceneLightingAnimation_ShouldPlay = true;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_bGActors[init_i].lv_actorID = c_timerWindowNone;
        gv_bGActors[init_i].lv_timer = TimerCreate();
        for (init_i1 = 0; init_i1 <= 40; init_i1 += 1) {
            gv_bGActors[init_i].lv_nodes[init_i1].lv_type = ge_BGAcotrNodeType_Move;
            for (init_i2 = 0; init_i2 <= 3; init_i2 += 1) {
                gv_bGActors[init_i].lv_nodes[init_i1].lv_anim[init_i2] = "";
            }
        }
    }
    gv_armoryGradientDialog = c_invalidDialogId;
    gv_armoryGradientDialogImage = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_armoryAnchor[init_i] = c_anchorBottomLeft;
    }
    gv_labArtifacts = UnitGroupEmpty();
    gv_hotspots_NoHighlightEffect = UnitGroupEmpty();
    gv_hotspots_Flashing = UnitGroupEmpty();
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_hotspots_FlashingTextTags[init_i] = c_textTagNone;
    }
    gv_travelPanel_CharInvasionQueryResult = libNtve_ge_CustomDialogResult_c_customDialogResultAny;
    gv_introTextDialog = c_invalidDialogId;
    gv_introTextDialogLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_armoryTextDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_armoryTextDialogLabel[init_i] = c_invalidDialogControlId;
    }
    gv_currentGossipActor = ge_ActorID_ActorNone;
    gv_c_ConvoCameraTypeFirst = 1;
    gv_c_ConvoCameraTypeLast = ((ge_ConvoCameraType_ConvoCameraLast) - 1);
    gv_convoCameraRoom = ge_RoomID_RoomNone;
    gv_convoCameraActor1 = ge_ActorID_ActorNone;
    gv_convoCameraActor2 = ge_ActorID_ActorNone;
    gv_convoCameraCurrent = ge_ConvoCameraType_ConvoCameraNone;
    gv_convoCameraChangeResult = true;
    gv_bridgeCommunicatorPortraitValerian = c_invalidPortraitId;
    gv_sceneCantinaTrophies = UnitGroupEmpty();
    gv_sceneLabTrophies = UnitGroupEmpty();
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_briefingPortraits[init_i] = c_invalidPortraitId;
    }
    gv_briefingMovieTransmission = c_invalidTransmissionId;
    gv_briefingTHorner02Text = c_textTagNone;
    gv_briefing_TZeratulPortraitZeratul = c_invalidPortraitId;
    gv_aBChoicePortraitA = c_invalidPortraitId;
    gv_aBChoicePortraitB = c_invalidPortraitId;
    gv_aBChoicePanel = c_invalidDialogId;
    gv_aBChoiceFrame = c_invalidDialogControlId;
    gv_aBChoiceButtonA = c_invalidDialogControlId;
    gv_aBChoiceButtonB = c_invalidDialogControlId;
    gv_aBChoiceButtonReplay = c_invalidDialogControlId;
    gv_abChoiceDifficulty = 2;
    gv_aBChoiceTHanson03PortraitPlanet = c_invalidPortraitId;
    gv_aBChoiceTHanson03PortraitSelendis = c_invalidPortraitId;
    gv_aBChoiceTTosh03PortraitTosh = c_invalidPortraitId;
    gv_aBChoiceTTosh03PortraitToshLeft = c_invalidPortraitId;
    gv_aBChoiceTTosh03PortraitNova = c_invalidPortraitId;
    gv_aBChoiceTTosh03PortraitNova_Right = c_invalidPortraitId;
    gv_tipStart = true;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
string gf_EnableUnit (string lp_unitType);
string gf_DisableUnit (string lp_unitType);
string gf_PurchaseUnit (string lp_unitType);
string gf_RefundUnit (string lp_unitType);
string gf_ExecuteConscriptionAction (int lp_actionType, string lp_unitType);
int gf_ParseConscriptionActionType (string lp_actionTypeName);
string gf_ParseUnitType (string lp_unitTypeName);
string gf_ExecuteConscriptionCheat (string lp_actionTypeName, string lp_unitTypeName);
void gf_CustomFadeInOut (bool lp_fadeIn, fixed lp_duration, bool lp_waitUntilDone);
void gf_TurnClickableOnOff (unit lp_unit, bool lp_desiredState);
void gf_TurnClickablesOnOff (unitgroup lp_whichClickables, bool lp_desiredState);
void gf_TurnClickableOnNoCheck (unit lp_unit);
void gf_TurnClickablesOnNoCheck (unitgroup lp_whichClickables);
void gf_SetClickableCursorType (unit lp_unit, int lp_cursorType);
void gf_AddClickable (unitgroup lp_whichClickables, unit lp_unit, int lp_room, int lp_cursorType);
void gf_ResetClickablesLockCount ();
void gf_SetUnitClickableLockCount (int lp_action, unit lp_unit, int lp_lock);
int gf_GetUnitClickableLockCount (unit lp_unit);
int gf_GetUnitClickableRoom (unit lp_unit);
void gf_ChangeVisibleUnits (unitgroup lp_units);
void gf_RemoveVisibleUnit (bool lp_addRemove, unit lp_unit);
void gf_RemoveVisibleUnits (bool lp_addRemove, unitgroup lp_units);
void gf_WaitForSkip (fixed lp_timeout, int lp_timeType);
void gf_DisplayBackButton (trigger lp_callback);
void gf_FromatBackPlayButton (int lp_button);
void gf_HideBackButton (bool lp_showHide);
void gf_BackButtonBack ();
void gf_TBDWindow (text lp_message, trigger lp_exitCallback);
void gf_HighlightUnit (bool lp_highlightUnhighlight, unit lp_unit);
void gf_SetAllSoundChannelVolumesStoryMode (int lp_mode);
void gf_FadeOutSoundChannelVolumeForMovie (fixed lp_duration);
void gf_FadeOutAllSoundChannelVolume (fixed lp_duration);
int gf_LastCreatedJukeboxID ();
int gf_GetJukeboxID (unit lp_box);
void gf_CreateJukebox (unit lp_box, bool lp_startRandom);
void gf_AddTrackToJukebox (int lp_jukeboxID, soundlink lp_music, text lp_title, text lp_author);
void gf_SetJukeboxFidget (int lp_jukeboxID, string lp_trackFidgetSet, string lp_turnOffFidgetSet);
void gf_JukeboxClicked (unit lp_jukebox);
void gf_JukeboxNextTrack (int lp_jukeboxID, bool lp_withComments);
void gf_JukeboxUpdateTrackInfo (int lp_jukeboxID);
void gf_ShowHideJukeboxTrackInfo (bool lp_showHide);
void gf_MuteJukebox (bool lp_muteUnmute, int lp_jukeboxID);
bool gf_JukeboxIsShutdown (int lp_jukeboxID);
void gf_AddPinboard (int lp_iD, string lp_genericFidget, unit lp_board, int lp_room, string lp_zoomCamera, string lp_zoomAnimation, fixed lp_zoomDuration, string lp_zoomBackCamera, string lp_zoomBackAnimation, fixed lp_zoomBackDuration, soundlink lp_highlightSound);
void gf_AddPinboardItem (int lp_item, string lp_fidgetSet, unit lp_itemUnit, soundlink lp_activateSound);
void gf_AddPinboardItemToPinboard (int lp_pinboard, int lp_item);
void gf_HidePinboardItem (bool lp_showHide, int lp_item);
void gf_HighlightPinboard (int lp_pinbaord, bool lp_hightlight, unit lp_unhighlightedUnit);
void gf_PreparePinboard (int lp_pinboard);
int gf_GetPinboardFromUnit (unit lp_unit);
unit gf_PinboardItem (int lp_item);
int gf_GetPinboardItemFromUnit (unit lp_unit);
unitgroup gf_GetPinboardItemGroup (int lp_pinboard);
bool gf_PinboardItemIsOnPinboard (int lp_pinboard, int lp_item);
int gf_GetPinboardOfItem (int lp_item);
int gf_GetCurrentPinboardItem ();
void gf_UpdateNewItems ();
void gf_NewItemAvailable (int lp_type, text lp_text, string lp_imagePortrait, string lp_modelFlash, fixed lp_duration, int lp_customData);
void gf_PauseNewItemInfo (bool lp_pauseUnpause);
void gf_CreateNewItem (int lp_newItemIndex, fixed lp_offset);
void gf_WaitNewItemInfoDisplayDuration (int lp_newItemIndex);
void gf_MoveNewItem (int lp_newItemIndex, fixed lp_offsetY, fixed lp_duration);
void gf_MoveNewItemInstant (int lp_newItemIndex, fixed lp_offsetY);
void gf_MoveNewItemFlashInstant (int lp_newItemIndex);
void gf_RemoveNewItem (int lp_newItemIndex);
void gf_DestoryNewItem (int lp_newItemIndex);
void gf_HideNewItem (bool lp_hideShow, int lp_newItemIndex);
void gf_ResearchUnlock (string lp_research);
void gf_NewMercenary (string lp_mercenary);
int gf_CurrentWorldMode ();
int gf_CurrentIdleState ();
void gf_WaitForWorldMode (int lp_worldMode);
void gf_WaitForIdleState (int lp_idleState);
void gf_WaitForGlobalIdle ();
void gf_SetWorldMode (int lp_mode);
void gf_SetIdleState (int lp_idleState);
void gf_DisplayFullScreenImage (string lp_image);
void gf_HideFullScreenImage (bool lp_showHide);
void gf_MakeUnitLookAtPointAndBlinkWithDebugControl (unit lp_unit, string lp_type, point lp_point);
void gf_MakeUnitLookAtPointWithDebugControl (unit lp_unit, string lp_type, point lp_point);
void gf_MakeUnitLookAtUnitAndBlinkWithDebugControl (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint);
void gf_MakeUnitLookAtUnitWithDebugControl (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint);
void gf_DisplayQueryDialog (playergroup lp_players, text lp_show, bool lp_show2);
int gf_QueryDialogResult ();
void gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime);
void gf_TurnActorFidgetOnOffInstantly (int lp_actor, bool lp_onOff);
void gf_TurnAnimationPropertiesOnOffInstantly (unit lp_unit, string lp_property, bool lp_onOff);
void gf_TurnAnimationPropertiesOnOff (unit lp_unit, string lp_property, bool lp_onOff, fixed lp_blend);
int gf_ConvertDifficultyToInteger (int lp_campaignDifficulty);
int gf_ConvertIntegerToDifficulty (int lp_value);
void gf_PerformFarewellLine (unit lp_speaker, string lp_line, string lp_beforeAnim, string lp_afterAnim, bool lp_waitOption);
void gf_PerformFidgetLine (unit lp_speaker, string lp_line, string lp_anim);
void gf_ShowHideUnitGroup (bool lp_showHide, unitgroup lp_unitGroup);
void gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection (unit lp_unit, point lp_targetPoint, int lp_orderQueue);
point gf_UnitMovingTarget (unit lp_unit);
void gf_StopAllTransmissionConversation ();
point gf_RelativePoint (point lp_source, point lp_sourceCenter, point lp_targetCenter, fixed lp_xRatio, fixed lp_yRatio, fixed lp_rotate);
void gf_Ambience_FadeSoundVolumeOverTime (soundlink lp_soundLink, sound lp_sound, fixed lp_time);
void gf_Ambience_RestoreSoundVolume (soundlink lp_soundLink, sound lp_sound);
void gf_FadeJukeboxVolumeOverTime (int lp_jukeboxID);
void gf_Init02BRoomsArmoryTechUnits ();
void gf_Init02BRoomsArmoryWindowPlanets (string lp_mission);
void gf_Init02BRoomsArmoryWindowPlanets2 ();
void gf_ReturnNewItemInfo ();
void gf_ReturnNewItemInfoResearch ();
void gf_ReturnNewItemInfoMercenary ();
void gf_ReturnFlahsing ();
void gf_ReturnTimestamp ();
void gf_DisplayMissionDebriefing (string lp_mission);
void gf_TransitionalSave ();
void gf_TransitionalLoad ();
void gf_DisplayDebugMessage (text lp_msg);
void gf_DebugSceneAddButton (int lp_wide, int lp_tall, int lp_x, int lp_y, text lp_label, trigger lp_callback, text lp_sceneLabel);
void gf_DebugSceneAddLabel (int lp_x, int lp_y, text lp_label);
void gf_RoomCheatAddButton (text lp_label);
void gf_RoomCheatCreateDialog ();
void gf_RoomCheatUpdateButton (int lp_button, bool lp_condition);
void gf_RoomCheatUpdateDialog (bool lp_bypass);
void gf_DisplayRoomCheatDialog (bool lp_check);
void gf_HideRoomCheatDialog ();
void gf_RoomCameraAddButton (text lp_label);
void gf_RoomCameraCreateDialog ();
void gf_RoomCameraUpdateButton (int lp_button, bool lp_condition);
void gf_RoomCameraUpdateDialog (bool lp_bypass);
void gf_DisplayRoomCameraDialog (bool lp_check);
void gf_HideRoomCameraDialog ();
void gf_Debug_CreateBriefingMissionButton (string lp_mission);
void gf_Debug_CreateBriefingMissionButtonNewLine ();
void gf_Debug_CreateBriefingDialog ();
void gf_Debug_CreateTVNewsMissionButton (string lp_news);
void gf_Debug_CreateTVNewsMissionButtonNewLine ();
void gf_Debug_CreateTVNewsDialog ();
void gf_DisplayBlizzconScreen ();
void gf_Debug_RoomChangeTimerStart ();
void gf_Debug_RoomChangeTimerStart2 (int lp_room, bool lp_display);
void gf_DebugOutputSetUnitsSingle (int lp_room);
string gf_ActorStringID (int lp_actorID);
text gf_ActorName (int lp_actorID);
point gf_ActorPoint (int lp_roomID, int lp_actorID, int lp_toActorID);
bool gf_ActorIsEnabledInRoom (int lp_actor, int lp_room);
bool gf_ActorIsEnabled (int lp_actor);
int gf_ActorID (unit lp_actorUnit);
unit gf_ActorUnit (int lp_iD);
int gf_ActorRoom (int lp_iD);
bool gf_ActorWithFidget (int lp_actor);
bool gf_ActorWithConversation (int lp_actor);
string gf_ActorConversation (int lp_actorID);
string gf_ActorLightingAnim (int lp_actorID, int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimRaynor (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimRaynorMarine (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimTychus (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimHanson (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimTosh (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimSwann (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimHorner (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimStettmann (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimWarfield (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimWarfieldAOD (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorRoomAnim (int lp_actor, int lp_room, int lp_index);
point gf_RaynorCantinaHome ();
bool gf_RaynorCantinaHome2 ();
point gf_LabRaynorHome ();
void gf_InitActorSingle (int lp_actorID, string lp_stringID, text lp_name, unit lp_unit, int lp_type, int lp_cantinaBGType, string lp_convoStateIndex);
void gf_InitActors ();
void gf_InitActorRooms ();
void gf_InitActorRoomsStetmann ();
void gf_InitActorCantinaBackgroundLocations ();
void gf_InitActorCantinaBackground ();
void gf_SetActorUnit (int lp_actorID, unit lp_unit);
void gf_SetActorRoom (int lp_actorID, int lp_roomID);
void gf_SetActorType (int lp_actorID, int lp_type);
void gf_SetActorCantianBGLocation (int lp_actorID, int lp_locID);
void gf_ResetAllActorCantinaBGLocationis ();
void gf_ResetActorToLocation (int lp_actorID, point lp_location);
void gf_HideAllActors (bool lp_hideShow);
void gf_ActorTalked (int lp_actor);
void gf_LockActorReloading (bool lp_lockUnlock);
void gf_ReloadActors (bool lp_forced);
void gf_PlayActorLightingAnim (int lp_actorID, int lp_toActorID, int lp_room, int lp_lightingType);
void gf_ClearActorLightingAnim (int lp_actorID);
void gf_ReloadRoomActorAnimation (int lp_actor, int lp_roomID);
void gf_LoadActorComplexAnimation (int lp_actorID);
void gf_ActorScenePrepare (int lp_actorID, int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearAll ();
void gf_ActorSceneClear (int lp_actorID, int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareRaynor (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearRaynor (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareRaynorMarine (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearRaynorMarine (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareTychus (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearTychus (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareHorner (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearHorner (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareTosh (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearTosh (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareHanson (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearHanson (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareStettmann (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearStettmann (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareSwann (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearSwann (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareWarfield (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearWarfield (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareWarfieldAOD (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearWarfieldAOD (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareLabAdjutant (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearLabAdjutant (int lp_toActorID, int lp_room, int lp_type);
void gf_PreloadRoomIfCondition (int lp_room, bool lp_condition);
void gf_PreloadUnitGroup (unitgroup lp_unitGroup);
void gf_PreloadUnitStoryMap (unit lp_unit);
void gf_PrepareRoomArmoryBGGreasemonkey ();
void gf_PrepareRoomCantinaTrophiesVisibilityLogic ();
void gf_PrepareRoomCantinaPostersVisibilityLogic ();
void gf_PrepareRoomCharArtifactLogic ();
bool gf_LabCrystalEnabled ();
void gf_PrepareRoomLabCrystalAtrifactVisibilityLogic ();
void gf_PrepareRoomActorVisibility (int lp_roomID);
void gf_PrepareRoomActors (int lp_roomID, bool lp_includeRaynor);
void gf_PrepareRoom (int lp_room);
void gf_WalkinRoom (int lp_room);
void gf_EnterRoom (int lp_room, bool lp_showTransition);
void gf_LeaveRoomArmory (bool lp_showTransition);
void gf_LeaveRoomBridge (bool lp_showTransition);
void gf_LeaveRoomCantina (bool lp_showTransition);
void gf_LeaveRoomChar (bool lp_showTransition);
void gf_LeaveRoomConscription (bool lp_showTransition);
void gf_LeaveRoomLab (bool lp_showTransition);
void gf_LeaveRoomMarSara (bool lp_showTransition);
void gf_LeaveRoomGalaxy (bool lp_showTransition);
void gf_LeaveRoomTechPurchase (bool lp_showTransition);
void gf_LeaveRoomLabResearch (bool lp_showTransition);
void gf_LeaveRoomMercenary (bool lp_showTransition);
void gf_LeaveRoomMissionArchieves (bool lp_showTransition);
void gf_LeaveRoom (int lp_room, bool lp_showTransition, bool lp_stopTransmissions);
void gf_InitMarSaraBarUnits ();
void gf_InitMarSaraBarHotspots ();
void gf_PrepareCharSkybox (bool lp_convo);
bool gf_RoomStates (int lp_stateType, int lp_room);
void gf_SetRoomStates (int lp_stateType, int lp_room, bool lp_states);
int gf_RoomStatesIndex (int lp_stateType, int lp_room);
void gf_RegisterRoomStates ();
void gf_BridgeActorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly);
void gf_BridgeRaynorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly);
void gf_BridgeHornerAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly);
void gf_LabActorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly);
void gf_LabRaynorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly);
void gf_CharTychusAnimationStart ();
void gf_CharTychusAnimationStop ();
void gf_CharActorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly);
void gf_CharRaynorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly);
void gf_CharWarfieldAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly);
void gf_CharWarfieldAODAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly);
void gf_RoomActorAnimation (int lp_room, int lp_actor, bool lp_forced, bool lp_onOff, bool lp_instantly);
int gf_RoomLocation (int lp_room);
int gf_ConvertIntegerToRoomLocation (int lp_index);
bool gf_RoomIsOnLocation (int lp_room, int lp_location);
bool gf_RoomLocationIsEnabled (int lp_location);
void gf_EnableRoomLocation (bool lp_enableDisable, int lp_location);
void gf_UnloadLocation (int lp_location);
void gf_UnloadRoom (int lp_room);
void gf_PreloadLocation (int lp_location);
void gf_ReloadLocations ();
void gf_TurnLabBackgroundSoundOnOff (bool lp_onOff);
void gf_TurnMarSaraBarBackgroundSoundOnOff (bool lp_onOff);
void gf_CreateBridgeBackgroundSound ();
void gf_DestoryBridgeBackgroundSound ();
void gf_CreateCantinaBackgroundSound ();
void gf_DestoryCantinaBackgroundSound ();
void gf_CreateCharBackgroundSounds ();
void gf_DestoryCharBackgroundSounds ();
void gf_RoomScenePrepare (int lp_room, int lp_type);
void gf_RoomSceneClearAll ();
void gf_RoomSceneClear (int lp_room, int lp_type);
void gf_ViewRoomCamera (int lp_room, playergroup lp_players, fixed lp_duration);
unit gf_RoomUnit (int lp_roomID);
unitgroup gf_RoomUnits (int lp_room);
bool gf_RoomIsEnabled (int lp_room);
text gf_RoomName (int lp_room);
int gf_RoomFromIndex (int lp_index);
void gf_ChangeRoom (int lp_room, bool lp_showTransition);
void gf_GoToRoom (int lp_room, bool lp_showTransition);
point gf_CenterOfRoom (int lp_room);
void gf_DisplayRoomChangePanel ();
string gf_RoomLoadingImage (int lp_room);
unit gf_RoomDoor (int lp_room);
int gf_DoorRoom (unit lp_door);
void gf_OpenDoor (int lp_room, bool lp_instant);
void gf_CloseDoor (int lp_room, bool lp_instant);
void gf_AddBGActor (int lp_actorID, point lp_home);
int gf_LastAddedBGActorID ();
int gf_GetBGActorID (int lp_actorID);
int gf_GetBGActorIDByActionTrigger (trigger lp_actionTrigger);
unit gf_GetBGActor (int lp_bGActorID);
void gf_AddBGActorNode (int lp_actorID, int lp_nodeType, point lp_targetLoc, bool lp_turnOrNot, fixed lp_stayDuration, string lp_anim1, fixed lp_anim1Duration, string lp_anim2, fixed lp_anim2Duration, string lp_anim3, fixed lp_anim3Duration);
void gf_BGActorStart (int lp_actorID);
void gf_BGActorStop (int lp_actorID);
void gf_BGActorTalkToRaynor (int lp_actorID);
void gf_BGActorPause (int lp_actorID);
void gf_BGActorResume (int lp_actorID);
void gf_BGActorDoNext (int lp_bGActorID);
void gf_HotspotZoom (unit lp_room, string lp_zoomCamera, string lp_animation, fixed lp_duration);
void gf_HotspotLeave (int lp_room, trigger lp_prepareRoomCallBack, fixed lp_outDuration, fixed lp_inDuration);
void gf_HotspotLeaveWithCamera (int lp_room, trigger lp_prepareRoomCallBack, string lp_zoomBackCamera, string lp_zoomBackAnimation, fixed lp_zoomBackDuration);
unit gf_HotspotClicked ();
void gf_AddFlashingTextTagToHotspot (unit lp_unit, string lp_conversationStateIndex, int lp_offsetX, int lp_offsetY, int lp_edgeOffsetX, int lp_edgeOffsetY);
void gf_AddFlashingTextTagToActor (int lp_actor, string lp_conversationStateIndex, int lp_offsetX, int lp_offsetY, int lp_edgeOffsetX, int lp_edgeOffsetY);
void gf__AddFlashingTextTag (unit lp_unit, text lp_text, string lp_attachmentPoint, int lp_offsetX, int lp_offsetY, string lp_edgeImage, int lp_edge, int lp_edgeOffsetX, int lp_edgeOffsetY);
int gf_HotspotFlashingTextTag (unit lp_unit);
bool gf_HotspotFlashingPaused (unit lp_unit);
string gf_HotspotConvoState (unit lp_unit);
void gf_StartFlashingUnit (unit lp_unit);
void gf_StopFlashingUnit (unit lp_unit);
void gf_HideFlashingTextTag (bool lp_showHide, unit lp_unit);
void gf_PauseFlashingUnit (bool lp_pauseUnpause, unit lp_unit);
void gf_PauseFlashing (bool lp_pauseUnpause);
void gf_HotspotHighlighted (unit lp_hotspot, bool lp_highlighted);
void gf_ArmoryTech_HotspotClicked (string lp_convoID, string lp_camera, unit lp_techUnit, trigger lp_leaveCallback);
void gf_ArmoryTech_HotspotLeave ();
void gf_ArmoryTechHideallbut (unit lp_displayUnit);
void gf_ArmoryTechShowall ();
void gf_MercDisplay (trigger lp_exitCallback);
void gf_LabResearchDisplay (trigger lp_exitCallback);
void gf_TravelPanelDisplay (trigger lp_leaveCallback);
void gf_TravelPanelClose ();
void gf_TravelPanelZeratulDisplay (trigger lp_leaveCallback);
void gf_TravelPanelZeratulClose ();
void gf_DisplayIntroTextBox (text lp_header, string lp_headerStyle, text lp_text, string lp_textStyle, int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_width, int lp_height);
void gf_HideIntroTextBox (bool lp_showHide);
void gf_DisplayArmoryTextBox (text lp_text, text lp_headerText, int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_width, int lp_height, int lp_iD, int lp_backGroundImageInt, string lp_titleStyle, string lp_bodyStyle, int lp_headerHeight);
void gf_HideArmoryTextBox (bool lp_showHide, int lp_iD);
void gf_CharRoomUICreate ();
void gf_CharRoomUIDisplayUI (int lp_uI);
void gf_PlayFidget (string lp_fidget, int lp_actor1, int lp_actor2);
void gf_PlayGossip (int lp_actor);
void gf_UseConversationCamera (int lp_room, int lp_character, int lp_cameraType, unit lp_cameraObject);
bool gf_UseConversationCameraMarSaraTychus (int lp_cameraType);
bool gf_UseConversationCameraBridgeTosh (int lp_cameraType);
bool gf_UseConversationCameraBridgeHorner (int lp_cameraType);
bool gf_UseConversationCameraBridgeHanson (int lp_cameraType);
bool gf_UseConversationCameraBridgeTychus (int lp_cameraType);
bool gf_UseConversationCameraBridgeCommunicator (int lp_cameraType);
bool gf_UseConversationCameraCantinaTychus (int lp_cameraType);
bool gf_UseConversationCameraCantinaTosh (int lp_cameraType);
bool gf_UseConversationCameraCharTychus (int lp_cameraType);
bool gf_UseConversationCameraCharWarfield (int lp_cameraType);
bool gf_UseConversationCameraLabHanson (int lp_cameraType);
bool gf_UseConversationCameraLabAdjutant (int lp_cameraType);
bool gf_UseConversationCameraAmorySwan (int lp_cameraType);
void gf_SetConvensationCamera (int lp_type, camerainfo lp_cameraObject);
string gf_ConvoCharacter (int lp_actorID);
void gf_ConvoSetting (int lp_room, int lp_raynor, int lp_to1, unit lp_cameraObject1, int lp_to2, unit lp_cameraObject2, trigger lp_customCameraCallback, trigger lp_changeCameraCallback);
int gf_ConvoGetActorLocatioinActor (int lp_room, int lp_to);
void gf_ConvoPositionActors (int lp_room, int lp_raynor, int lp_to1, int lp_to2);
void gf_ConvoClearCamera (int lp_to1, int lp_to2);
void gf_Convo (string lp_convo, int lp_room, int lp_raynor, point lp_raynorHome, int lp_to1, unit lp_cameraObject1, point lp_characterHome1, int lp_to2, unit lp_cameraObject2, point lp_characterHome2, trigger lp_callbackPre, trigger lp_callbackPost, bool lp_changeScreenMode, bool lp_changeCameraAtEnd, trigger lp_customCameraCallback, trigger lp_changeCameraCallback);
void gf_DisplayTimestampFromUserData (string lp_timestamp);
void gf_DisplayTimestamp (int lp_type);
string gf_SceneFile (string lp_scene, int lp_index);
string gf_SceneAnimation (string lp_scene, int lp_index);
soundlink gf_SceneSound (string lp_scene, int lp_index);
void gf_SceneInitDataSingle (string lp_sceneIndex, string lp_file1, string lp_file2, string lp_file3, string lp_anim1, string lp_anim2, string lp_anim3, soundlink lp_mESound1, soundlink lp_mESound2, soundlink lp_mESound3);
void gf_SceneInitData ();
void gf_ScenePreload (string lp_scene);
void gf_ScenePreloadInit ();
void gf_ScenePrepare (bool lp_clickableOff);
void gf_ScenePlayAsync (string lp_scene, int lp_subIndex);
void gf_SceneCleanup ();
void gf_SceneCleanupWithFadeandEnterRoom ();
void gf_ScenePrepareCantinaTrophies (string lp_scene, fixed lp_x, fixed lp_y, fixed lp_facing);
void gf_SceneRemoveCantinaTrophies ();
void gf_ScenePreloadCantinaTrophies (string lp_scene);
unitgroup gf_SceneCantinaTrophiesUnitTypeGroup (string lp_scene);
void gf_ScenePrepareLabTrophies (fixed lp_x, fixed lp_y, fixed lp_facing);
void gf_SceneRemoveLabTrophies ();
void gf_ScenePreloadLabTrophies ();
unitgroup gf_SceneLabTrophiesUnitTypeGroup ();
void gf_Scene (string lp_scene, int lp_subIndex, bool lp_clickableOff, bool lp_fadeIn);
void gf_AnimaticPrepare ();
void gf_AnimaticCleanup (int lp_room);
void gf_MissionLaunchWithBriefing (string lp_mission, int lp_difficulty);
string gf_MissionPlayBriefing (string lp_mission, bool lp_playABChoice);
trigger gf_MissionBriefingCallback (string lp_mapID2);
trigger gf_MissionBriefingPreload (string lp_mapID2);
trigger gf_MissionBriefingPreloadRough (string lp_mapID2);
trigger gf_MissionABChoiceCallback (string lp_mapID2);
void gf_SetMissionABChoiceResult (string lp_mapID);
string gf_MissionABChoiceResult ();
void gf_Briefing (string lp_mission, int lp_room, trigger lp_skippable, trigger lp_preload);
void gf_BriefingPreload (bool lp_all);
void gf_BriefingPreloadScreens (int lp_room);
void gf_BriefingPrepare (int lp_room, int lp_initCamera, int lp_actor1, int lp_actor2, int lp_actor3, bool lp_mainAnim, bool lp_center, bool lp_left, bool lp_right);
string gf_BriefingCamera (int lp_camera);
unit gf_BriefingScreen (int lp_room, int lp_briefingScreen);
void gf_BriefingApplyCamera (int lp_room, int lp_camera, fixed lp_duration);
int gf_BriefingCreatePortrait (string lp_model, string lp_camera, int lp_screen, bool lp_attachToScreenNow);
point gf_BriefingActorAttachPoint (int lp_room, int lp_actor);
void gf_BriefingAddActor (int lp_roomID, int lp_actorID);
void gf_BriefingRemoveAllActors ();
void gf_BriefingDestoryAllPortraits ();
void gf_BriefingPlayVideo (string lp_movie, int lp_roomID, int lp_screen, bool lp_transientAnim);
void gf_BriefingStopVideo (int lp_roomID, int lp_screen);
void gf_BriefingTZeratulCreateScreen (string lp_mission);
void gf_BriefingTZeratulClear ();
void gf_BriefingTZeratulVideoFadeIn ();
void gf_BriefingTZeratulVideoFadeOut ();
void gf_BriefingTZeratulPlayVideo (string lp_movie, bool lp_transientAnim);
void gf_ABChoiceCreatePanel (string lp_userInstance_A, trigger lp_callback_A, string lp_userInstance_B, trigger lp_callback_B, trigger lp_callback_Replay, trigger lp_callback_Back);
void gf_ABChoiceCreateSubPanel (int lp_side, string lp_userInstance);
void gf_ABChoiceCreateIcon (string lp_button, string lp_race, int lp_relativeControl, int lp_offsetX, int lp_offsetY, int lp_anchor, int lp_relativeAnchor);
void gf_ABChoiceDestoryPanel ();
void gf_ABChoiceCreateAutoSave ();
void gf_DebriefingTValerian01Play2 ();
void gf_DebriefingPrepare (int lp_room);
void gf_DebriefingCleanup (int lp_room);
void gf_DebriefingPreload ();
void gf_ScriptSceneMercIntroDisplayUI (bool lp_withCamera);
trigger gf_CurrentTVNews2 ();
trigger gf_TVNewsTriggerCallback (string lp_news);
trigger gf_TVNewsTriggerPreload (string lp_news);
void gf_TVNewsPreload (string lp_news);
void gf_TVNewsPreloadGeneric (string lp_news);
void gf_TVNewsMarSara2 (string lp_news, trigger lp_skippable);
void gf_TVNewsMarSaraStopAllThreads ();
void gf_TVNewsCantina3 (string lp_news, trigger lp_skippable);
void gf_TVNewsCantinaStopAllThreads ();
void gf_TVNewsCantina4 (string lp_news, trigger lp_skippable);
void gf_TVNewsSetWatched (string lp_news);
bool gf_TVNewsIsWatched (string lp_news);
void gf_WaitForTimeToPlayNextTip (fixed lp_duration);
void gf_AddTip (string lp_convoState);
void gf_StartTipHint ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Cheats;
trigger gt_WaitForSkipTrig;
trigger gt_BackButtonClicked;
trigger gt_BackButtonEscape;
trigger gt_BackButtonEscapeSkippable;
trigger gt_TBDWindowCloseClicked;
trigger gt_JukeboxClicked;
trigger gt_JukeboxTrackLoop;
trigger gt_JukeboxTrackAnimation;
trigger gt_JukeboxTrackComments;
trigger gt_StopSoundtrackMultiple;
trigger gt_PinboardClicked;
trigger gt_PinboardZoom;
trigger gt_PinboardLeave;
trigger gt_PinboardItemClicked;
trigger gt_PinboardItemClickedPreCallback;
trigger gt_PinboardItemClickedPostCallback;
trigger gt_PinboardItemClickedCamera;
trigger gt_PinboardItemClickedCameraChanged;
trigger gt_PinboardItemSkippable;
trigger gt_PinboardItemBack;
trigger gt_DisplayNewItems;
trigger gt_NewItemAvailable;
trigger gt_CreateNewItem;
trigger gt_MoveNewItem;
trigger gt_RemoveNewItem;
trigger gt_DebugEnabledLookAt;
trigger gt_DebugDisabledLookAt;
trigger gt_QueryDialogDismissed;
trigger gt_MapInit;
trigger gt_Init00DebugCheckforcinematicsizesetting;
trigger gt_Init01StoryData;
trigger gt_Init01AData;
trigger gt_Init01CDerivedStates;
trigger gt_Init01CDerivedStatesTrophies;
trigger gt_Init01CDerivedStatesResearch;
trigger gt_Init01CDerivedStatesMerc;
trigger gt_Init01CDerivedStatesNews;
trigger gt_Init01CDerivedStatesTransitionalLoad;
trigger gt_Init02World;
trigger gt_Init02AActors;
trigger gt_Init02BRooms;
trigger gt_Init02BRoomsLabResearchSamples;
trigger gt_Init02CCameras;
trigger gt_Init02DHotspots;
trigger gt_Init02DHotspotsPinboard;
trigger gt_Init02EStarmap;
trigger gt_Init02FScenes;
trigger gt_Init02GBriefingABChoice;
trigger gt_Init02HDebriefing;
trigger gt_Init02ITVNews;
trigger gt_Init02JPreloading;
trigger gt_Init03UI;
trigger gt_Init04Environment;
trigger gt_Init05Sounds;
trigger gt_Init06Intro;
trigger gt_ReturnToArmory;
trigger gt_ReturnToBridge;
trigger gt_ReturnToCantina;
trigger gt_ReturnToCantinaArcade;
trigger gt_ReturnToChar;
trigger gt_ReturnToConscription;
trigger gt_ReturnToLab;
trigger gt_ReturnToMarSara;
trigger gt_ReturnToBattleReport;
trigger gt_ReturnToObservatory;
trigger gt_ReturnToObservatoryBackToBridge;
trigger gt_ReturnGeneric;
trigger gt_ReturnGeneric2;
trigger gt_ReturnABChoice;
trigger gt_PlayerQuitsStorymode;
trigger gt_StorySave;
trigger gt_EndofTime;
trigger gt_EnableDebug;
trigger gt_DisableDebug;
trigger gt_DebugAutomatedTesting;
trigger gt_TerranUptheNight;
trigger gt_DebugSceneCreateDialog;
trigger gt_DebugSceneClicked;
trigger gt_DebugSceneExit;
trigger gt_DebugSCENE;
trigger gt_DebugScenePerformanceTestGetFPS;
trigger gt_RoomCheatButtonResponse;
trigger gt_DebugROOM;
trigger gt_DebugROOMCHEAT;
trigger gt_DebugTESTCAMERA;
trigger gt_DebugGAMECAMERA;
trigger gt_DebugGLOBALVIEW;
trigger gt_DebugUNLOCKCAMERA;
trigger gt_RoomCameraButtonResponse;
trigger gt_DebugROOMCAMERA;
trigger gt_Debug_Briefing;
trigger gt_Debug_BriefingDialogMissionButtonResponse;
trigger gt_Debug_BriefingDialogClose;
trigger gt_Debug_TVNews;
trigger gt_Debug_TVNewsDialogMissionButtonResponse;
trigger gt_Debug_TVNewsDialogClose;
trigger gt_DebugABChoice;
trigger gt_DebugMercIntro;
trigger gt_DebugLabIntro;
trigger gt_DebugArmoryIntro;
trigger gt_BlizzconScreenWait;
trigger gt_DebugOutputSets;
trigger gt_DebugCINEMATICMODE;
trigger gt_DebugSHOWALL;
trigger gt_DebugDOOR;
trigger gt_DebugIDLETIMES;
trigger gt_DebugCredits;
trigger gt_DebugDoorAnimation;
trigger gt_DebugPauseMusic;
trigger gt_DebugAttachmentLocation;
trigger gt_DebugHideUnclickables;
trigger gt_DebugStoryState;
trigger gt_DebugClickTurnOn;
trigger gt_DebugClick;
trigger gt_DebugStarmap;
trigger gt_DebugCloseStarmap;
trigger gt_DebugMissionArchieves;
trigger gt_DebugShowActor;
trigger gt_DebugHideActor;
trigger gt_DebugRoomPreloadStates;
trigger gt_DebugSize;
trigger gt_DebugPos;
trigger gt_DebugBGUnitPicked;
trigger gt_DebugToshPortrait;
trigger gt_DebugToshPortrait2;
trigger gt_DebugStopTransmission;
trigger gt_DebugZeratulPlanetPanel;
trigger gt_DebugTemp;
trigger gt_ActorClicked;
trigger gt_PrepareRoomArmory;
trigger gt_PrepareRoomBridge;
trigger gt_PrepareRoomCantina;
trigger gt_PrepareRoomChar;
trigger gt_CharArtifactAnimation;
trigger gt_PrepareRoomConscription;
trigger gt_PrepareRoomCorridor;
trigger gt_PrepareRoomFlagship;
trigger gt_PrepareRoomGalaxy;
trigger gt_PrepareRoomLab;
trigger gt_PrepareRoomLabResearch;
trigger gt_PrepareRoomMarSara;
trigger gt_PrepareRoomObservatory;
trigger gt_PrepareRoomTechPurchase;
trigger gt_PrepareRoomMercenary;
trigger gt_PrepareRoomMissionArchieves;
trigger gt_PrepareRoomVoid;
trigger gt_WalkinRoomDoor;
trigger gt_WalkinArmory;
trigger gt_WalkinBridge;
trigger gt_WalkinCantina;
trigger gt_WalkinChar;
trigger gt_WalkinConscription;
trigger gt_WalkinLab;
trigger gt_WalkinMarSara;
trigger gt_EnterArmory;
trigger gt_EnterBridge;
trigger gt_EnterCantina;
trigger gt_EnterCantinaStartJukebox;
trigger gt_EnterChar;
trigger gt_EnterConscription;
trigger gt_EnterLab;
trigger gt_EnterMarSara;
trigger gt_EnterCantinaStartJukebox2;
trigger gt_RoomStatesDefaultCallback;
trigger gt_CharTychusAnimation;
trigger gt_RoomChangeButtonResponse;
trigger gt_RoomChangeButtonUpdate;
trigger gt_BGActorNodeMoveArrive;
trigger gt_BGActorNodeStayExpires;
trigger gt_BGActorNodeDo;
trigger gt_ArmoryBackgroundActivitiesStart;
trigger gt_ArmoryBackgroundActivitiesStop;
trigger gt_CantinaBackgroundActivitiesStart;
trigger gt_CantinaBackgroundActivitiesStop;
trigger gt_CantinaBackgroundOthersInit;
trigger gt_CantinaBackgroundOthersStart;
trigger gt_CantinaBackgroundOthersStop;
trigger gt_LabBackgroundActivitiesStart;
trigger gt_LabBackgroundActivitiesStop;
trigger gt_BridgeBackgroundActivitiesStart;
trigger gt_BridgeBackgroundActivitiesStop;
trigger gt_BridgeBackgroundBralikInit;
trigger gt_BridgeBackgroundBralikStart;
trigger gt_BridgeBackgroundBralikStop;
trigger gt_BridgeBackgroundBralikPause;
trigger gt_BridgeBackgroundBralikTalkToRaynor;
trigger gt_BridgeBackgroundBralikResume;
trigger gt_BridgeBackgroundCadeInit;
trigger gt_BridgeBackgroundCadeStart;
trigger gt_BridgeBackgroundCadeStop;
trigger gt_BridgeBackgroundCadePause;
trigger gt_BridgeBackgroundCadeTalkToRaynor;
trigger gt_BridgeBackgroundCadeResume;
trigger gt_BridgeBackgroundMonkeyInit;
trigger gt_BridgeBackgroundMonkeyDoorEnter;
trigger gt_BridgeBackgroundMonkeyDoorLeft;
trigger gt_BridgeBackgroundMonkeyStart;
trigger gt_BridgeBackgroundMonkeyStop;
trigger gt_BridgeBackgroundMonkeyPause;
trigger gt_BridgeBackgroundMonkeyResume;
trigger gt_HotspotClicked;
trigger gt_HotspotHighlighted;
trigger gt_HotspotUnhighlighted;
trigger gt_ArmorySimulatorClicked;
trigger gt_ArmorySimulatorLeave;
trigger gt_ArmorySimulatorPlay;
trigger gt_ArmoryTechConsoleClicked;
trigger gt_ArmoryTechConsoleLeave;
trigger gt_ArmoryTech_VikingClicked;
trigger gt_ArmoryTech_VikingLeave;
trigger gt_ArmoryTech_BansheeClicked;
trigger gt_ArmoryTech_BansheeLeave;
trigger gt_ArmoryTech_DropshipClicked;
trigger gt_ArmoryTech_DropshipLeave;
trigger gt_ArmoryTech_TankClicked;
trigger gt_ArmoryTech_TankLeave;
trigger gt_ArmoryTech_GhostClicked;
trigger gt_ArmoryTech_GhostClickedEasteregg;
trigger gt_ArmoryTech_GhostLeave;
trigger gt_ArmoryTech_FirebatClicked;
trigger gt_ArmoryTech_FirebatLeave;
trigger gt_ArmoryTech_MarauderClicked;
trigger gt_ArmoryTech_MarauderLeave;
trigger gt_ArmoryTech_SpectreClicked;
trigger gt_ArmoryTech_SpectreLeave;
trigger gt_ArmoryTech_SpiderMineClicked;
trigger gt_ArmoryTech_SpiderMineLeave;
trigger gt_BridgeStarmapClicked;
trigger gt_BridgeStarmapLeave;
trigger gt_BridgeWindowClicked;
trigger gt_BridgeWindowLeave;
trigger gt_BridgeWindowInitNose;
trigger gt_BridgeMissionArchivesClicked;
trigger gt_BridgeMissionArchivesLeave;
trigger gt_BridgeMissionArchivesSceneFinish;
trigger gt_BridgeMissionArchivesHighlighted;
trigger gt_BridgeMissionArchivesUnhighlighted;
trigger gt_CantinaArcadeClicked;
trigger gt_CantinaArcadeLeave;
trigger gt_CantinaArcadePlay;
trigger gt_CantinaBadgeClicked;
trigger gt_CantinaJukeboxInit;
trigger gt_CantinaJukeboxClickedPreCallback;
trigger gt_CantinaJukeboxClickedPostCallback;
trigger gt_CantinaJukeboxClickedCamera;
trigger gt_CantinaJukeboxClickedFidget;
trigger gt_CantinaJukeboxClicked;
trigger gt_CantinaMercClicked;
trigger gt_CantinaMercFidget;
trigger gt_CantinaMercLeave;
trigger gt_CantinaTrophiesFrameClicked;
trigger gt_CantinaTrophiesItemClicked;
trigger gt_CantinaTrophiesLeave;
trigger gt_CantinaTrophiesHighlighted;
trigger gt_CantinaTrophiesUnhighlighted;
trigger gt_CantinaTVClicked;
trigger gt_CharArtifactClickedCamera;
trigger gt_CharArtifactClicked;
trigger gt_CharArtifactOpen;
trigger gt_CharArtifactClickedSkippable;
trigger gt_CharArtifactClickedCameraChange;
trigger gt_CharArtifactClickedCameraChangeNoChange;
trigger gt_CharConsoleClicked;
trigger gt_CharConsoleLeave;
trigger gt_LabArtifactClickedPreCallback;
trigger gt_LabArtifactClickedPostCallback;
trigger gt_LabArtifactClickedCamera;
trigger gt_LabArtifactClicked;
trigger gt_LabArtifactClickedCameraChange;
trigger gt_LabArtifactClickedCameraChangeNoWait;
trigger gt_LabArtifactClickedPositionCharacters;
trigger gt_LabArtifactHighlighted;
trigger gt_LabArtifactUnhighlighted;
trigger gt_LabConsoleClicked;
trigger gt_LabConsoleLeave;
trigger gt_LabCrystalClicked;
trigger gt_LabCrystalLeave;
trigger gt_LabCrystalNoMissionClicked;
trigger gt_LabCrystalNoMissionLeave;
trigger gt_LabTubeClickedProtoss;
trigger gt_LabTubeClickedZerg;
trigger gt_LabTubeLeave;
trigger gt_MarSaraBadgeClickedPreCallback;
trigger gt_MarSaraBadgeClickedPostCallback;
trigger gt_MarSaraBadgeClickedCamera;
trigger gt_MarSaraBadgeClicked;
trigger gt_MarSaraHydraClickedPreCallback;
trigger gt_MarSaraHydraClickedPostCallback;
trigger gt_MarSaraHydraClickedCamera;
trigger gt_MarSaraHydraClicked;
trigger gt_MarSaraJukeboxInit;
trigger gt_MarSaraJukeboxClickedPreCallback;
trigger gt_MarSaraJukeboxClickedPostCallback;
trigger gt_MarSaraJukeboxClickedCamera;
trigger gt_MarSaraJukeboxClicked;
trigger gt_MarSaraBriefcaseClicked;
trigger gt_MarSaraBriefcaseLeave;
trigger gt_MarSaraBriefcaseLeaveUIYesNo;
trigger gt_MarSaraBriefcaseHighlighted;
trigger gt_MarSaraBriefcaseHologramHighlighted;
trigger gt_MarSaraBriefcaseUnhighlighted;
trigger gt_MarSaraBriefcaseHologramUnhighlighted;
trigger gt_MarSaraTVClicked;
trigger gt_MarSaraTVHighlighted;
trigger gt_MarSaraTVUnhighlighted;
trigger gt_ObservatoryPaintingClickedPreCallback;
trigger gt_ObservatoryPaintingClickedPostCallback;
trigger gt_ObservatoryPaintingClickedCamera;
trigger gt_ObservatoryPaintingClicked;
trigger gt_TravelPanelLaunch;
trigger gt_TravelPanelLeave;
trigger gt_TravelPanelCharInvasionDialog;
trigger gt_TravelPanelZeratulLaunch;
trigger gt_TravelPanelZeratulLeave;
trigger gt_CharRoomUIButtonResponse;
trigger gt_CharRoomUILeaveUI;
trigger gt_CharRoomUIButtonUpdate;
trigger gt_ArmoryKachinskiClicked;
trigger gt_ArmoryEarlClicked;
trigger gt_BridgeBralikClicked;
trigger gt_BridgeCadeClicked;
trigger gt_ConvoCameraTriggerMaster;
trigger gt_ConvoCameraTriggerCustom;
trigger gt_ConvoCameraTriggerCharacter1Closeup;
trigger gt_ConvoCameraTriggerCharacter1Medium;
trigger gt_ConvoCameraTriggerCharacter1Shoulder;
trigger gt_ConvoCameraTriggerCharacter1Pushin;
trigger gt_ConvoCameraTriggerCharacter1Pushout;
trigger gt_ConvoCameraTriggerCharacter1Pan;
trigger gt_ConvoCameraTriggerCharacter2Closeup;
trigger gt_ConvoCameraTriggerCharacter2Medium;
trigger gt_ConvoCameraTriggerCharacter2Shoulder;
trigger gt_ConvoCameraTriggerCharacter2Pushin;
trigger gt_ConvoCameraTriggerCharacter2Pushout;
trigger gt_ConvoCameraTriggerCharacter2Pan;
trigger gt_ConvoCameraTriggerRaynorCloseup;
trigger gt_ConvoCameraTriggerRaynorMedium;
trigger gt_ConvoCameraTriggerRaynorShoulder;
trigger gt_ConvoCameraTriggerRaynorPushin;
trigger gt_ConvoCameraTriggerRaynorPushout;
trigger gt_ConvoCameraTriggerRaynorPan;
trigger gt_ArmorySwannClickedPreCallback;
trigger gt_ArmorySwannClickedPostCallback;
trigger gt_ArmorySwannClicked;
trigger gt_BridgeHornerClickedPreCallback;
trigger gt_BridgeHornerClickedPostCallback;
trigger gt_BridgeHornerClicked;
trigger gt_BridgeTychusClickedPreCallback;
trigger gt_BridgeTychusClickedPostCallback;
trigger gt_BridgeTychusClicked;
trigger gt_BridgeHansonClickedPreCallback;
trigger gt_BridgeHansonClickedPostCallback;
trigger gt_BridgeHansonClicked;
trigger gt_BridgeToshClicked;
trigger gt_BridgeCommunicatorClickedPreCallback;
trigger gt_BridgeCommunicatorClickedPostCallback;
trigger gt_BridgeCommunicatorClickedCustomCamera;
trigger gt_BridgeCommunicatorClicked;
trigger gt_CantinaTychusClickedPreCallback;
trigger gt_CantinaTychusClickedPostCallback;
trigger gt_CantinaTychusClicked;
trigger gt_CantinaTychusClickedCameraChange;
trigger gt_CantinaTychusClickedCameraChangeNoWait;
trigger gt_CantinaToshClickedPreCallback;
trigger gt_CantinaToshClickedPostCallback;
trigger gt_CantinaToshClicked;
trigger gt_CharWarfieldClickedPreCallback;
trigger gt_CharWarfieldClickedPostCallback;
trigger gt_CharWarfieldClicked;
trigger gt_CharWarfieldClickedAOD;
trigger gt_CharTychusClickedPreCallback;
trigger gt_CharTychusClickedPostCallback;
trigger gt_CharTychusClicked;
trigger gt_CharTychusTalkAnimation;
trigger gt_LabHansonClickedPreCallback;
trigger gt_LabHansonClickedPostCallback;
trigger gt_LabHansonClicked;
trigger gt_MarSaraTychusClickedPreCallback;
trigger gt_MarSaraTychusClickedPostCallback;
trigger gt_MarSaraTychusClicked;
trigger gt_ObservatoryValerianClickedPreCallback;
trigger gt_ObservatoryValerianClickedPostCallback;
trigger gt_ObservatoryValerianClicked;
trigger gt_TychusObsession;
trigger gt_HornerObsession;
trigger gt_SceneSkippable;
trigger gt_Scene01RaynorIntro;
trigger gt_Scene03ZeratulWarning;
trigger gt_Scene04TychusIntro;
trigger gt_Scene05EscapefromMarSara;
trigger gt_Scene06ValerianIntro;
trigger gt_Scene06ValerianIntroTimestamp;
trigger gt_Scene07BarFight;
trigger gt_Scene08HansonEndA;
trigger gt_Scene09ToshEndA;
trigger gt_Scene10RaynorsDream;
trigger gt_Scene10RaynorsDreamTimestamp;
trigger gt_Scene11CharBattlefieldIntro;
trigger gt_Scene12HornerEnd;
trigger gt_Scene13HansonEndB;
trigger gt_Scene14ToshEndB;
trigger gt_Scene15KerriganIntro;
trigger gt_Scene15KerriganIntroTimestamp;
trigger gt_Scene16CharIntro;
trigger gt_Scene16CharIntroNoFadeIn;
trigger gt_Scene16CharIntroTimestamp;
trigger gt_Scene17CharBattlefieldEnd;
trigger gt_Animatic01RaynorIntro;
trigger gt_Animatic01RaynorIntroSkippable;
trigger gt_Animatic04TychusIntro;
trigger gt_Animatic04TychusIntroSkippable;
trigger gt_Animatic05EscapefromMarSara;
trigger gt_Animatic05EscapefromMarSaraSkippable;
trigger gt_Animatic06ValerianIntro;
trigger gt_Animatic06ValerianIntroSkippable;
trigger gt_Animatic07BarFight;
trigger gt_Animatic07BarFightSkippable;
trigger gt_Animatic08HansenEndA;
trigger gt_Animatic08HansenEndASkippable;
trigger gt_Animatic09ToshEndA;
trigger gt_Animatic09ToshEndASkippable;
trigger gt_Animatic10RaynorsDream;
trigger gt_Animatic10RaynorsDreamSkippable;
trigger gt_Animatic11CharBattlefieldIntro;
trigger gt_Animatic11CharBattlefieldIntroSkippable;
trigger gt_Animatic12HornerEnd;
trigger gt_Animatic12HornerEndSkippable;
trigger gt_Animatic13HansenEndB;
trigger gt_Animatic13HansenEndBSkippable;
trigger gt_Animatic14ToshEndB;
trigger gt_Animatic14ToshEndBSkippable;
trigger gt_Animatic15KerriganIntro;
trigger gt_Animatic15KerriganIntroSkippable;
trigger gt_Animatic16CharIntro;
trigger gt_Animatic16CharIntroSkippable;
trigger gt_Animatic17CharBattlefieldEnd;
trigger gt_Animatic17CharBattlefieldEndSkippable;
trigger gt_Rendered01OldRivals;
trigger gt_Rendered01OldRivalsSkippable;
trigger gt_Rendered02BetterMarine;
trigger gt_Rendered02BetterMarineSkippable;
trigger gt_Rendered03TheDream;
trigger gt_Rendered03TheDreamNoCleanup;
trigger gt_Rendered03TheDreamSkippable;
trigger gt_Rendered04End;
trigger gt_Rendered04EndSkippable;
trigger gt_BriefingTemplate;
trigger gt_BriefingTemplateSkippable;
trigger gt_BriefingTemplatePreload;
trigger gt_BriefingPlayVideoTargetingCursorSound;
trigger gt_BriefingTRaynor01;
trigger gt_BriefingTRaynor01Skippable;
trigger gt_BriefingTRaynor01PreloadRough;
trigger gt_BriefingTRaynor01Preload;
trigger gt_BriefingTRaynor02;
trigger gt_BriefingTRaynor02Skippable;
trigger gt_BriefingTRaynor02PreloadRough;
trigger gt_BriefingTRaynor02Preload;
trigger gt_BriefingTRaynor03;
trigger gt_BriefingTRaynor03Skippable;
trigger gt_BriefingTRaynor03PreloadRough;
trigger gt_BriefingTRaynor03Preload;
trigger gt_BriefingTHanson01;
trigger gt_BriefingTHanson01Skippable;
trigger gt_BriefingTHanson01PreloadRough;
trigger gt_BriefingTHanson01Preload;
trigger gt_BriefingTHanson02;
trigger gt_BriefingTHanson02Skippable;
trigger gt_BriefingTHanson02PreloadRough;
trigger gt_BriefingTHanson02Preload;
trigger gt_BriefingTHanson02Camera2;
trigger gt_BriefingTHanson02ButDelay;
trigger gt_BriefingTHanson03A;
trigger gt_BriefingTHanson03ASkippable;
trigger gt_BriefingTHanson03APreloadRough;
trigger gt_BriefingTHanson03APreload;
trigger gt_BriefingTHanson03B;
trigger gt_BriefingTHanson03BSkippable;
trigger gt_BriefingTHanson03BPreloadRough;
trigger gt_BriefingTHanson03BPreload;
trigger gt_BriefingTHorner01;
trigger gt_BriefingTHorner01Skippable;
trigger gt_BriefingTHorner01PreloadRough;
trigger gt_BriefingTHorner01Preload;
trigger gt_BriefingTHorner02;
trigger gt_BriefingTHorner02Skippable;
trigger gt_BriefingTHorner02HanText;
trigger gt_BriefingTHorner02PreloadRough;
trigger gt_BriefingTHorner02Preload;
trigger gt_BriefingTHorner02IncomingTransmission;
trigger gt_BriefingTHorner03;
trigger gt_BriefingTHorner03Skippable;
trigger gt_BriefingTHorner03PreloadRough;
trigger gt_BriefingTHorner03Preload;
trigger gt_BriefingTHorner03Odin;
trigger gt_BriefingTHorner04;
trigger gt_BriefingTHorner04Skippable;
trigger gt_BriefingTHorner04CameraPan1;
trigger gt_BriefingTHorner04PreloadRough;
trigger gt_BriefingTHorner04Preload;
trigger gt_BriefingTHorner05s;
trigger gt_BriefingTHorner05sSkippable;
trigger gt_BriefingTHorner05sTimestamp;
trigger gt_BriefingTHorner05sPreloadRough;
trigger gt_BriefingTHorner05sPreload;
trigger gt_BriefingTTosh01;
trigger gt_BriefingTTosh01Skippable;
trigger gt_BriefingTTosh01Timestamp;
trigger gt_BriefingTTosh01PreloadRough;
trigger gt_BriefingTTosh01Preload;
trigger gt_BriefingTTosh02;
trigger gt_BriefingTTosh02Skippable;
trigger gt_BriefingTTosh02PreloadRough;
trigger gt_BriefingTTosh02Preload;
trigger gt_BriefingTTosh03A;
trigger gt_BriefingTTosh03ASkippable;
trigger gt_BriefingTTosh03APreloadRough;
trigger gt_BriefingTTosh03APreload;
trigger gt_BriefingTTosh03B;
trigger gt_BriefingTTosh03BSkippable;
trigger gt_BriefingTTosh03BPreloadRough;
trigger gt_BriefingTTosh03BPreload;
trigger gt_BriefingTTychus01;
trigger gt_BriefingTTychus01Skippable;
trigger gt_BriefingTTychus01PreloadRough;
trigger gt_BriefingTTychus01Preload;
trigger gt_BriefingTTychus02;
trigger gt_BriefingTTychus02Skippable;
trigger gt_BriefingTTychus02PreloadRough;
trigger gt_BriefingTTychus02Preload;
trigger gt_BriefingTTychus03;
trigger gt_BriefingTTychus03Skippable;
trigger gt_BriefingTTychus03PreloadRough;
trigger gt_BriefingTTychus03Preload;
trigger gt_BriefingTTychus04;
trigger gt_BriefingTTychus04Skippable;
trigger gt_BriefingTTychus04RaynorBentDownAnimation;
trigger gt_BriefingTTychus04PreloadRough;
trigger gt_BriefingTTychus04Preload;
trigger gt_BriefingTTychus05;
trigger gt_BriefingTTychus05Skippable;
trigger gt_BriefingTTychus05GreenReticleSound;
trigger gt_BriefingTTychus05PreloadRough;
trigger gt_BriefingTTychus05Preload;
trigger gt_BriefingTZeratul01;
trigger gt_BriefingTZeratul01Skippable;
trigger gt_BriefingTZeratul01PreloadRough;
trigger gt_BriefingTZeratul01Preload;
trigger gt_BriefingTZeratul02;
trigger gt_BriefingTZeratul02Skippable;
trigger gt_BriefingTZeratul02PreloadRough;
trigger gt_BriefingTZeratul02Preload;
trigger gt_BriefingTZeratul03;
trigger gt_BriefingTZeratul03Skippable;
trigger gt_BriefingTZeratul03PreloadRough;
trigger gt_BriefingTZeratul03Preload;
trigger gt_BriefingTZeratul04;
trigger gt_BriefingTZeratul04Skippable;
trigger gt_BriefingTZeratul04PreloadRough;
trigger gt_BriefingTZeratul04Preload;
trigger gt_BriefingTValerian01;
trigger gt_BriefingTValerian01Skippable;
trigger gt_BriefingTValerian01PreloadRough;
trigger gt_BriefingTValerian01Preload;
trigger gt_BriefingTValerian02A;
trigger gt_BriefingTValerian02ASkippable;
trigger gt_BriefingTValerian02APreloadRough;
trigger gt_BriefingTValerian02APreload;
trigger gt_BriefingTValerian02B;
trigger gt_BriefingTValerian02BSkippable;
trigger gt_BriefingTValerian02BPreloadRough;
trigger gt_BriefingTValerian02BPreload;
trigger gt_BriefingTValerian03;
trigger gt_BriefingTValerian03Skippable;
trigger gt_BriefingTValerian03PreloadRough;
trigger gt_BriefingTValerian03Preload;
trigger gt_ABChoiceButtonClick;
trigger gt_ABChoiceTHanson03;
trigger gt_ABChoiceTHanson03Skippable;
trigger gt_ABChoiceTHanson03Back;
trigger gt_ABChoiceTHanson03Replay;
trigger gt_ABChoiceTHanson03A;
trigger gt_ABChoiceTHanson03ASkippable;
trigger gt_ABChoiceTHanson03B;
trigger gt_ABChoiceTHanson03BSkippable;
trigger gt_ABChoiceTHanson03Preload;
trigger gt_ABChoiceTTosh03;
trigger gt_ABChoiceTTosh03Skippable;
trigger gt_ABChoiceTTosh03Back;
trigger gt_ABChoiceTTosh03Replay;
trigger gt_ABChoiceTTosh03A;
trigger gt_ABChoiceTTosh03ASkippable;
trigger gt_ABChoiceTTosh03B;
trigger gt_ABChoiceTTosh03BSkippable;
trigger gt_ABChoiceTTosh03Preload;
trigger gt_ABChoiceTValerian02;
trigger gt_ABChoiceTValerian02Skippable;
trigger gt_ABChoiceTValerian02Back;
trigger gt_ABChoiceTValerian02Replay;
trigger gt_ABChoiceTValerian02A;
trigger gt_ABChoiceTValerian02ASkippable;
trigger gt_ABChoiceTValerian02B;
trigger gt_ABChoiceTValerian02BSkippable;
trigger gt_ABChoiceTValerian02Preload;
trigger gt_DebriefingLabCantinaOpened;
trigger gt_DebriefingCommunicatorUnlocked;
trigger gt_DebriefingTRaynor03;
trigger gt_DebriefingTRaynor03Skippable;
trigger gt_DebriefingTRaynor03CameraChange;
trigger gt_DebriefingTRaynor03CameraChangeNoWait;
trigger gt_DebriefingTHanson01;
trigger gt_DebriefingTHanson01Skippable;
trigger gt_DebriefingTHanson01CameraChange;
trigger gt_DebriefingTHanson01CameraChangeNoWait;
trigger gt_DebriefingTHanson02_1;
trigger gt_DebriefingTHanson02_2;
trigger gt_DebriefingTHanson02_2Skippable;
trigger gt_DebriefingTHanson02_2CameraChanged;
trigger gt_DebriefingTHanson02_2CameraChangedNoWait;
trigger gt_DebriefingTHorner01;
trigger gt_DebriefingTHorner01_1;
trigger gt_DebriefingTHorner01_1Skippable;
trigger gt_DebriefingTHorner01_2;
trigger gt_DebriefingTHorner01_2Skippable;
trigger gt_DebriefingTHorner01_2CameraChange;
trigger gt_DebriefingTHorner01_2CameraChangeNoWait;
trigger gt_DebriefingTHorner02;
trigger gt_DebriefingTHorner02_1;
trigger gt_DebriefingTHorner02_1Skippable;
trigger gt_DebriefingTHorner02_2;
trigger gt_DebriefingTHorner02_2Skippable;
trigger gt_DebriefingTHorner02_2CameraChange;
trigger gt_DebriefingTHorner02_2CameraChangeNoWait;
trigger gt_DebriefingTHorner03;
trigger gt_DebriefingTHorner03Skippable;
trigger gt_DebriefingTHorner05S;
trigger gt_DebriefingTHorner05SSkippable;
trigger gt_DebriefingTTosh01;
trigger gt_DebriefingTTosh01Skippable;
trigger gt_DebriefingTTosh01RaynorCustomCamera;
trigger gt_DebriefingTTosh01RaynorCustomCameraNoWait;
trigger gt_DebriefingTTosh02;
trigger gt_DebriefingTTosh02Skippable;
trigger gt_DebriefingTTosh02ChangeCamera;
trigger gt_DebriefingTTosh02ChangeCameraNoWait;
trigger gt_DebriefingTTosh03B;
trigger gt_DebriefingTTosh03BSkippable;
trigger gt_DebriefingTTosh03BRaynorCustomCamera;
trigger gt_DebriefingTTychus01;
trigger gt_DebriefingTTychus01Skippable;
trigger gt_DebriefingTTychus01HornerCustomCamera;
trigger gt_DebriefingTTychus01CameraChanged;
trigger gt_DebriefingTTychus01CameraChangedNoWait;
trigger gt_DebriefingTTychus02;
trigger gt_DebriefingTTychus02Skippable;
trigger gt_DebriefingTTychus04;
trigger gt_DebriefingTTychus04Preload;
trigger gt_DebriefingTTychus04_1;
trigger gt_DebriefingTTychus04_1Preload;
trigger gt_DebriefingTTychus04_1Skippable;
trigger gt_DebriefingTTychus04_1CameraChange;
trigger gt_DebriefingTTychus04_1CameraChangeNoWait;
trigger gt_DebriefingTTychus04_2;
trigger gt_DebriefingTTychus04_2Preload;
trigger gt_DebriefingTTychus04_2Skippable;
trigger gt_DebriefingTTychus04_2CameraChange;
trigger gt_DebriefingTTychus04_2CameraChangeNoWait;
trigger gt_DebriefingTZeratul04;
trigger gt_DebriefingTZeratul04Skippable;
trigger gt_DebriefingTZeratul04PreloadRough;
trigger gt_DebriefingTZeratul04Preload;
trigger gt_ScriptSceneLabIntro;
trigger gt_ScriptSceneLabIntroSkippable;
trigger gt_ScriptSceneMercIntro;
trigger gt_ScriptSceneMercIntroSkippable;
trigger gt_ScriptSceneArmoryIntro;
trigger gt_ScriptSceneArmoryIntroSkippable;
trigger gt_TVNewsBack2;
trigger gt_TVNewsRaynor00;
trigger gt_TVNewsRaynor00Skippable;
trigger gt_TVNewsRaynor00Preload;
trigger gt_TVNewsRaynor01;
trigger gt_TVNewsRaynor01Skippable;
trigger gt_TVNewsRaynor01Preload;
trigger gt_TVNewsRaynor01Event02;
trigger gt_TVNewsRaynor01Event05;
trigger gt_TVNewsRaynor02;
trigger gt_TVNewsRaynor02Skippable;
trigger gt_TVNewsRaynor02Preload;
trigger gt_TVNewsRaynor02Event03;
trigger gt_TVNewsRaynor02Event05;
trigger gt_TVNewsHanson01;
trigger gt_TVNewsHanson01Skippable;
trigger gt_TVNewsHanson01Preload;
trigger gt_TVNewsHanson01Event01;
trigger gt_TVNewsHanson01Event03;
trigger gt_TVNewsHanson02;
trigger gt_TVNewsHanson02Skippable;
trigger gt_TVNewsHanson02Preload;
trigger gt_TVNewsHanson02Event05;
trigger gt_TVNewsHanson03A;
trigger gt_TVNewsHanson03ASkippable;
trigger gt_TVNewsHanson03APreload;
trigger gt_TVNewsHanson03aEvent02;
trigger gt_TVNewsHanson03aEvent06;
trigger gt_TVNewsHanson03B;
trigger gt_TVNewsHanson03BSkippable;
trigger gt_TVNewsHanson03BPreload;
trigger gt_TVNewsHanson03bEvent06;
trigger gt_TVNewsTosh01;
trigger gt_TVNewsTosh01Skippable;
trigger gt_TVNewsTosh01Preload;
trigger gt_TVNewsTosh02;
trigger gt_TVNewsTosh02Skippable;
trigger gt_TVNewsTosh02Preload;
trigger gt_TVNewsTosh02Event01;
trigger gt_TVNewsTosh03A;
trigger gt_TVNewsTosh03ASkippable;
trigger gt_TVNewsTosh03APreload;
trigger gt_TVNewsTosh03aEvent05;
trigger gt_TVNewsTosh03B;
trigger gt_TVNewsTosh03BSkippable;
trigger gt_TVNewsTosh03BPreload;
trigger gt_TVNewsTychus01;
trigger gt_TVNewsTychus01Skippable;
trigger gt_TVNewsTychus01Preload;
trigger gt_TVNewsTychus01Event04;
trigger gt_TVNewsTychus02;
trigger gt_TVNewsTychus02Skippable;
trigger gt_TVNewsTychus02Preload;
trigger gt_TVNewsTychus03;
trigger gt_TVNewsTychus03Skippable;
trigger gt_TVNewsTychus03Preload;
trigger gt_TVNewsTychus04;
trigger gt_TVNewsTychus04Skippable;
trigger gt_TVNewsTychus04Preload;
trigger gt_TVNewsTychus05;
trigger gt_TVNewsTychus05Skippable;
trigger gt_TVNewsTychus05Preload;
trigger gt_TVNewsTychus05Event04;
trigger gt_TVNewsHorner01;
trigger gt_TVNewsHorner01Skippable;
trigger gt_TVNewsHorner01Preload;
trigger gt_TVNewsHorner01Event05;
trigger gt_TVNewsHorner02;
trigger gt_TVNewsHorner02Skippable;
trigger gt_TVNewsHorner02Preload;
trigger gt_TVNewsHorner02Event02;
trigger gt_TVNewsHorner03;
trigger gt_TVNewsHorner03Skippable;
trigger gt_TVNewsHorner03Preload;
trigger gt_TVNewsHorner03Event08;
trigger gt_TVNewsHorner04;
trigger gt_TVNewsHorner04Skippable;
trigger gt_TVNewsHorner04Preload;
trigger gt_TVNewsHorner05S;
trigger gt_TVNewsHorner05SSkippable;
trigger gt_TVNewsHorner05SPreload;
trigger gt_TVNewsHorner05SEvent06;
trigger gt_TVNewsZeratul01;
trigger gt_TVNewsZeratul01Skippable;
trigger gt_TVNewsZeratul01Preload;
trigger gt_TVNewsZeratul01Event06;
trigger gt_TVNewsZeratul02;
trigger gt_TVNewsZeratul02Skippable;
trigger gt_TVNewsZeratul02Preload;
trigger gt_TVNewsZeratul03;
trigger gt_TVNewsZeratul03Skippable;
trigger gt_TVNewsZeratul03Preload;
trigger gt_TVNewsZeratul03Event03;
trigger gt_TVNewsZeratul04;
trigger gt_TVNewsZeratul04Skippable;
trigger gt_TVNewsZeratul04Preload;
trigger gt_TVNewsValerian01;
trigger gt_TVNewsValerian01Skippable;
trigger gt_TVNewsValerian01Preload;
trigger gt_TVNewsValerian01Event03;
trigger gt_TVNewsValerian02A;
trigger gt_TVNewsValerian02B;
trigger gt_TVNewsValerian02Skippable;
trigger gt_TVNewsValerian02Preload;
trigger gt_TVNewsBarAsyncPreload;
trigger gt_TVNewsCantinaAsyncPreload;
trigger gt_TVNewsCharAsyncPreload;
trigger gt_TVNewsEventEnd;
trigger gt_TVNewsEventAdStart;
trigger gt_TipAfterTRaynor01;
trigger gt_TipAfterTRaynor02;
trigger gt_TipAfterTRaynor03;
trigger gt_TipAfterTHanson01orTTychus01;
trigger gt_TipStarmap;
trigger gt_TipMissionArchieves;
trigger gt_TipArmory;
trigger gt_TipArmoryConsole;
trigger gt_TipConscription;
trigger gt_TipCantina;
trigger gt_TipMercenaries;
trigger gt_TipNewMercenaries;
trigger gt_TipLab;
trigger gt_TipLabResearch;
trigger gt_TipNewProtossResearch;
trigger gt_TipNewZergResearch;
trigger gt_TipLabCrystal;
trigger gt_TipAfterTValerian01;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
string gf_EnableUnit (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return "";
}

string gf_DisableUnit (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return "";
}

string gf_PurchaseUnit (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return "";
}

string gf_RefundUnit (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return "";
}

string gf_ExecuteConscriptionAction (int lp_actionType, string lp_unitType) {
    // Variable Declarations
    string lv_errorString;

    // Automatic Variable Declarations
    int autoABC5871B_val;

    // Variable Initialization
    lv_errorString = "";

    // Implementation
    autoABC5871B_val = lp_actionType;
    if (autoABC5871B_val == ge_ConscriptionActionType_EnableUnit) {
        lv_errorString = gf_EnableUnit(lp_unitType);
    }
    else if (autoABC5871B_val == ge_ConscriptionActionType_DisableUnit) {
        lv_errorString = gf_DisableUnit(lp_unitType);
    }
    else if (autoABC5871B_val == ge_ConscriptionActionType_PurchaseUnit) {
        lv_errorString = gf_PurchaseUnit(lp_unitType);
    }
    else if (autoABC5871B_val == ge_ConscriptionActionType_RefundUnit) {
        lv_errorString = gf_RefundUnit(lp_unitType);
    }
    else {
        return "action type not implemented";
    }
    return lv_errorString;
}

int gf_ParseConscriptionActionType (string lp_actionTypeName) {
    // Automatic Variable Declarations
    string autoD1BF7E3A_val;

    // Implementation
    autoD1BF7E3A_val = StringCase(lp_actionTypeName, false);
    if (autoD1BF7E3A_val == "enable") {
        return ge_ConscriptionActionType_EnableUnit;
    }
    else if (autoD1BF7E3A_val == "disable") {
        return ge_ConscriptionActionType_DisableUnit;
    }
    else if (autoD1BF7E3A_val == "purchase") {
        return ge_ConscriptionActionType_PurchaseUnit;
    }
    else if (autoD1BF7E3A_val == "refund") {
        return ge_ConscriptionActionType_RefundUnit;
    }
    else {
        return ge_ConscriptionActionType_None;
    }
}

string gf_ParseUnitType (string lp_unitTypeName) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringEqual(lp_unitTypeName, "", c_stringNoCase) == true)) {
        return null;
    }
    else {
        lv_unitType = UnitTypeFromString(lp_unitTypeName);
    }
    if (((lv_unitType == null) || (lv_unitType == ""))) {
        return null;
    }

    return lv_unitType;
}

string gf_ExecuteConscriptionCheat (string lp_actionTypeName, string lp_unitTypeName) {
    // Variable Declarations
    int lv_actionType;
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_actionType = gf_ParseConscriptionActionType(lp_actionTypeName);
    if ((lv_actionType == ge_ConscriptionActionType_None)) {
        return "invalid action type name";
    }

    lv_unitType = gf_ParseUnitType(lp_unitTypeName);
    if ((lv_unitType == null)) {
        return "invalid unit type name";
    }

    return gf_ExecuteConscriptionAction(lv_actionType, lv_unitType);
}

void gf_CustomFadeInOut (bool lp_fadeIn, fixed lp_duration, bool lp_waitUntilDone) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeIn == false)) {
        if ((gv_customFadeDialog == c_invalidDialogId)) {
            DialogCreate(1, 1, c_anchorCenter, 0, 0, false);
            gv_customFadeDialog = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            gv_customFadeImage = DialogControlLastCreated();
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        }

        DialogControlFadeTransparency(gv_customFadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    else {
        if ((gv_customFadeDialog != c_invalidDialogId)) {
            DialogControlFadeTransparency(gv_customFadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }

    }
    if ((lp_waitUntilDone == true)) {
        Wait(lp_duration, c_timeReal);
    }

}

void gf_TurnClickableOnOff (unit lp_unit, bool lp_desiredState) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_desiredState == true)) {
        gf_SetUnitClickableLockCount(c_transmissionDurationSub, lp_unit, 1);
        if ((gf_GetUnitClickableLockCount(lp_unit) == 0)) {
            UnitSetState(lp_unit, c_unitStateHighlightable, true);
            UnitSetState(lp_unit, c_unitStateCursorable, true);
        }

    }
    else {
        gf_SetUnitClickableLockCount(c_transmissionDurationAdd, lp_unit, 1);
        UnitSetState(lp_unit, c_unitStateHighlightable, false);
        UnitSetState(lp_unit, c_unitStateCursorable, false);
        libNtve_gf_SendActorMessageToUnit(lp_unit, "HaloStop");
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lp_unit), gv_aNIMID_HIGHLIGHT);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lp_unit), gv_aNIMID_SHEEN);
    }
}

void gf_TurnClickablesOnOff (unitgroup lp_whichClickables, bool lp_desiredState) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto5345FD8F_g;
    int auto5345FD8F_u;

    // Variable Initialization

    // Implementation
    if ((lp_desiredState == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/BB73B4E1"), false);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/0B3A684D"), false);
    }
    auto5345FD8F_g = lp_whichClickables;
    auto5345FD8F_u = UnitGroupCount(auto5345FD8F_g, c_unitCountAll);
    for (;; auto5345FD8F_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto5345FD8F_g, auto5345FD8F_u);
        if (lv_u == null) { break; }
        gf_TurnClickableOnOff(lv_u, lp_desiredState);
    }
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal StopSMEventSounds");
}

void gf_TurnClickableOnNoCheck (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gf_SetUnitClickableLockCount(c_transmissionDurationSet, lp_unit, 0);
    UnitSetState(lp_unit, c_unitStateHighlightable, true);
    UnitSetState(lp_unit, c_unitStateCursorable, true);
}

void gf_TurnClickablesOnNoCheck (unitgroup lp_whichClickables) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto800FE0DA_g;
    int auto800FE0DA_u;

    // Variable Initialization

    // Implementation
    auto800FE0DA_g = lp_whichClickables;
    auto800FE0DA_u = UnitGroupCount(auto800FE0DA_g, c_unitCountAll);
    for (;; auto800FE0DA_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto800FE0DA_g, auto800FE0DA_u);
        if (lv_u == null) { break; }
        gf_TurnClickableOnNoCheck(lv_u);
    }
}

void gf_SetClickableCursorType (unit lp_unit, int lp_cursorType) {
    // Automatic Variable Declarations
    int auto73C253A6_val;

    // Implementation
    auto73C253A6_val = lp_cursorType;
    if (auto73C253A6_val == ge_ClickableCursorType_Activate) {
        UnitSetCursor(lp_unit, "InteractiveActivate");
    }
    else if (auto73C253A6_val == ge_ClickableCursorType_Look) {
        UnitSetCursor(lp_unit, "InteractiveLook");
    }
    else if (auto73C253A6_val == ge_ClickableCursorType_Move) {
        UnitSetCursor(lp_unit, "InteractiveMove");
    }
    else if (auto73C253A6_val == ge_ClickableCursorType_Talk) {
        UnitSetCursor(lp_unit, "InteractiveTalk");
    }
    else {
        UnitSetCursor(lp_unit, "InteractiveActivate");
    }
}

void gf_AddClickable (unitgroup lp_whichClickables, unit lp_unit, int lp_room, int lp_cursorType) {
    // Automatic Variable Declarations
    // Implementation
    gf_SetUnitClickableLockCount(c_transmissionDurationSet, lp_unit, 0);
    UnitSetCustomValue(lp_unit, (ge_CustomDataIndex_CustomDataIndexClickableRoom), IntToFixed((lp_room)));
    gf_SetClickableCursorType(lp_unit, lp_cursorType);
    UnitGroupAdd(lp_whichClickables, lp_unit);
}

void gf_ResetClickablesLockCount () {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto64A00279_g;
    int auto64A00279_u;

    // Variable Initialization

    // Implementation
    auto64A00279_g = gv_clickables;
    auto64A00279_u = UnitGroupCount(auto64A00279_g, c_unitCountAll);
    for (;; auto64A00279_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto64A00279_g, auto64A00279_u);
        if (lv_u == null) { break; }
        gf_SetUnitClickableLockCount(c_transmissionDurationSet, lv_u, 0);
    }
}

void gf_SetUnitClickableLockCount (int lp_action, unit lp_unit, int lp_lock) {
    // Variable Declarations
    fixed lv_value;

    // Automatic Variable Declarations
    int auto708E87AD_val;

    // Variable Initialization

    // Implementation
    lv_value = IntToFixed(gf_GetUnitClickableLockCount(lp_unit));
    auto708E87AD_val = lp_action;
    if (auto708E87AD_val == c_transmissionDurationSet) {
        lv_value = IntToFixed(lp_lock);
    }
    else if (auto708E87AD_val == c_transmissionDurationAdd) {
        lv_value = (lv_value + IntToFixed(lp_lock));
    }
    else if (auto708E87AD_val == c_transmissionDurationSub) {
        lv_value = (lv_value - IntToFixed(lp_lock));
    }
    else {
        return ;
    }
    if ((lv_value < 0.0)) {
        lv_value = 0.0;
    }

    UnitSetCustomValue(lp_unit, (ge_CustomDataIndex_CustomDataIndexClickableLock), lv_value);
}

int gf_GetUnitClickableLockCount (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, (ge_CustomDataIndex_CustomDataIndexClickableLock)));
}

int gf_GetUnitClickableRoom (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return gf_RoomFromIndex(FixedToInt(UnitGetCustomValue(lp_unit, (ge_CustomDataIndex_CustomDataIndexClickableRoom))));
}

void gf_ChangeVisibleUnits (unitgroup lp_units) {
    // Automatic Variable Declarations
    // Implementation
    gf_RemoveVisibleUnits(false, gv_visibleUnits);
    gf_RemoveVisibleUnits(true, lp_units);
}

void gf_RemoveVisibleUnit (bool lp_addRemove, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_addRemove == true)) {
        if ((UnitGroupHasUnit(gv_visibleUnits, lp_unit) == true)) {
            return ;
        }

        UnitGroupAdd(gv_visibleUnits, lp_unit);
        libNtve_gf_ShowHideUnit(lp_unit, true);
        if ((gf_HotspotFlashingPaused(lp_unit) == false)) {
            gf_HideFlashingTextTag(true, lp_unit);
        }

    }
    else {
        if ((gf_RoomLocationIsEnabled(ge_RoomLocation_RoomLocationHyperion) == true) && (lp_unit == gv_cantinaJukebox)) {
            gf_ShowHideJukeboxTrackInfo(false);
        }

        if ((gf_RoomLocationIsEnabled(ge_RoomLocation_RoomLocationMarSara) == true) && (lp_unit == gv_marSaraJukebox)) {
            gf_ShowHideJukeboxTrackInfo(false);
        }

        if ((UnitGroupHasUnit(gv_visibleUnits, lp_unit) == false)) {
            return ;
        }

        UnitGroupRemove(gv_visibleUnits, lp_unit);
        libNtve_gf_ShowHideUnit(lp_unit, false);
        gf_HideFlashingTextTag(false, lp_unit);
    }
}

void gf_RemoveVisibleUnits (bool lp_addRemove, unitgroup lp_units) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoF8BA0C0A_g;
    int autoF8BA0C0A_u;

    // Variable Initialization

    // Implementation
    autoF8BA0C0A_g = lp_units;
    autoF8BA0C0A_u = UnitGroupCount(autoF8BA0C0A_g, c_unitCountAll);
    for (;; autoF8BA0C0A_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoF8BA0C0A_g, autoF8BA0C0A_u);
        if (lv_indexUnit == null) { break; }
        gf_RemoveVisibleUnit(lp_addRemove, lv_indexUnit);
    }
}

void gf_WaitForSkip (fixed lp_timeout, int lp_timeType) {
    // Automatic Variable Declarations
    // Implementation
    gv_waitForSkipTimeout = lp_timeout;
    gv_waitForSkipTimeType = lp_timeType;
    TriggerExecute(gt_WaitForSkipTrig, true, true);
}

void gf_DisplayBackButton (trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    gv_backButtonCallback = lp_callback;
    gv_backButtonHidden = false;
    libNtve_gf_DisplayScreenButton((ge_ScreenButtonID_ButtonBack), StringExternal("Param/Value/30BF56DA"), 240, 80, c_anchorBottomRight, 50, 70, gt_BackButtonClicked);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_BackButton", PlayerGroupAll());
    gf_FromatBackPlayButton(libNtve_gf_ScreenButton((ge_ScreenButtonID_ButtonBack)));
    TriggerExecute(gt_BackButtonEscape, true, false);
}

void gf_FromatBackPlayButton (int lp_button) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetSize(lp_button, PlayerGroupAll(), 240, 80);
    libNtve_gf_SetDialogItemImageType(lp_button, c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lp_button, "Assets\\Textures\\ui_button_generic_greenglow_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(lp_button, "Assets\\Textures\\ui_button_generic_greenglow_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(lp_button, "StoryModePlayBackButton", PlayerGroupAll());
}

void gf_HideBackButton (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideScreenButton(lp_showHide, (ge_ScreenButtonID_ButtonBack));
    if ((lp_showHide == false)) {
        gv_backButtonHidden = true;
    }
    else {
        gv_backButtonHidden = false;
    }
}

void gf_BackButtonBack () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonBack));
    TriggerExecute(gv_backButtonCallback, true, false);
}

void gf_TBDWindow (text lp_message, trigger lp_exitCallback) {
    // Automatic Variable Declarations
    // Implementation
    gv_tBDWindowExitCallback = lp_exitCallback;
    DialogCreate(800, 600, c_anchorCenter, 0, 0, true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    gv_tBDWindowDialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 50, 50);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringExternal("Param/Value/0AC87428"));
    gv_tBDWindowButtonClose = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 50);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/99190C9E") + lp_message));
    DialogSetVisible(gv_tBDWindowDialog, PlayerGroupAll(), true);
}

void gf_HighlightUnit (bool lp_highlightUnhighlight, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_highlightUnhighlight == true)) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, ("HaloStart"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lp_unit, ("HaloStop"));
    }
}

void gf_SetAllSoundChannelVolumesStoryMode (int lp_mode) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_mode == libNtve_ge_VolumeChannelMode_Cinematic) || (lp_mode == libNtve_ge_VolumeChannelMode_Speech))) {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 30.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        gv_soundChannelVolumesRefCount += 1;
        return ;
    }

    if ((lp_mode == libNtve_ge_VolumeChannelMode_Game)) {
        gv_soundChannelVolumesRefCount -= 1;
        if ((gv_soundChannelVolumesRefCount < 0)) {
            gv_soundChannelVolumesRefCount = 0;
        }

        if ((gv_soundChannelVolumesRefCount > 0)) {
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), 0.5);
        return ;
    }

}

void gf_FadeOutSoundChannelVolumeForMovie (fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
}

void gf_FadeOutAllSoundChannelVolume (fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
}

int gf_LastCreatedJukeboxID () {
    // Automatic Variable Declarations
    // Implementation
    return gv_jukeboxCount;
}

int gf_GetJukeboxID (unit lp_box) {
    // Variable Declarations
    int lv_jukeboxID;

    // Automatic Variable Declarations
    int auto21876BAA_ae;
    const int auto21876BAA_ai = 1;

    // Variable Initialization

    // Implementation
    auto21876BAA_ae = gv_jukeboxCount;
    lv_jukeboxID = 1;
    for ( ; ( (auto21876BAA_ai >= 0 && lv_jukeboxID <= auto21876BAA_ae) || (auto21876BAA_ai < 0 && lv_jukeboxID >= auto21876BAA_ae) ) ; lv_jukeboxID += auto21876BAA_ai ) {
        if ((lp_box == gv_jukeboxes[lv_jukeboxID].lv_box)) {
            return lv_jukeboxID;
        }

    }
    return -1;
}

void gf_CreateJukebox (unit lp_box, bool lp_startRandom) {
    // Automatic Variable Declarations
    // Implementation
    gv_jukeboxCount += 1;
    gv_jukeboxes[gv_jukeboxCount].lv_box = lp_box;
    gv_jukeboxes[gv_jukeboxCount].lv_startRandom = lp_startRandom;
    gf_AddTrackToJukebox(gv_jukeboxCount, null, null, null);
}

void gf_AddTrackToJukebox (int lp_jukeboxID, soundlink lp_music, text lp_title, text lp_author) {
    // Variable Declarations
    int lv_trackID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_jukeboxes[lp_jukeboxID].lv_trackCount == 0)) {
        gv_jukeboxes[lp_jukeboxID].lv_trackCount += 1;
        lv_trackID = gv_jukeboxes[lp_jukeboxID].lv_trackCount;
        gv_jukeboxes[lp_jukeboxID].lv_tracks[lv_trackID] = lp_music;
        gv_jukeboxes[lp_jukeboxID].lv_trackTitle[lv_trackID] = lp_title;
        gv_jukeboxes[lp_jukeboxID].lv_trackAuthor[lv_trackID] = lp_author;
    }
    else {
        lv_trackID = gv_jukeboxes[lp_jukeboxID].lv_trackCount;
        gv_jukeboxes[lp_jukeboxID].lv_trackCount += 1;
        gv_jukeboxes[lp_jukeboxID].lv_tracks[(lv_trackID + 1)] = gv_jukeboxes[lp_jukeboxID].lv_tracks[lv_trackID];
        gv_jukeboxes[lp_jukeboxID].lv_trackTitle[(lv_trackID + 1)] = gv_jukeboxes[lp_jukeboxID].lv_trackTitle[lv_trackID];
        gv_jukeboxes[lp_jukeboxID].lv_trackAuthor[(lv_trackID + 1)] = gv_jukeboxes[lp_jukeboxID].lv_trackAuthor[lv_trackID];
        gv_jukeboxes[lp_jukeboxID].lv_tracks[lv_trackID] = lp_music;
        gv_jukeboxes[lp_jukeboxID].lv_trackTitle[lv_trackID] = lp_title;
        gv_jukeboxes[lp_jukeboxID].lv_trackAuthor[lv_trackID] = lp_author;
    }
}

void gf_SetJukeboxFidget (int lp_jukeboxID, string lp_trackFidgetSet, string lp_turnOffFidgetSet) {
    // Automatic Variable Declarations
    // Implementation
    gv_jukeboxes[lp_jukeboxID].lv_fidgetSetTrack = lp_trackFidgetSet;
    gv_jukeboxes[lp_jukeboxID].lv_fidgetSetTurnOff = lp_turnOffFidgetSet;
}

void gf_JukeboxClicked (unit lp_jukebox) {
    // Variable Declarations
    int lv_jukeboxID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_jukeboxID = gf_GetJukeboxID(lp_jukebox);
    if ((lv_jukeboxID < 0)) {
        return ;
    }

    if ((gv_terranUpTheNightPlaying == true)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }

    gv_tP_JukeboxID = lv_jukeboxID;
    TriggerExecute(gt_JukeboxClicked, true, false);
}

void gf_JukeboxNextTrack (int lp_jukeboxID, bool lp_withComments) {
    // Variable Declarations
    int lv_sessionID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_sessionID = gv_jukeboxes[lp_jukeboxID].lv_playback.lv_sessionID;
    TriggerDebugOutput(1, (StringExternal("Param/Value/D3B1D2B5") + libNtve_gf_ConvertBooleanToText(gv_jukeboxes[lp_jukeboxID].lv_startRandom) + StringExternal("Param/Value/A67D1B1C") + libNtve_gf_ConvertBooleanToText(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_startedBefore)), false);
    if ((gv_jukeboxes[lp_jukeboxID].lv_startRandom == true) && (gv_jukeboxes[lp_jukeboxID].lv_playback.lv_startedBefore == false)) {
        gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent = RandomInt(1, 5);
    }
    else {
        gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent += 1;
        if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent > gv_jukeboxes[lp_jukeboxID].lv_trackCount)) {
            gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent = 1;
        }

    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/C4DAEF83") + IntToText(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent)), false);
    if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music != null)) {
        SoundStop(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music, true);
        gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music = null;
    }

    gv_tP_JukeboxID = lp_jukeboxID;
    TriggerExecute(gt_JukeboxTrackAnimation, true, false);
    if ((lp_withComments == true)) {
        TriggerExecute(gt_JukeboxTrackComments, true, true);
    }
    else {
        gv_jukeboxes[lp_jukeboxID].lv_playback.lv_nextTrackCommentsDone = true;
    }
    while (!(((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_nextTrackAnimationDone == true) && (gv_jukeboxes[lp_jukeboxID].lv_playback.lv_nextTrackCommentsDone == true)))) {
        Wait(0.25, c_timeReal);
    }
    gv_tP_JukeboxID = lp_jukeboxID;
    gv_tP_JukeboxSessionIDLocal = lv_sessionID;
    TriggerExecute(gt_JukeboxTrackLoop, true, false);
}

void gf_JukeboxUpdateTrackInfo (int lp_jukeboxID) {
    // Variable Declarations
    text lv_title;
    text lv_author;
    int lv_currentTrack;

    // Automatic Variable Declarations
    int auto2FB17D52_val;

    // Variable Initialization

    // Implementation
    if ((gv_jukeboxTrackTitle != c_textTagNone)) {
        TextTagDestroy(gv_jukeboxTrackTitle);
        gv_jukeboxTrackTitle = c_textTagNone;
    }

    lv_currentTrack = gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent;
    if (((lv_currentTrack <= 0) || (lv_currentTrack == gv_jukeboxes[lp_jukeboxID].lv_trackCount))) {
        return ;
    }

    lv_title = gv_jukeboxes[lp_jukeboxID].lv_trackTitle[lv_currentTrack];
    lv_author = gv_jukeboxes[lp_jukeboxID].lv_trackAuthor[lv_currentTrack];
    TextTagCreate((TextReplaceWord(StringExternal("Param/Value/2519AF5D"), StringExternal("Param/Value/D67E2367"), lv_author, c_stringReplaceAll, c_stringCase) + TextReplaceWord(StringExternal("Param/Value/344F6720"), StringExternal("Param/Value/A281DAD4"), lv_title, c_stringReplaceAll, c_stringCase)), 32, UnitGetPosition(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center)), 0.0, false, false, PlayerGroupAll());
    gv_jukeboxTrackTitle = TextTagLastCreated();
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.8, 0.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\white.dds", false);
    TextTagSetBackgroundOffset(TextTagLastCreated(), 0.0, 0.25);
    auto2FB17D52_val = lp_jukeboxID;
    if (auto2FB17D52_val == gv_marSaraJukeboxID) {
        TextTagSetMaxSize(TextTagLastCreated(), 17.0, 400.0);
        TextTagSetAlignment(TextTagLastCreated(), c_alignCenter, c_alignTop);
        TextTagSetTextAlignment(TextTagLastCreated(), c_alignLeft, c_alignTop);
        TextTagAttachToUnitPoint(TextTagLastCreated(), gv_jukeboxes[lp_jukeboxID].lv_box, "Ref_StatusBar", 127, -290);
    }
    else if (auto2FB17D52_val == gv_cantinaJukeboxID) {
        TextTagSetMaxSize(TextTagLastCreated(), 19.0, 400.0);
        TextTagSetAlignment(TextTagLastCreated(), c_alignCenter, c_alignTop);
        TextTagSetTextAlignment(TextTagLastCreated(), c_alignLeft, c_alignTop);
        TextTagAttachToUnitPoint(TextTagLastCreated(), gv_jukeboxes[lp_jukeboxID].lv_box, "Ref_StatusBar", 25, -8);
    }
    else {
    }
    TextTagSetTextShadow(TextTagLastCreated(), true);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorBackground, ColorWithAlpha(6.27, 14.51, 19.61, 80.00));
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 1.0);
    if ((gf_CurrentWorldMode() == ge_WorldMode_WorldModeGlobal)) {
        gf_ShowHideJukeboxTrackInfo(true);
    }
    else {
        gf_ShowHideJukeboxTrackInfo(false);
    }
}

void gf_ShowHideJukeboxTrackInfo (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true) && (libNtve_gf_UnitIsVisibleToPlayer(gv_marSaraJukebox, 1) == false) && (libNtve_gf_UnitIsVisibleToPlayer(gv_cantinaJukebox, 1) == false)) {
        return ;
    }

    TextTagShow(gv_jukeboxTrackTitle, PlayerGroupAll(), lp_showHide);
}

void gf_MuteJukebox (bool lp_muteUnmute, int lp_jukeboxID) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_muteUnmute == true)) {
        if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_muted == false)) {
            gv_jukeboxes[lp_jukeboxID].lv_playback.lv_muted = true;
            gf_FadeJukeboxVolumeOverTime(lp_jukeboxID);
        }

        TriggerDebugOutput(1, (StringExternal("Param/Value/ABC761A1")), false);
    }
    else {
        gv_jukeboxes[lp_jukeboxID].lv_playback.lv_muted = false;
        if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music != null) && (gv_terranUpTheNightPlaying == false)) {
            SoundSetVolume(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music, 100.0);
        }

        TriggerDebugOutput(1, (StringExternal("Param/Value/9F2D41DF")), false);
    }
}

bool gf_JukeboxIsShutdown (int lp_jukeboxID) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent < 1) || (gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent >= gv_jukeboxes[lp_jukeboxID].lv_trackCount))) {
        return true;
    }

    return false;
}

void gf_AddPinboard (int lp_iD, string lp_genericFidget, unit lp_board, int lp_room, string lp_zoomCamera, string lp_zoomAnimation, fixed lp_zoomDuration, string lp_zoomBackCamera, string lp_zoomBackAnimation, fixed lp_zoomBackDuration, soundlink lp_highlightSound) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = (lp_iD);
    gv_pinboards[lv_index].lv_iD = lp_iD;
    gv_pinboards[lv_index].lv_itemCount = 0;
    gv_pinboards[lv_index].lv_genericFidgetSet = lp_genericFidget;
    gv_pinboards[lv_index].lv_pinboard = lp_board;
    gv_pinboards[lv_index].lv_room = lp_room;
    gv_pinboards[lv_index].lv_zoomCamera = lp_zoomCamera;
    gv_pinboards[lv_index].lv_zoomAnimation = lp_zoomAnimation;
    gv_pinboards[lv_index].lv_zoomDuration = lp_zoomDuration;
    gv_pinboards[lv_index].lv_zoomBackCamera = lp_zoomBackCamera;
    gv_pinboards[lv_index].lv_zoomBackAnimation = lp_zoomBackAnimation;
    gv_pinboards[lv_index].lv_zoomBackDuration = lp_zoomBackDuration;
    gv_pinboards[lv_index].lv_range = ge_PinboardCameraRange_Long;
    gv_pinboards[lv_index].lv_highlight = ge_PinboardHighlightStates_Unhighlighted;
    gv_pinboards[lv_index].lv_highlightSound = lp_highlightSound;
}

void gf_AddPinboardItem (int lp_item, string lp_fidgetSet, unit lp_itemUnit, soundlink lp_activateSound) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_itemIndex = (lp_item);
    gv_pinboardItems[lv_itemIndex].lv_iD = lp_item;
    gv_pinboardItems[lv_itemIndex].lv_fidgetSet = lp_fidgetSet;
    gv_pinboardItems[lv_itemIndex].lv_item = lp_itemUnit;
    gv_pinboardItems[lv_itemIndex].lv_activateSound = lp_activateSound;
    gv_pinboardItems[lv_itemIndex].lv_showHide = true;
}

void gf_AddPinboardItemToPinboard (int lp_pinboard, int lp_item) {
    // Variable Declarations
    int lv_pBIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pBIndex = (lp_pinboard);
    gv_pinboards[lv_pBIndex].lv_itemCount += 1;
    gv_pinboards[lv_pBIndex].lv_items[gv_pinboards[lv_pBIndex].lv_itemCount] = lp_item;
}

void gf_HidePinboardItem (bool lp_showHide, int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    gv_pinboardItems[(lp_item)].lv_showHide = lp_showHide;
}

void gf_HighlightPinboard (int lp_pinbaord, bool lp_hightlight, unit lp_unhighlightedUnit) {
    // Variable Declarations
    int lv_pbindex;
    unitgroup lv_itemGroup;
    unit lv_item;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemGroup = UnitGroupEmpty();

    // Implementation
    lv_pbindex = (lp_pinbaord);
    lv_itemGroup = gf_GetPinboardItemGroup(lp_pinbaord);
    gf_HighlightUnit(lp_hightlight, gv_pinboards[lv_pbindex].lv_pinboard);
}

void gf_PreparePinboard (int lp_pinboard) {
    // Variable Declarations
    int lv_pbIndex;
    int lv_pbitemIndex;
    int lv_itemIndex;
    unitgroup lv_itemGroup;

    // Automatic Variable Declarations
    int auto08DAD803_ae;
    const int auto08DAD803_ai = 1;

    // Variable Initialization
    lv_itemGroup = UnitGroupEmpty();

    // Implementation
    lv_pbIndex = (lp_pinboard);
    gf_RemoveVisibleUnit(true, gv_pinboards[lv_pbIndex].lv_pinboard);
    auto08DAD803_ae = gv_pBITEM_LAST;
    lv_itemIndex = gv_pBITEM_FIRST;
    for ( ; ( (auto08DAD803_ai >= 0 && lv_itemIndex <= auto08DAD803_ae) || (auto08DAD803_ai < 0 && lv_itemIndex >= auto08DAD803_ae) ) ; lv_itemIndex += auto08DAD803_ai ) {
        gf_RemoveVisibleUnit(false, gv_pinboardItems[lv_itemIndex].lv_item);
    }
    lv_itemGroup = gf_GetPinboardItemGroup(lp_pinboard);
    gf_RemoveVisibleUnits(true, lv_itemGroup);
}

int gf_GetPinboardFromUnit (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoE3ABF2A6_ae;
    const int autoE3ABF2A6_ai = 1;

    // Variable Initialization

    // Implementation
    autoE3ABF2A6_ae = gv_pB_LAST;
    lv_index = gv_pB_FIRST;
    for ( ; ( (autoE3ABF2A6_ai >= 0 && lv_index <= autoE3ABF2A6_ae) || (autoE3ABF2A6_ai < 0 && lv_index >= autoE3ABF2A6_ae) ) ; lv_index += autoE3ABF2A6_ai ) {
        if ((gv_pinboards[lv_index].lv_pinboard == lp_unit)) {
            return gv_pinboards[lv_index].lv_iD;
        }

    }
    return ge_Pinboard_PBNone;
}

unit gf_PinboardItem (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return gv_pinboardItems[(lp_item)].lv_item;
}

int gf_GetPinboardItemFromUnit (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto92532577_ae;
    const int auto92532577_ai = 1;

    // Variable Initialization

    // Implementation
    auto92532577_ae = gv_pBITEM_LAST;
    lv_index = gv_pBITEM_FIRST;
    for ( ; ( (auto92532577_ai >= 0 && lv_index <= auto92532577_ae) || (auto92532577_ai < 0 && lv_index >= auto92532577_ae) ) ; lv_index += auto92532577_ai ) {
        if ((gv_pinboardItems[lv_index].lv_item == lp_unit)) {
            return gv_pinboardItems[lv_index].lv_iD;
        }

    }
    return ge_PinboardItem_PBItemNone;
}

unitgroup gf_GetPinboardItemGroup (int lp_pinboard) {
    // Variable Declarations
    int lv_pbIndex;
    int lv_itemIndex;
    unitgroup lv_itemGroup;

    // Automatic Variable Declarations
    int autoCCB1DE84_ae;
    const int autoCCB1DE84_ai = 1;

    // Variable Initialization
    lv_itemGroup = UnitGroupEmpty();

    // Implementation
    lv_pbIndex = (lp_pinboard);
    autoCCB1DE84_ae = gv_pBITEM_LAST;
    lv_itemIndex = gv_pBITEM_FIRST;
    for ( ; ( (autoCCB1DE84_ai >= 0 && lv_itemIndex <= autoCCB1DE84_ae) || (autoCCB1DE84_ai < 0 && lv_itemIndex >= autoCCB1DE84_ae) ) ; lv_itemIndex += autoCCB1DE84_ai ) {
        if ((gf_PinboardItemIsOnPinboard(lp_pinboard, gv_pinboardItems[lv_itemIndex].lv_iD) == true)) {
            UnitGroupAdd(lv_itemGroup, gv_pinboardItems[lv_itemIndex].lv_item);
        }

    }
    return lv_itemGroup;
}

bool gf_PinboardItemIsOnPinboard (int lp_pinboard, int lp_item) {
    // Variable Declarations
    int lv_pbIndex;
    int lv_itemIndex;

    // Automatic Variable Declarations
    int auto74455492_ae;
    const int auto74455492_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_pinboardItems[(lp_item)].lv_showHide != true)) {
        return false;
    }

    lv_pbIndex = (lp_pinboard);
    auto74455492_ae = gv_pinboards[lv_pbIndex].lv_itemCount;
    lv_itemIndex = 1;
    for ( ; ( (auto74455492_ai >= 0 && lv_itemIndex <= auto74455492_ae) || (auto74455492_ai < 0 && lv_itemIndex >= auto74455492_ae) ) ; lv_itemIndex += auto74455492_ai ) {
        if ((gv_pinboards[lv_pbIndex].lv_items[lv_itemIndex] == lp_item)) {
            return true;
        }

    }
    return false;
}

int gf_GetPinboardOfItem (int lp_item) {
    // Variable Declarations
    int lv_pbindex;

    // Automatic Variable Declarations
    int autoE7663CD8_ae;
    const int autoE7663CD8_ai = 1;

    // Variable Initialization

    // Implementation
    autoE7663CD8_ae = gv_pB_LAST;
    lv_pbindex = gv_pB_FIRST;
    for ( ; ( (autoE7663CD8_ai >= 0 && lv_pbindex <= autoE7663CD8_ae) || (autoE7663CD8_ai < 0 && lv_pbindex >= autoE7663CD8_ae) ) ; lv_pbindex += autoE7663CD8_ai ) {
        if ((gf_PinboardItemIsOnPinboard(gv_pinboards[lv_pbindex].lv_iD, lp_item) == true)) {
            return gv_pinboards[lv_pbindex].lv_iD;
        }

    }
    return ge_Pinboard_PBNone;
}

int gf_GetCurrentPinboardItem () {
    // Automatic Variable Declarations
    // Implementation
    return gv_pinboardItemCurrent;
}

void gf_UpdateNewItems () {
    // Variable Declarations
    int lv_index;
    int lv_roomIndex;
    int lv_actorIndex;
    int lv_objectiveIndex;
    fixed lv_offsetY;

    // Automatic Variable Declarations
    int auto56AD9FF7_ae;
    const int auto56AD9FF7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_offsetY = -1.0;
    auto56AD9FF7_ae = gv_newItemsCount;
    lv_index = 1;
    for ( ; ( (auto56AD9FF7_ai >= 0 && lv_index <= auto56AD9FF7_ae) || (auto56AD9FF7_ai < 0 && lv_index >= auto56AD9FF7_ae) ) ; lv_index += auto56AD9FF7_ai ) {
        if ((gv_newItems[lv_index].lv_type != ge_NewItemType_None)) {
            lv_offsetY += 1.0;
            if ((gv_newItems[lv_index].lv_dialog == c_invalidDialogId)) {
                gf_CreateNewItem(lv_index, lv_offsetY);
            }
            else {
                gf_MoveNewItem(lv_index, lv_offsetY, 1.0);
            }
        }
        else {
            gf_DestoryNewItem(lv_index);
        }
    }
}

void gf_NewItemAvailable (int lp_type, text lp_text, string lp_imagePortrait, string lp_modelFlash, fixed lp_duration, int lp_customData) {
    // Automatic Variable Declarations
    // Implementation
    gv_tP_NEWITEMAVAILABLE_Type = lp_type;
    gv_tP_NEWITEMAVAILABLE_Text = lp_text;
    gv_tP_NEWITEMAVAILABLE_ImagePortrait = lp_imagePortrait;
    gv_tP_NEWITEMAVAILABLE_ModelFlash = lp_modelFlash;
    gv_tP_NEWITEMAVAILABLE_Duratioin = lp_duration;
    gv_tP_NEWITEMAVAILABLE_CustomData = lp_customData;
    TriggerExecute(gt_NewItemAvailable, true, false);
}

void gf_PauseNewItemInfo (bool lp_pauseUnpause) {
    // Variable Declarations
    int lv_index;
    bool lv_showHide;

    // Automatic Variable Declarations
    int autoB7D1E2CA_ae;
    const int autoB7D1E2CA_ai = 1;

    // Variable Initialization
    lv_showHide = true;

    // Implementation
    TriggerQueuePause(lp_pauseUnpause);
    if ((lp_pauseUnpause == true)) {
        gv_newItemInfoPaused = true;
        lv_showHide = false;
        TriggerDebugOutput(1, StringExternal("Param/Value/5197FC87"), false);
    }
    else {
        gv_newItemInfoPaused = false;
        lv_showHide = true;
        TriggerDebugOutput(1, StringExternal("Param/Value/147DBE51"), false);
    }
    autoB7D1E2CA_ae = gv_newItemsCount;
    lv_index = 1;
    for ( ; ( (autoB7D1E2CA_ai >= 0 && lv_index <= autoB7D1E2CA_ae) || (autoB7D1E2CA_ai < 0 && lv_index >= autoB7D1E2CA_ae) ) ; lv_index += autoB7D1E2CA_ai ) {
        gf_HideNewItem(lv_showHide, lv_index);
    }
}

void gf_CreateNewItem (int lp_newItemIndex, fixed lp_offset) {
    // Automatic Variable Declarations
    // Implementation
    gv_tP_CreateNewItem_NewItemIndex = lp_newItemIndex;
    gv_tP_CreateNewItem_Offset = lp_offset;
    TriggerExecute(gt_CreateNewItem, true, false);
}

void gf_WaitNewItemInfoDisplayDuration (int lp_newItemIndex) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = 0;
    while (true) {
        if ((lv_index > 50)) {
            break;
        }

        Wait(0.1, c_timeReal);
        if ((gv_newItemInfoPaused == false)) {
            lv_index += 1;
        }

    }
}

void gf_MoveNewItem (int lp_newItemIndex, fixed lp_offsetY, fixed lp_duration) {
    // Variable Declarations
    fixed lv_offsetYOriginal;
    fixed lv_incrementOffset;
    fixed lv_incrementTime;
    int lv_moveCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_tP_MoveNewItem_NewItemIndex = lp_newItemIndex;
    gv_tP_MoveNewItem_OffsetY = lp_offsetY;
    gv_tP_MoveNewItem_Duration = lp_duration;
    TriggerExecute(gt_MoveNewItem, true, false);
}

void gf_MoveNewItemInstant (int lp_newItemIndex, fixed lp_offsetY) {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_MoveDialogInGrid(gv_newItems[lp_newItemIndex].lv_dialog, c_anchorTopLeft, -0.5, lp_offsetY);
    gf_MoveNewItemFlashInstant(lp_newItemIndex);
}

void gf_MoveNewItemFlashInstant (int lp_newItemIndex) {
    // Automatic Variable Declarations
    // Implementation
    PortraitSetPosition(gv_newItems[lp_newItemIndex].lv_flash, c_anchorTopLeft, 0, (DialogGetOffsetY(gv_newItems[lp_newItemIndex].lv_dialog) + 20));
}

void gf_RemoveNewItem (int lp_newItemIndex) {
    // Automatic Variable Declarations
    // Implementation
    gv_tP_NewItemBeingRemoved = lp_newItemIndex;
    TriggerExecute(gt_RemoveNewItem, true, false);
}

void gf_DestoryNewItem (int lp_newItemIndex) {
    // Automatic Variable Declarations
    // Implementation
    gv_newItems[lp_newItemIndex].lv_type = ge_NewItemType_None;
    gv_newItems[lp_newItemIndex].lv_text = null;
    if ((gv_newItems[lp_newItemIndex].lv_dialog != c_invalidDialogId)) {
        DialogDestroy(gv_newItems[lp_newItemIndex].lv_dialog);
        gv_newItems[lp_newItemIndex].lv_dialog = c_invalidDialogId;
    }

    gv_newItems[lp_newItemIndex].lv_label = c_invalidDialogControlId;
    if ((gv_newItems[lp_newItemIndex].lv_flash != c_invalidPortraitId)) {
        PortraitDestroy(gv_newItems[lp_newItemIndex].lv_flash);
        gv_newItems[lp_newItemIndex].lv_flash = c_invalidPortraitId;
    }

    gv_newItems[lp_newItemIndex].lv_beingRemoved = false;
}

void gf_HideNewItem (bool lp_hideShow, int lp_newItemIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_newItems[lp_newItemIndex].lv_dialog != c_invalidDialogId)) {
        DialogSetVisible(gv_newItems[lp_newItemIndex].lv_dialog, PlayerGroupAll(), lp_hideShow);
    }

    if ((gv_newItems[lp_newItemIndex].lv_flash != c_invalidPortraitId)) {
        PortraitSetVisible(gv_newItems[lp_newItemIndex].lv_flash, PlayerGroupAll(), lp_hideShow, false);
    }

}

void gf_ResearchUnlock (string lp_research) {
    // Variable Declarations
    string lv_image;
    text lv_name;

    // Automatic Variable Declarations
    int autoBA297142_val;

    // Variable Initialization

    // Implementation
    lv_image = UserDataGetImagePath("CampaignPerk", lp_research, "Icon", 1);
    autoBA297142_val = UserDataGetInt("CampaignPerkGroup", UserDataGetUserInstance("CampaignPerk", lp_research, "Group", 1), "UIOrderX", 1);
    if (autoBA297142_val == 0) {
        lv_name = StringExternal("Param/Value/8D203426");
    }
    else if (autoBA297142_val == 1) {
        lv_name = StringExternal("Param/Value/E37E6383");
    }
    else {
    }
    lv_name = (lv_name + UserDataGetText("CampaignPerk", lp_research, "Name", 1) + StringExternal("Param/Value/77845A39"));
    gf_NewItemAvailable(ge_NewItemType_ResearchUnlock, (StringExternal("Param/Value/37B5AD6F") + lv_name), lv_image, "UIActivateCharacterPortrait", gv_c_NEWITEMINFO_DURATION, libNtve_gf_UserDataInstanceGetIndex("CampaignPerk", lp_research));
}

void gf_NewMercenary (string lp_mercenary) {
    // Automatic Variable Declarations
    // Implementation
    gf_NewItemAvailable(ge_NewItemType_NewMercenary, (StringExternal("Param/Value/26195581") + UserDataGetText("Mercenaries", lp_mercenary, "Name", 1) + StringExternal("Param/Value/D866B28B")), (CatalogFieldValueGet(c_gameCatalogModel, UserDataGetModel("Mercenaries", lp_mercenary, "Portrait", 1), "Image", 1)), "UIActivateRoomPortrait", gv_c_NEWITEMINFO_DURATION, libNtve_gf_UserDataInstanceGetIndex("Mercenaries", lp_mercenary));
}

int gf_CurrentWorldMode () {
    // Automatic Variable Declarations
    // Implementation
    return gv_worldMode;
}

int gf_CurrentIdleState () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_idleStateLockCount > 0)) {
        return ge_IdleState_Busy;
    }

    return ge_IdleState_Idle;
}

void gf_WaitForWorldMode (int lp_worldMode) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_CurrentWorldMode() == lp_worldMode)) {
        return ;
    }

    while (!((gf_CurrentWorldMode() == lp_worldMode))) {
        Wait(0.5, c_timeReal);
    }
}

void gf_WaitForIdleState (int lp_idleState) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_CurrentIdleState() == lp_idleState)) {
        return ;
    }

    while (!((gf_CurrentIdleState() == lp_idleState))) {
        Wait(0.5, c_timeReal);
    }
}

void gf_WaitForGlobalIdle () {
    // Automatic Variable Declarations
    // Implementation
    while (!((gf_CurrentWorldMode() == ge_WorldMode_WorldModeGlobal) && (gf_CurrentIdleState() == ge_IdleState_Idle))) {
        Wait(0.5, c_timeGame);
    }
}

void gf_SetWorldMode (int lp_mode) {
    // Variable Declarations
    bool lv_allowCheat;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allowCheat = true;

    // Implementation
    gv_worldMode = lp_mode;
    if ((lp_mode == ge_WorldMode_WorldModeGlobal)) {
        lv_allowCheat = true;
    }
    else {
        lv_allowCheat = false;
    }
    GameCheatAllow(c_gameCheatScene, lv_allowCheat);
    GameCheatAllow(c_gameCheatTV, lv_allowCheat);
    GameCheatAllow(c_gameCheatProgress, lv_allowCheat);
}

void gf_SetIdleState (int lp_idleState) {
    // Automatic Variable Declarations
    int auto0FEF1C63_val;

    // Implementation
    auto0FEF1C63_val = lp_idleState;
    if (auto0FEF1C63_val == ge_IdleState_Busy) {
        gv_idleStateLockCount += 1;
    }
    else if (auto0FEF1C63_val == ge_IdleState_Idle) {
        gv_idleStateLockCount -= 1;
        if ((gv_idleStateLockCount < 0)) {
            gv_idleStateLockCount = 0;
        }

    }
    else {
    }
}

void gf_DisplayFullScreenImage (string lp_image) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_fullscreenImageDialog == c_invalidDialogId)) {
        DialogCreate(2119, 1200, c_anchorCenter, 0, 0, true);
        gv_fullscreenImageDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
    }

    if ((gv_fullscreenImageDialogImage == c_invalidDialogControlId)) {
        DialogControlCreate(gv_fullscreenImageDialog, c_triggerControlTypeImage);
        gv_fullscreenImageDialogImage = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), false, PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/389A3D3E"), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StorySetLoading", PlayerGroupAll());
    }

    libNtve_gf_SetDialogItemImage(gv_fullscreenImageDialogImage, lp_image, PlayerGroupAll());
    DialogControlSetFullDialog(gv_fullscreenImageDialogImage, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_fullscreenImageDialogImage, PlayerGroupAll(), true);
    DialogSetVisible(gv_fullscreenImageDialog, PlayerGroupAll(), true);
}

void gf_HideFullScreenImage (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_fullscreenImageDialog == c_invalidDialogId)) {
        return ;
    }

    DialogSetVisible(gv_fullscreenImageDialog, PlayerGroupAll(), lp_showHide);
}

void gf_MakeUnitLookAtPointAndBlinkWithDebugControl (unit lp_unit, string lp_type, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_lookAtEnabled == true)) {
        if ((lp_type != "InstantHeadOnly") && (lp_type != "InstantHeadOnlySubtle") && (lp_type != "InstantStanding") && (lp_type != "InstantStandingSubtle")) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), "Blink", "Stand Blink", c_animFlagNonLooping, c_animTimeDefault);
        }

    }

    gf_MakeUnitLookAtPointWithDebugControl(lp_unit, lp_type, lp_point);
}

void gf_MakeUnitLookAtPointWithDebugControl (unit lp_unit, string lp_type, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_lookAtEnabled == true)) {
        libNtve_gf_MakeUnitLookAtPoint(lp_unit, lp_type, lp_point);
    }

}

void gf_MakeUnitLookAtUnitAndBlinkWithDebugControl (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_lookAtEnabled == true)) {
        if ((lp_type != "InstantHeadOnly") && (lp_type != "InstantHeadOnlySubtle") && (lp_type != "InstantStanding") && (lp_type != "InstantStandingSubtle")) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), "Blink", "Stand Blink", c_animFlagNonLooping, c_animTimeDefault);
        }

    }

    gf_MakeUnitLookAtUnitWithDebugControl(lp_unit, lp_type, lp_lookAtTargetUnit, lp_attachPoint);
}

void gf_MakeUnitLookAtUnitWithDebugControl (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_lookAtEnabled == true)) {
        libNtve_gf_MakeUnitLookAtUnit(lp_unit, lp_type, lp_lookAtTargetUnit, lp_attachPoint);
    }

}

void gf_DisplayQueryDialog (playergroup lp_players, text lp_show, bool lp_show2) {
    // Automatic Variable Declarations
    // Implementation
    gv_queryDialogClosed = false;
    gv_queryDialogResult = libNtve_ge_CustomDialogResult_c_customDialogResultAny;
    UIShowCustomDialog(lp_players, libNtve_ge_CustomDialogType_c_customDialogTypeQuery, StringToText(""), lp_show, lp_show2);
    while (!((gv_queryDialogClosed == true))) {
        Wait(0.1, c_timeReal);
    }
}

int gf_QueryDialogResult () {
    // Automatic Variable Declarations
    // Implementation
    return gv_queryDialogResult;
}

void gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

void gf_TurnActorFidgetOnOffInstantly (int lp_actor, bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetState(gf_ActorUnit(lp_actor), c_unitStateFidget, lp_onOff);
    if ((lp_onOff == false)) {
        gf_ClearAnimationwithblendtime(gv_aNIMID_FIDGET, gf_ActorUnit(lp_actor), 0.0);
    }

}

void gf_TurnAnimationPropertiesOnOffInstantly (unit lp_unit, string lp_property, bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    gf_TurnAnimationPropertiesOnOff(lp_unit, lp_property, lp_onOff, 0.0);
}

void gf_TurnAnimationPropertiesOnOff (unit lp_unit, string lp_property, bool lp_onOff, fixed lp_blend) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimBlendTimeApply(lp_blend));
    if ((lp_onOff == true)) {
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(lp_unit), lp_property);
    }
    else {
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(lp_unit), lp_property);
    }
    libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimBlendTimeRemove");
}

int gf_ConvertDifficultyToInteger (int lp_campaignDifficulty) {
    // Automatic Variable Declarations
    int autoCDA8BB84_val;

    // Implementation
    autoCDA8BB84_val = lp_campaignDifficulty;
    if (autoCDA8BB84_val == 1) {
        return 1;
    }
    else if (autoCDA8BB84_val == 2) {
        return 2;
    }
    else if (autoCDA8BB84_val == 3) {
        return 3;
    }
    else if (autoCDA8BB84_val == 4) {
        return 4;
    }
    else {
    }
    return 0;
}

int gf_ConvertIntegerToDifficulty (int lp_value) {
    // Automatic Variable Declarations
    int autoDC3217B1_val;

    // Implementation
    autoDC3217B1_val = lp_value;
    if (autoDC3217B1_val == 1) {
        return 1;
    }
    else if (autoDC3217B1_val == 2) {
        return 2;
    }
    else if (autoDC3217B1_val == 3) {
        return 3;
    }
    else if (autoDC3217B1_val == 4) {
        return 4;
    }
    else {
    }
    return 2;
}

void gf_PerformFarewellLine (unit lp_speaker, string lp_line, string lp_beforeAnim, string lp_afterAnim, bool lp_waitOption) {
    // Automatic Variable Declarations
    // Implementation
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(lp_speaker, false, false, "Talk"), PortraitGetGame(), "Talk", SoundLink(lp_line, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, lp_waitOption);
}

void gf_PerformFidgetLine (unit lp_speaker, string lp_line, string lp_anim) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_anim != "")) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_speaker), c_animNameDefault, lp_anim, c_animFlagPlayForever, gv_talkBlendTime);
    }

    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(lp_speaker, false, false, "Talk"), PortraitGetGame(), "Talk", SoundLink(lp_line, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    Wait(0.05, c_timeGame);
    if ((lp_anim != "")) {
        gf_ClearAnimationwithblendtime(c_animNameDefault, lp_speaker, c_animTimeDefault);
    }

}

void gf_ShowHideUnitGroup (bool lp_showHide, unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto1645265F_g;
    int auto1645265F_u;

    // Variable Initialization

    // Implementation
    auto1645265F_g = lp_unitGroup;
    auto1645265F_u = UnitGroupCount(auto1645265F_g, c_unitCountAll);
    for (;; auto1645265F_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto1645265F_g, auto1645265F_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, lp_showHide);
    }
}

void gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection (unit lp_unit, point lp_targetPoint, int lp_orderQueue) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), lp_orderQueue);
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(lp_targetPoint, 10.0, PointGetFacing(lp_targetPoint))), c_orderQueueAddToEnd);
}

point gf_UnitMovingTarget (unit lp_unit) {
    // Variable Declarations
    int lv_orderCount;
    int lv_orderIndex;
    order lv_order;

    // Automatic Variable Declarations
    int auto08C32D67_ae;
    const int auto08C32D67_ai = 1;

    // Variable Initialization

    // Implementation
    lv_orderCount = UnitOrderCount(lp_unit);
    auto08C32D67_ae = (lv_orderCount - 1);
    lv_orderIndex = 0;
    for ( ; ( (auto08C32D67_ai >= 0 && lv_orderIndex <= auto08C32D67_ae) || (auto08C32D67_ai < 0 && lv_orderIndex >= auto08C32D67_ae) ) ; lv_orderIndex += auto08C32D67_ai ) {
        lv_order = UnitOrder(lp_unit, lv_orderIndex);
        if ((AbilityCommandGetAbility(OrderGetAbilityCommand(lv_order)) == "move")) {
            return OrderGetTargetPoint(lv_order);
        }

    }
    return null;
}

void gf_StopAllTransmissionConversation () {
    // Automatic Variable Declarations
    // Implementation
    TransmissionClearAll();
    ConversationDataStop();
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal StopSMEventSounds");
}

point gf_RelativePoint (point lp_source, point lp_sourceCenter, point lp_targetCenter, fixed lp_xRatio, fixed lp_yRatio, fixed lp_rotate) {
    // Variable Declarations
    fixed lv_x1;
    fixed lv_y1;
    fixed lv_x2;
    fixed lv_y2;
    point lv_sourceAfterScaled;
    fixed lv_dis;
    fixed lv_angel;
    point lv_ret;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x1 = PointGetX(lp_sourceCenter);
    lv_y1 = PointGetY(lp_sourceCenter);
    lv_x2 = PointGetX(lp_source);
    lv_y2 = PointGetY(lp_source);
    lv_sourceAfterScaled = Point((lv_x1 + ((lv_x2 - lv_x1) * lp_xRatio)), (lv_y1 + ((lv_y2 - lv_y1) * lp_yRatio)));
    lv_dis = DistanceBetweenPoints(lp_sourceCenter, lv_sourceAfterScaled);
    lv_angel = AngleBetweenPoints(lp_sourceCenter, lv_sourceAfterScaled);
    lv_angel += lp_rotate;
    lv_ret = PointWithOffsetPolar(lp_targetCenter, lv_dis, lv_angel);
    PointSetFacing(lv_ret, (PointGetFacing(lp_source) + lp_rotate));
    return lv_ret;
}

trigger auto_gf_Ambience_FadeSoundVolumeOverTime_Trigger = null;
soundlink auto_gf_Ambience_FadeSoundVolumeOverTime_lp_soundLink;
sound auto_gf_Ambience_FadeSoundVolumeOverTime_lp_sound;
fixed auto_gf_Ambience_FadeSoundVolumeOverTime_lp_time;

void gf_Ambience_FadeSoundVolumeOverTime (soundlink lp_soundLink, sound lp_sound, fixed lp_time) {
    auto_gf_Ambience_FadeSoundVolumeOverTime_lp_soundLink = lp_soundLink;
    auto_gf_Ambience_FadeSoundVolumeOverTime_lp_sound = lp_sound;
    auto_gf_Ambience_FadeSoundVolumeOverTime_lp_time = lp_time;

    if (auto_gf_Ambience_FadeSoundVolumeOverTime_Trigger == null) {
        auto_gf_Ambience_FadeSoundVolumeOverTime_Trigger = TriggerCreate("auto_gf_Ambience_FadeSoundVolumeOverTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_Ambience_FadeSoundVolumeOverTime_Trigger, false, false);
}

bool auto_gf_Ambience_FadeSoundVolumeOverTime_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_soundLink = auto_gf_Ambience_FadeSoundVolumeOverTime_lp_soundLink;
    sound lp_sound = auto_gf_Ambience_FadeSoundVolumeOverTime_lp_sound;
    fixed lp_time = auto_gf_Ambience_FadeSoundVolumeOverTime_lp_time;

    // Variable Declarations
    fixed lv_timeInterval;
    fixed lv_volumeChange;
    fixed lv_elapsed;
    fixed lv_volume;

    // Automatic Variable Declarations
    sound auto8378F9DE_val;

    // Variable Initialization
    lv_timeInterval = 0.0625;

    // Implementation
    if ((lp_time > 0.0)) {
        lv_volume = 100.0;
        lv_volumeChange = ((100.0 * lv_timeInterval) / lp_time);
        DataTableSetBool(true, (SoundLinkId(lp_soundLink)), true);
        while (true) {
            if ((DataTableGetBool(true, (SoundLinkId(lp_soundLink))) == false)) {
                return true;
            }

            lv_volume -= lv_volumeChange;
            SoundSetVolume(lp_sound, lv_volume);
            lv_elapsed += lv_timeInterval;
            Wait(lv_timeInterval, c_timeReal);
            if ((lv_elapsed >= lp_time)) {
                break;
            }

        }
    }

    SoundStop(lp_sound, false);
    auto8378F9DE_val = lp_sound;
    if (auto8378F9DE_val == gv_bridgeBGSoundRadioBanter01) {
        gv_bridgeBGSoundRadioBanter01 = null;
    }
    else if (auto8378F9DE_val == gv_bridgeBGSoundRadioBanter02) {
        gv_bridgeBGSoundRadioBanter02 = null;
    }
    else if (auto8378F9DE_val == gv_bridgeBGSoundRadioBanter03) {
        gv_bridgeBGSoundRadioBanter03 = null;
    }
    else if (auto8378F9DE_val == gv_bridgeBGSoundWalla) {
        gv_bridgeBGSoundWalla = null;
    }
    else if (auto8378F9DE_val == gv_cantinaBGSoundWallaLeft) {
        gv_cantinaBGSoundWallaLeft = null;
    }
    else if (auto8378F9DE_val == gv_cantinaBGSoundWallaRight) {
        gv_cantinaBGSoundWallaRight = null;
    }
    else if (auto8378F9DE_val == gv_bridgeBGSoundWalla2) {
        gv_bridgeBGSoundWalla2 = null;
    }
    else if (auto8378F9DE_val == gv_bridgeBGSoundWalla3) {
        gv_bridgeBGSoundWalla3 = null;
    }
    else {
    }
    return true;
}

void gf_Ambience_RestoreSoundVolume (soundlink lp_soundLink, sound lp_sound) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, (SoundLinkId(lp_soundLink)), false);
    SoundSetVolume(lp_sound, 100.0);
}

void gf_FadeJukeboxVolumeOverTime (int lp_jukeboxID) {
    // Variable Declarations
    int lv_index;
    fixed lv_timeInterval;
    fixed lv_volumeChange;
    fixed lv_elapsed;
    fixed lv_volume;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeInterval = 0.0625;

    // Implementation
    if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music == null)) {
        return ;
    }

    SoundSetVolume(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music, 0.0);
}

void gf_Init02BRoomsArmoryTechUnits () {
    // Variable Declarations
    point lv_loc;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_loc = UnitGetPosition(gf_RoomUnit(ge_RoomID_RoomArmory));
    if ((libWoLC_gf_ArmyCategoryStateCheck("Banshee", c_armyCategoryStateUnlocked) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmoryBanshee", 0, 0, lv_loc);
        gv_armoryTechBanshee1 = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmoryBansheePHCrate", 0, 0, lv_loc);
        gv_armoryTechBansheePHCrates = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    if ((libWoLC_gf_ArmyCategoryStateCheck("Medivac", c_armyCategoryStateUnlocked) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmoryDropship", 0, 0, lv_loc);
        gv_armoryTechDropship = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmoryDropshipPHCrate", 0, 0, lv_loc);
        gv_armoryTechDropshipPHCrates = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    if ((libWoLC_gf_ArmyCategoryStateCheck("Firebat", c_armyCategoryStateUnlocked) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMFirebat", 0, 0, lv_loc);
        gv_armoryTechFirebat = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMFirebatPHCrate", 0, 0, lv_loc);
        gv_armoryTechFirebatPHCrates = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    if ((libWoLC_gf_ArmyCategoryStateCheck("Marauder", c_armyCategoryStateUnlocked) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMMarauder", 0, 0, lv_loc);
        gv_armoryTechMarauder = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMMarauderPHCrate", 0, 0, lv_loc);
        gv_armoryTechMarauderPHCrates = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    if ((libWoLC_gf_ArmyCategoryStateCheck("SiegeTank", c_armyCategoryStateUnlocked) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmoryTank", 0, 0, lv_loc);
        gv_armoryTechTank = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmoryTankPHCrate", 0, 0, lv_loc);
        gv_armoryTechTankPHCrates = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    if ((libWoLC_gf_ArmyCategoryStateCheck("VikingFighter", c_armyCategoryStateUnlocked) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMHyperionArmoryViking", 0, 0, lv_loc);
        gv_armoryTechViking = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmoryVikingPHCrate", 0, 0, lv_loc);
        gv_armoryTechVikingPHCrates = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    if ((libWoLC_gf_ArmyCategoryStateCheck("Vulture", c_armyCategoryStateUnlocked) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmorySpiderMine", 0, 0, lv_loc);
        gv_armoryTechSpiderMines = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmorySpiderMinePHCrate", 0, 0, lv_loc);
        gv_armoryTechSpiderMinePHCrates = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }
    if ((libWoLC_gf_ArmyCategoryStateCheck("Ghost", c_armyCategoryStateUnlocked) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmoryGhostCrate", 0, 0, lv_loc);
        gv_armoryTechGhostRifle = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("Spectre", c_armyCategoryStateUnlocked) == true)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmorySpectreCrate", 0, 0, lv_loc);
        gv_armoryTechSpectreCrates = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("Spectre", c_armyCategoryStateUnlocked) == false) && (libWoLC_gf_ArmyCategoryStateCheck("Ghost", c_armyCategoryStateUnlocked) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SMArmoryGhostCratePHCrate", 0, 0, lv_loc);
        gv_armoryTechGhostCratesPHCrates = UnitLastCreated();
        UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
        UnitGroupAdd(gv_armoryRoomZoomRemovableUnits, UnitLastCreated());
    }

    gv_armoryAnchor[0] = c_anchorTopLeft;
    gv_armoryAnchor[1] = c_anchorTop;
    gv_armoryAnchor[2] = c_anchorTopRight;
    gv_armoryAnchor[3] = c_anchorLeft;
    gv_armoryAnchor[4] = c_anchorCenter;
    gv_armoryAnchor[5] = c_anchorRight;
    gv_armoryAnchor[6] = c_anchorBottomLeft;
    gv_armoryAnchor[7] = c_anchorBottom;
    gv_armoryAnchor[8] = c_anchorBottomRight;
    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, false);
    gv_armoryGradientDialog = DialogLastCreated();
    DialogSetImageVisible(gv_armoryGradientDialog, false);
    DialogControlCreate(gv_armoryGradientDialog, c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_armoryGradientDialogImage = DialogControlLastCreated();
    DialogControlSetSize(gv_armoryGradientDialogImage, PlayerGroupAll(), 1600, 1200);
    libNtve_gf_SetDialogItemImage(gv_armoryGradientDialogImage, "Assets\\Textures\\wire.dds", PlayerGroupAll());
    DialogSetVisible(gv_armoryGradientDialog, PlayerGroupAll(), false);
}

void gf_Init02BRoomsArmoryWindowPlanets (string lp_mission) {
    // Variable Declarations
    point lv_loc;
    string lv_planetType;

    // Automatic Variable Declarations
    string auto8059E47A_val;
    string autoD171FED6_val;

    // Variable Initialization

    // Implementation
    UnitRemove(gv_armoryWindowPlanet);
    gv_armoryWindowPlanet = null;
    lv_loc = UnitGetPosition(gf_RoomUnit(ge_RoomID_RoomArmory));
    lv_planetType = null;
    auto8059E47A_val = lp_mission;
    if (auto8059E47A_val == "TRaynor01") {
        return ;
    }
    else if (auto8059E47A_val == "TRaynor02") {
        return ;
    }
    else if (auto8059E47A_val == "TRaynor03") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else if (auto8059E47A_val == "TValerian01") {
        lv_planetType = "SMBridgePlanetChar";
    }
    else if (auto8059E47A_val == "TValerian02A") {
        lv_planetType = "SMBridgePlanetChar";
    }
    else if (auto8059E47A_val == "TValerian02B") {
        lv_planetType = "SMBridgePlanetChar";
    }
    else if (auto8059E47A_val == "TValerian03") {
        lv_planetType = "SMBridgePlanetChar";
    }
    else if (auto8059E47A_val == "THanson01") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else if (auto8059E47A_val == "THanson02") {
        lv_planetType = "SMBridgePlanetMeinhoff";
    }
    else if (auto8059E47A_val == "THanson03A") {
        lv_planetType = "SMBridgePlanetHaven";
    }
    else if (auto8059E47A_val == "THanson03B") {
        lv_planetType = "SMBridgePlanetHaven";
    }
    else if (auto8059E47A_val == "THorner01") {
        lv_planetType = "SMBridgePlanetTarsonis";
    }
    else if (auto8059E47A_val == "THorner02") {
        lv_planetType = "SMBridgePlanetPortZion";
    }
    else if (auto8059E47A_val == "THorner03") {
        lv_planetType = "SMBridgePlanetValhalla";
    }
    else if (auto8059E47A_val == "THorner04") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else if (auto8059E47A_val == "THorner05S") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else if (auto8059E47A_val == "TTychus01") {
        lv_planetType = "SMBridgePlanetMonlyth";
    }
    else if (auto8059E47A_val == "TTychus02") {
        lv_planetType = "SMBridgePlanetXil";
    }
    else if (auto8059E47A_val == "TTychus03") {
        lv_planetType = "SMBridgePlanetTyrador";
    }
    else if (auto8059E47A_val == "TTychus04") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else if (auto8059E47A_val == "TTychus05") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else if (auto8059E47A_val == "TTosh01") {
        lv_planetType = "SMBridgePlanetRedstone";
    }
    else if (auto8059E47A_val == "TTosh02") {
        lv_planetType = "SMBridgePlanetBelShir";
    }
    else if (auto8059E47A_val == "TTosh03A") {
        lv_planetType = "SMBridgePlanetNewFolsom";
    }
    else if (auto8059E47A_val == "TTosh03B") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else if (auto8059E47A_val == "TZeratul01") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else if (auto8059E47A_val == "TZeratul02") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else if (auto8059E47A_val == "TZeratul03") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else if (auto8059E47A_val == "TZeratul04") {
        lv_planetType = "SMBridgePlanetSpace";
    }
    else {
        lv_planetType = "SMBridgePlanetSpace";
    }
    gv_armorySpaceLightningAnim = "G";
    autoD171FED6_val = lv_planetType;
    if (autoD171FED6_val == "SMBridgePlanetAgria") {
        gv_armorySpaceLightningAnim = "A";
    }
    else if (autoD171FED6_val == "SMBridgePlanetAiur") {
        gv_armorySpaceLightningAnim = "B";
    }
    else if (autoD171FED6_val == "SMBridgePlanetAvernus") {
        gv_armorySpaceLightningAnim = "D";
    }
    else if (autoD171FED6_val == "SMBridgePlanetBelShir") {
        gv_armorySpaceLightningAnim = "E";
    }
    else if (autoD171FED6_val == "SMBridgePlanetCastanar") {
        gv_armorySpaceLightningAnim = "G";
    }
    else if (autoD171FED6_val == "SMBridgePlanetChar") {
        gv_armorySpaceLightningAnim = "H";
    }
    else if (autoD171FED6_val == "SMBridgePlanetHaven") {
        gv_armorySpaceLightningAnim = "I";
    }
    else if (autoD171FED6_val == "SMBridgePlanetKorhal") {
        gv_armorySpaceLightningAnim = "J";
    }
    else if (autoD171FED6_val == "SMBridgePlanetMeinhoff") {
        gv_armorySpaceLightningAnim = "L";
    }
    else if (autoD171FED6_val == "SMBridgePlanetMonlyth") {
        gv_armorySpaceLightningAnim = "M";
    }
    else if (autoD171FED6_val == "SMBridgePlanetNewFolsom") {
        gv_armorySpaceLightningAnim = "N";
    }
    else if (autoD171FED6_val == "SMBridgePlanetPortZion") {
        gv_armorySpaceLightningAnim = "O";
    }
    else if (autoD171FED6_val == "SMBridgePlanetRedstone") {
        gv_armorySpaceLightningAnim = "P";
    }
    else if (autoD171FED6_val == "SMBridgePlanetShakuras") {
        gv_armorySpaceLightningAnim = "Q";
    }
    else if (autoD171FED6_val == "SMBridgePlanetTarsonis") {
        gv_armorySpaceLightningAnim = "R";
    }
    else if (autoD171FED6_val == "SMBridgePlanetTyphon") {
        gv_armorySpaceLightningAnim = "S";
    }
    else if (autoD171FED6_val == "SMBridgePlanetTyrador") {
        gv_armorySpaceLightningAnim = "T";
    }
    else if (autoD171FED6_val == "SMBridgePlanetUlaan") {
        gv_armorySpaceLightningAnim = "U";
    }
    else if (autoD171FED6_val == "SMBridgePlanetUlnar") {
        gv_armorySpaceLightningAnim = "V";
    }
    else if (autoD171FED6_val == "SMBridgePlanetValhalla") {
        gv_armorySpaceLightningAnim = "W";
    }
    else if (autoD171FED6_val == "SMBridgePlanetXil") {
        gv_armorySpaceLightningAnim = "X";
    }
    else if (autoD171FED6_val == "SMBridgePlanetZhakulDas") {
        gv_armorySpaceLightningAnim = "Y";
    }
    else {
    }
    libNtve_gf_CreateUnitsAtPoint2(1, lv_planetType, 0, 0, lv_loc);
    gv_armoryWindowPlanet = UnitLastCreated();
    UnitGroupAdd(gv_armoryRoomUnits, UnitLastCreated());
}

trigger auto_gf_Init02BRoomsArmoryWindowPlanets2_Trigger = null;

void gf_Init02BRoomsArmoryWindowPlanets2 () {
    if (auto_gf_Init02BRoomsArmoryWindowPlanets2_Trigger == null) {
        auto_gf_Init02BRoomsArmoryWindowPlanets2_Trigger = TriggerCreate("auto_gf_Init02BRoomsArmoryWindowPlanets2_TriggerFunc");
    }

    TriggerExecute(auto_gf_Init02BRoomsArmoryWindowPlanets2_Trigger, false, false);
}

bool auto_gf_Init02BRoomsArmoryWindowPlanets2_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if (libWoLC_gf_StoryState("TaurenOutHouseActivated") && ((libWoLC_gf_LastMission() == "TTychus05") || (libWoLC_gf_LastMission() == "THorner05S") || (libWoLC_gf_LastMission() == "TTosh03B")) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false)) {
        libNtve_gf_CreateModelAtPoint("TaurenFlyingOutHouse", PointFromId(1043));
        gv_armoryOutHourse = libNtve_gf_ActorLastCreated();
        ActorSend(gv_armoryOutHourse, libNtve_gf_SetFacing(90.0));
        ActorSend(gv_armoryOutHourse, libNtve_gf_SetHeight(0.4));
        Wait(15.0, c_timeReal);
        libNtve_gf_CreateModelAtPoint("TaurenFlyingOutHouse", PointFromId(1044));
        gv_bridgeOutHourse = libNtve_gf_ActorLastCreated();
        ActorSend(gv_bridgeOutHourse, libNtve_gf_SetFacing(150.0));
        ActorSend(gv_bridgeOutHourse, libNtve_gf_SetHeight(4.0));
    }

    return true;
}

void gf_ReturnNewItemInfo () {
    // Variable Declarations
    bool lv_newMercenaries;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_ReturnNewItemInfoMercenary();
    gf_ReturnNewItemInfoResearch();
}

trigger auto_gf_ReturnNewItemInfoResearch_Trigger = null;

void gf_ReturnNewItemInfoResearch () {
    if (auto_gf_ReturnNewItemInfoResearch_Trigger == null) {
        auto_gf_ReturnNewItemInfoResearch_Trigger = TriggerCreate("auto_gf_ReturnNewItemInfoResearch_TriggerFunc");
    }

    TriggerExecute(auto_gf_ReturnNewItemInfoResearch_Trigger, false, false);
}

bool auto_gf_ReturnNewItemInfoResearch_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    string auto556DA70F_userType;
    int auto556DA70F_i;

    // Variable Initialization

    // Implementation
    auto556DA70F_userType = "CampaignPerk";
    auto556DA70F_i = 1;
    for ( ; auto556DA70F_i <= UserDataInstanceCount(auto556DA70F_userType) ; auto556DA70F_i += 1 ) {
        lv_indexPerk = UserDataInstance(auto556DA70F_userType, auto556DA70F_i);
        if ((gv_isTransitionalLoad == false) && (libWoLC_gf_WC_PerkStateCheck(lv_indexPerk, libWoLC_ge_WC_PerkState_Unlocked) == true) && (UserDataGetInt("CampaignPerk", lv_indexPerk, "IsNew", 1) > 0)) {
            gf_ResearchUnlock(lv_indexPerk);
        }

    }
    Wait(2.0, c_timeGame);
    if ((gv_researchUnlockedProt == true)) {
        TriggerExecute(gt_TipNewProtossResearch, true, false);
    }

    if ((gv_researchUnlockedZerg == true)) {
        TriggerExecute(gt_TipNewZergResearch, true, false);
    }

    return true;
}

trigger auto_gf_ReturnNewItemInfoMercenary_Trigger = null;

void gf_ReturnNewItemInfoMercenary () {
    if (auto_gf_ReturnNewItemInfoMercenary_Trigger == null) {
        auto_gf_ReturnNewItemInfoMercenary_Trigger = TriggerCreate("auto_gf_ReturnNewItemInfoMercenary_TriggerFunc");
    }

    TriggerExecute(auto_gf_ReturnNewItemInfoMercenary_Trigger, false, false);
}

bool auto_gf_ReturnNewItemInfoMercenary_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_mercenary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mercenary = libWoLC_gf_MissionArmyCategoryUnlocked2(libWoLC_gf_LastMission());

    // Implementation
    if ((gv_isTransitionalLoad == false) && (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 5) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (lv_mercenary != null) && (libWoLC_gf_CampaignMercenaryStateCheck(lv_mercenary, "Available") == true)) {
        gf_NewMercenary(lv_mercenary);
        Wait(2.0, c_timeGame);
    }

    if ((gv_mercUnlocked == true)) {
        TriggerExecute(gt_TipNewMercenaries, true, false);
    }

    return true;
}

void gf_ReturnFlahsing () {
    // Variable Declarations
    int lv_actorIndex;
    int lv_actorID;
    unit lv_hotspot;

    // Automatic Variable Declarations
    unitgroup autoE28B3249_g;
    int autoE28B3249_u;
    int auto03E5193C_ae;
    const int auto03E5193C_ai = 1;
    unitgroup autoD3AF9C9F_g;
    int autoD3AF9C9F_u;
    unit autoD3AF9C9F_var;

    // Variable Initialization
    lv_actorID = ge_ActorID_ActorNone;

    // Implementation
    autoE28B3249_g = gv_clickables;
    autoE28B3249_u = UnitGroupCount(autoE28B3249_g, c_unitCountAll);
    for (;; autoE28B3249_u -= 1) {
        lv_hotspot = UnitGroupUnitFromEnd(autoE28B3249_g, autoE28B3249_u);
        if (lv_hotspot == null) { break; }
        if ((gf_RoomIsEnabled(gf_GetUnitClickableRoom(lv_hotspot)) == true) && (gf_ActorID(lv_hotspot) == ge_ActorID_ActorNone)) {
            UnitGroupAdd(gv_hotspots_Flashing, lv_hotspot);
        }

    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/BAC339D7") + libNtve_gf_ConvertBooleanToText(gf_ActorWithConversation(ge_ActorID_ActorSwann))), false);
    auto03E5193C_ae = gv_c_ACTOR_LAST;
    lv_actorIndex = gv_c_ACTOR_FIRST;
    for ( ; ( (auto03E5193C_ai >= 0 && lv_actorIndex <= auto03E5193C_ae) || (auto03E5193C_ai < 0 && lv_actorIndex >= auto03E5193C_ae) ) ; lv_actorIndex += auto03E5193C_ai ) {
        lv_actorID = gv_actors[lv_actorIndex].lv_actorID;
        if ((gf_RoomIsEnabled(gf_ActorRoom(lv_actorID)) == true) && (gf_ActorWithConversation(lv_actorID) == true)) {
            UnitGroupAdd(gv_hotspots_Flashing, gf_ActorUnit(lv_actorID));
        }

    }
    autoD3AF9C9F_g = gv_hotspots_Flashing;
    autoD3AF9C9F_u = UnitGroupCount(autoD3AF9C9F_g, c_unitCountAll);
    for (;; autoD3AF9C9F_u -= 1) {
        autoD3AF9C9F_var = UnitGroupUnitFromEnd(autoD3AF9C9F_g, autoD3AF9C9F_u);
        if (autoD3AF9C9F_var == null) { break; }
        gf_StartFlashingUnit(autoD3AF9C9F_var);
    }
}

void gf_ReturnTimestamp () {
    // Automatic Variable Declarations
    // Implementation
    if (((libWoLC_gf_LastSuccessfulMission() == "THanson01") || (libWoLC_gf_LastSuccessfulMission() == "TTychus01"))) {
        return ;
    }

    gf_DisplayTimestamp(ge_TimestampType_BeforeStorymode);
}

void gf_DisplayMissionDebriefing (string lp_mission) {
    // Automatic Variable Declarations
    string auto92483638_val;

    // Implementation
    libCamp_gf_HideStoryUI(false, true);
    UISetCursorVisible(PlayerGroupAll(), false);
    auto92483638_val = lp_mission;
    if (auto92483638_val == null) {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran01RaynorIntro") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene01RaynorIntro, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran01RaynorIntro", true);
        }

    }
    else if (auto92483638_val == "TRaynor01") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran04TychusIntro") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene04TychusIntro, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran04TychusIntro", true);
        }

    }
    else if (auto92483638_val == "TRaynor02") {
    }
    else if (auto92483638_val == "TRaynor03") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran05HornerBridgeIntro") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene05EscapefromMarSara, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran05HornerBridgeIntro", true);
            gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
            TriggerExecute(gt_DebriefingTRaynor03, true, true);
        }

    }
    else if (auto92483638_val == "THanson01") {
        gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
        TriggerExecute(gt_DebriefingTHanson01, true, true);
        gf_DisplayTimestamp(ge_TimestampType_BeforeStorymode);
        if ((libWoLC_gf_StoryState("CantinaIntroDone") == false)) {
            libWoLC_gf_SetStoryStateBoolean("CantinaIntroDone", true);
            TriggerExecute(gt_ScriptSceneMercIntro, true, true);
        }

    }
    else if (auto92483638_val == "THanson02") {
        gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
        TriggerExecute(gt_DebriefingTHanson02_1, true, true);
    }
    else if (auto92483638_val == "THanson03A") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran08HansonEndA") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene08HansonEndA, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran08HansonEndA", true);
        }

    }
    else if (auto92483638_val == "THanson03B") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran13HansonEndB") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene13HansonEndB, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran13HansonEndB", true);
        }

    }
    else if (auto92483638_val == "TTosh01") {
        gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
        TriggerExecute(gt_DebriefingTTosh01, true, true);
    }
    else if (auto92483638_val == "TTosh02") {
        gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
        TriggerExecute(gt_DebriefingTTosh02, true, true);
    }
    else if (auto92483638_val == "TTosh03A") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran09ToshEndA") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene09ToshEndA, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran09ToshEndA", true);
        }

    }
    else if (auto92483638_val == "TTosh03B") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran14ToshEndB") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene14ToshEndB, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran14ToshEndB", true);
            gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
            TriggerExecute(gt_DebriefingTTosh03B, true, true);
        }

    }
    else if (auto92483638_val == "THorner01") {
        gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
        TriggerExecute(gt_DebriefingTHorner01, true, true);
    }
    else if (auto92483638_val == "THorner02") {
        gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
        TriggerExecute(gt_DebriefingTHorner02, true, true);
    }
    else if (auto92483638_val == "THorner03") {
        gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
        TriggerExecute(gt_DebriefingTHorner03, true, true);
    }
    else if (auto92483638_val == "THorner04") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran12HornerVictory") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene12HornerEnd, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran12HornerVictory", true);
        }

    }
    else if (auto92483638_val == "THorner05S") {
        gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
        TriggerExecute(gt_DebriefingTHorner05S, true, true);
    }
    else if (auto92483638_val == "TTychus01") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran15KerriganIntro") == false)) {
            TriggerExecute(gt_Scene15KerriganIntro, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran15KerriganIntro", true);
            gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
            TriggerExecute(gt_DebriefingTTychus01, true, true);
        }

        gf_DisplayTimestamp(ge_TimestampType_BeforeStorymode);
        if ((libWoLC_gf_StoryState("CantinaIntroDone") == false)) {
            libWoLC_gf_SetStoryStateBoolean("CantinaIntroDone", true);
            TriggerExecute(gt_ScriptSceneMercIntro, true, true);
        }

    }
    else if (auto92483638_val == "TTychus02") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran03ZeratulsWarning") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene03ZeratulWarning, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran03ZeratulsWarning", true);
            gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
            TriggerExecute(gt_DebriefingTTychus02, true, true);
        }

    }
    else if (auto92483638_val == "TTychus03") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran10RaynorsDream") == false)) {
            TriggerExecute(gt_Rendered03TheDreamNoCleanup, true, true);
            CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
            TriggerExecute(gt_Scene10RaynorsDream, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran10RaynorsDream", true);
        }

    }
    else if (auto92483638_val == "TTychus04") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran06ValerianIntro") == false)) {
            TriggerExecute(gt_Scene06ValerianIntro, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran06ValerianIntro", true);
            gf_DisplayFullScreenImage(gf_RoomLoadingImage(ge_RoomID_RoomLab));
            CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
            Wait(0.25, c_timeGame);
            gf_ReloadLocations();
            gf_HideFullScreenImage(false);
            gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
            TriggerExecute(gt_DebriefingTTychus04, true, true);
        }

    }
    else if (auto92483638_val == "TTychus05") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran07BarFight") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene07BarFight, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran07BarFight", true);
        }

    }
    else if (auto92483638_val == "TZeratul04") {
        gf_DisplayTimestamp(ge_TimestampType_BeforeDebrief);
        TriggerExecute(gt_DebriefingTZeratul04, true, true);
    }
    else if (auto92483638_val == "TValerian01") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran11CharBatltefield") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene11CharBattlefieldIntro, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran11CharBatltefield", true);
        }

    }
    else if (auto92483638_val == "TValerian02A") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran11CharBatltefield") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene17CharBattlefieldEnd, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran11CharBatltefield", true);
        }

    }
    else if (auto92483638_val == "TValerian02B") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran17CharBattlefieldEnd") == false)) {
            gf_DisplayTimestamp(ge_TimestampType_BeforeCinematic);
            TriggerExecute(gt_Scene17CharBattlefieldEnd, true, true);
            libWoLC_gf_SetStoryScenePlayed("SceneTerran17CharBattlefieldEnd", true);
        }

    }
    else {
    }
    TriggerExecute(gt_ReturnGeneric, true, true);
    UISetCursorVisible(PlayerGroupAll(), true);
    libCamp_gf_HideStoryUI(true, true);
}

void gf_TransitionalSave () {
    // Variable Declarations
    string lv_section;
    bool lv_cantinaBroken;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_section = "";

    // Implementation
    UserDataSetInt("TStory01TransitionData", "CurrentRoom", "Integer", 1, (gv_currentRoom));
    UserDataSetInt("TStory01TransitionData", "CantinaBroken", "Integer", 1, BoolToInt((gv_cantinaState == ge_CantinaStates_Broken)));
    UserDataSetInt("TStory01TransitionData", "ArmoryOpenedNew", "Integer", 1, BoolToInt(gv_armoryOpenedNew));
    UserDataSetInt("TStory01TransitionData", "CantinaOpenedNew", "Integer", 1, BoolToInt(gv_cantinaOpenedNew));
    UserDataSetInt("TStory01TransitionData", "LabOpenedNew", "Integer", 1, BoolToInt(gv_labOpenedNew));
    UserDataSetInt("TStory01TransitionData", "LabArtifactsClickable", "Integer", 1, BoolToInt(gv_labArtifactsClickable));
    UserDataSetString("TStory01TransitionData", "AbChoiceCurrent", "String", 1, (gv_abChoiceCurrent));
    UserDataSetInt("TStory01TransitionData", "AbChoiceDifficulty", "Integer", 1, gf_ConvertDifficultyToInteger(gv_abChoiceDifficulty));
    UserDataSetInt("TStory01TransitionData", "ResearchUnlockedProt", "Integer", 1, BoolToInt(gv_researchUnlockedProt));
    UserDataSetInt("TStory01TransitionData", "ResearchUnlockedZerg", "Integer", 1, BoolToInt(gv_researchUnlockedZerg));
    UserDataSetInt("TStory01TransitionData", "MercUnlocked", "Integer", 1, BoolToInt(gv_mercUnlocked));
}

void gf_TransitionalLoad () {
    // Variable Declarations
    bool lv_bankExist;
    string lv_section;
    bool lv_cantinaBroken;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_section = "";

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/D7CB3165") + libNtve_gf_ConvertBooleanToText(libWoLC_gf_StoryState("IsStoryTransitionSave"))), false);
    if ((libWoLC_gf_StoryState("IsStoryTransitionSave") == false)) {
        gv_isTransitionalLoad = false;
        return ;
    }

    gv_isTransitionalLoad = true;
    gv_currentRoom = gf_RoomFromIndex(UserDataGetInt("TStory01TransitionData", "CurrentRoom", "Integer", 1));
    gv_currentLocation = gf_RoomLocation(gv_currentRoom);
    if ((UserDataGetInt("TStory01TransitionData", "CantinaBroken", "Integer", 1) > 0)) {
        gv_cantinaState = ge_CantinaStates_Broken;
    }
    else {
        gv_cantinaState = ge_CantinaStates_Normal;
    }
    gv_armoryOpenedNew = (UserDataGetInt("TStory01TransitionData", "ArmoryOpenedNew", "Integer", 1) > 0);
    gv_cantinaOpenedNew = (UserDataGetInt("TStory01TransitionData", "CantinaOpenedNew", "Integer", 1) > 0);
    gv_labOpenedNew = (UserDataGetInt("TStory01TransitionData", "LabOpenedNew", "Integer", 1) > 0);
    gv_labArtifactsClickable = (UserDataGetInt("TStory01TransitionData", "LabArtifactsClickable", "Integer", 1) > 0);
    gv_abChoiceCurrent = (UserDataGetString("TStory01TransitionData", "AbChoiceCurrent", "String", 1));
    gv_abChoiceDifficulty = gf_ConvertIntegerToDifficulty(UserDataGetInt("TStory01TransitionData", "AbChoiceDifficulty", "Integer", 1));
    gv_researchUnlockedProt = (UserDataGetInt("TStory01TransitionData", "ResearchUnlockedProt", "Integer", 1) > 0);
    gv_researchUnlockedZerg = (UserDataGetInt("TStory01TransitionData", "ResearchUnlockedZerg", "Integer", 1) > 0);
    gv_mercUnlocked = (UserDataGetInt("TStory01TransitionData", "MercUnlocked", "Integer", 1) > 0);
}

void gf_DisplayDebugMessage (text lp_msg) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isForDebug == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, lp_msg);
    }

}

void gf_DebugSceneAddButton (int lp_wide, int lp_tall, int lp_x, int lp_y, text lp_label, trigger lp_callback, text lp_sceneLabel) {
    // Automatic Variable Declarations
    // Implementation
    gv_debugSceneCount = (gv_debugSceneCount + 1);
    gv_debugSceneCallbacks[gv_debugSceneCount] = lp_callback;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), lp_label);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_wide, lp_tall);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugScenePanelButton", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    gv_debugSceneButtons[gv_debugSceneCount] = DialogControlLastCreated();
    gv_debugSceneLabels[gv_debugSceneCount] = (lp_label + StringExternal("Param/Value/C76FEA3B") + lp_sceneLabel);
    if ((lp_callback == null)) {
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

}

void gf_DebugSceneAddLabel (int lp_x, int lp_y, text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), lp_label);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
}

void gf_RoomCheatAddButton (text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), lp_label);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 50);
}

void gf_RoomCheatCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_roomCheatDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(100, 100, c_anchorCenter, -50, -50, true);
    gv_roomCheatDialog = DialogLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/C6660181"));
    gv_roomCheatButtonMarSara = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/A770B1AA"));
    gv_roomCheatButtonBridge = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/AF6FF0E1"));
    gv_roomCheatButtonConscription = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/FB03780E"));
    gv_roomCheatButtonArmory = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/FDEB51AC"));
    gv_roomCheatButtonCantina = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/5BA7AED9"));
    gv_roomCheatButtonLab = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/35DA6131"));
    gv_roomCheatButtonChar = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/0DB89306"));
    gv_roomCheatButtonObservatory = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/6190BB53"));
    gv_roomCheatButtonCancel = DialogControlLastCreated();
}

void gf_RoomCheatUpdateButton (int lp_button, bool lp_condition) {
    // Variable Declarations
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_condition == true)) {
        DialogControlSetVisible(lp_button, PlayerGroupAll(), true);
        DialogControlSetPosition(lp_button, PlayerGroupAll(), c_anchorTop, 0, gv_roomCheatSizeY);
        gv_roomCheatSizeY = (gv_roomCheatSizeY + 50);
    }
    else {
        DialogControlSetVisible(lp_button, PlayerGroupAll(), false);
    }
}

void gf_RoomCheatUpdateDialog (bool lp_bypass) {
    // Automatic Variable Declarations
    // Implementation
    gv_roomCheatSizeX = 300;
    gv_roomCheatSizeY = 35;
    gf_RoomCheatUpdateButton(gv_roomCheatButtonMarSara, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomMarSara) && (gv_currentRoom != ge_RoomID_RoomMarSara))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonBridge, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomBridge) && (gv_currentRoom != ge_RoomID_RoomBridge))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonArmory, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomArmory) && (gv_currentRoom != ge_RoomID_RoomArmory))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonConscription, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomConscription) && (gv_currentRoom != ge_RoomID_RoomConscription))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonCantina, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomCantina) && (gv_currentRoom != ge_RoomID_RoomCantina))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonLab, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomLab) && (gv_currentRoom != ge_RoomID_RoomLab))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonChar, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomChar) && (gv_currentRoom != ge_RoomID_RoomChar))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonObservatory, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomObservatory) && (gv_currentRoom != ge_RoomID_RoomObservatory))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonCancel, true);
    gv_roomCheatSizeY = (gv_roomCheatSizeY + 35);
    DialogSetPosition(gv_roomCheatDialog, c_anchorCenter, (0 - (gv_roomCheatSizeX / 2)), (0 - (gv_roomCheatSizeY / 2)));
    DialogSetSize(gv_roomCheatDialog, gv_roomCheatSizeX, gv_roomCheatSizeY);
}

void gf_DisplayRoomCheatDialog (bool lp_check) {
    // Automatic Variable Declarations
    // Implementation
    gf_RoomCheatCreateDialog();
    gf_RoomCheatUpdateDialog((lp_check == false));
    DialogSetVisible(gv_roomCheatDialog, PlayerGroupAll(), true);
}

void gf_HideRoomCheatDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(gv_roomCheatDialog, PlayerGroupAll(), false);
}

void gf_RoomCameraAddButton (text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), lp_label);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 50);
}

void gf_RoomCameraCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_roomCameraDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(100, 100, c_anchorCenter, -50, -50, true);
    gv_roomCameraDialog = DialogLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/5288E7CD"));
    gv_roomCameraButtonMarSara = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/D38A49C2"));
    gv_roomCameraButtonBridge = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/426CDD17"));
    gv_roomCameraButtonArmory = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/76C5335F"));
    gv_roomCameraButtonArmory = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/CE6709E3"));
    gv_roomCameraButtonCantina = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/3CBAFF16"));
    gv_roomCameraButtonLab = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/A67AD1DF"));
    gv_roomCameraButtonChar = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/A9E7CA0C"));
    gv_roomCameraButtonCancel = DialogControlLastCreated();
}

void gf_RoomCameraUpdateButton (int lp_button, bool lp_condition) {
    // Variable Declarations
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_condition == true)) {
        DialogControlSetVisible(lp_button, PlayerGroupAll(), true);
        DialogControlSetPosition(lp_button, PlayerGroupAll(), c_anchorTop, 0, gv_roomCameraSizeY);
        gv_roomCameraSizeY = (gv_roomCameraSizeY + 50);
    }
    else {
        DialogControlSetVisible(lp_button, PlayerGroupAll(), false);
    }
}

void gf_RoomCameraUpdateDialog (bool lp_bypass) {
    // Automatic Variable Declarations
    // Implementation
    gv_roomCameraSizeX = 300;
    gv_roomCameraSizeY = 35;
    gf_RoomCameraUpdateButton(gv_roomCameraButtonMarSara, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomMarSara) && (gv_currentRoom != ge_RoomID_RoomMarSara))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonBridge, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomBridge) && (gv_currentRoom != ge_RoomID_RoomBridge))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonConscription, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomConscription) && (gv_currentRoom != ge_RoomID_RoomConscription))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonArmory, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomArmory) && (gv_currentRoom != ge_RoomID_RoomArmory))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonCantina, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomCantina) && (gv_currentRoom != ge_RoomID_RoomCantina))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonLab, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomLab) && (gv_currentRoom != ge_RoomID_RoomLab))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonChar, (lp_bypass || (gf_RoomIsEnabled(ge_RoomID_RoomChar) && (gv_currentRoom != ge_RoomID_RoomChar))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonCancel, true);
    gv_roomCameraSizeY = (gv_roomCameraSizeY + 35);
    DialogSetPosition(gv_roomCameraDialog, c_anchorCenter, (0 - (gv_roomCameraSizeX / 2)), (0 - (gv_roomCameraSizeY / 2)));
    DialogSetSize(gv_roomCameraDialog, gv_roomCameraSizeX, gv_roomCameraSizeY);
}

void gf_DisplayRoomCameraDialog (bool lp_check) {
    // Automatic Variable Declarations
    // Implementation
    gf_RoomCameraCreateDialog();
    gf_RoomCameraUpdateDialog((lp_check == false));
    DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), true);
}

void gf_HideRoomCameraDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
}

void gf_Debug_CreateBriefingMissionButton (string lp_mission) {
    // Variable Declarations
    const fixed lv_width = 4.0;
    fixed lv_rX;
    fixed lv_rY;
    text lv_mapName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mapName = StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "Name", 1));

    // Implementation
    gv_debug_BriefingMissioniButtonNewLine = false;
    lv_rX = (lv_width * IntToFixed(gv_debug_BriefingMissioniButtonX));
    lv_rY = IntToFixed(gv_debug_BriefingMissioniButtonY);
    libCamp_gf_CreateDialogItemInGrid(gv_debug_BriefingDialog, c_triggerControlTypeButton, c_anchorTopLeft, lv_rX, lv_rY, lv_width, 1.0, lv_mapName);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BriefingDebugButtonText", PlayerGroupAll());
    gv_debug_BriefingMissioniButton[gv_debug_BriefingMissioniButtonCount] = DialogControlLastCreated();
    DataTableSetString(true, ("DEBUG_Briefing_Button_" + IntToString(gv_debug_BriefingMissioniButtonCount)), (lp_mission));
    gv_debug_BriefingMissioniButtonCount += 1;
    if ((gf_MissionBriefingCallback(lp_mission) == null)) {
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    gv_debug_BriefingMissioniButtonX += 1;
    if (((lv_rX + lv_width) > gv_debug_BriefingMissioniButtonXMax)) {
        gv_debug_BriefingMissioniButtonXMax = (lv_rX + lv_width);
    }

}

void gf_Debug_CreateBriefingMissionButtonNewLine () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_debug_BriefingMissioniButtonNewLine == true)) {
        return ;
    }

    gv_debug_BriefingMissioniButtonNewLine = true;
    gv_debug_BriefingMissioniButtonX = 0;
    gv_debug_BriefingMissioniButtonY += 1;
}

void gf_Debug_CreateBriefingDialog () {
    // Variable Declarations
    int lv_x;
    int lv_y;
    string lv_indexMission;
    string lv_prefix;
    string lv_prefixPrevious;

    // Automatic Variable Declarations
    int auto2F5BFB9E_ae;
    int auto2F5BFB9E_ai;

    // Variable Initialization
    lv_prefix = "";
    lv_prefixPrevious = "";

    // Implementation
    if ((gv_debug_BriefingDialog != c_invalidDialogId)) {
        return ;
    }

    libCamp_gf_CreateDialogInGrid(16.0, 12.0, c_anchorCenter, 0.0, 0.0, true);
    gv_debug_BriefingDialog = DialogLastCreated();
    libCamp_gf_CreateDialogItemInGrid(gv_debug_BriefingDialog, c_triggerControlTypeLabel, c_anchorTop, 0.0, 0.0, 10.0, 2.0, StringExternal("Param/Value/95869D9B"));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportTitle", PlayerGroupAll());
    gv_debug_BriefingMissioniButtonX = 0;
    gv_debug_BriefingMissioniButtonXMax = 16.0;
    gv_debug_BriefingMissioniButtonY = 2;
    auto2F5BFB9E_ae = CatalogEntryCount(c_gameCatalogMap);
    auto2F5BFB9E_ai = 1;
    while (auto2F5BFB9E_ai <= auto2F5BFB9E_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto2F5BFB9E_ai);
        auto2F5BFB9E_ai = auto2F5BFB9E_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            lv_prefix = StringSub((lv_indexMission), 1, 3);
            if ((lv_prefixPrevious != "") && (lv_prefixPrevious != lv_prefix)) {
                gf_Debug_CreateBriefingMissionButtonNewLine();
            }

            lv_prefixPrevious = lv_prefix;
            gf_Debug_CreateBriefingMissionButton(lv_indexMission);
        }    
    }
    gf_Debug_CreateBriefingMissionButtonNewLine();
    libCamp_gf_CreateDialogItemInGrid(gv_debug_BriefingDialog, c_triggerControlTypeButton, c_anchorBottomRight, 0.0, 0.0, 4.0, 1.0, StringExternal("Param/Value/F4DB8A5C"));
    gv_debug_BriefingButtonClose = DialogControlLastCreated();
    libCamp_gf_SetDialogSizeInGrid(gv_debug_BriefingDialog, gv_debug_BriefingMissioniButtonXMax, IntToFixed((gv_debug_BriefingMissioniButtonY + 2)));
}

void gf_Debug_CreateTVNewsMissionButton (string lp_news) {
    // Variable Declarations
    const fixed lv_width = 4.0;
    fixed lv_height;
    fixed lv_rX;
    fixed lv_rY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_height = 1.2;

    // Implementation
    gv_debug_TVNewsMissioniButtonNewLine = false;
    lv_rX = (0.3 + ((lv_width - 0.03) * IntToFixed(gv_debug_TVNewsMissioniButtonX)));
    lv_rY = (IntToFixed(gv_debug_TVNewsMissioniButtonY) * 1.25);
    libCamp_gf_CreateDialogItemInGrid(gv_debug_TVNewsDialog, c_triggerControlTypeButton, c_anchorTopLeft, lv_rX, lv_rY, lv_width, lv_height, StringToText((lp_news)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TVNewsDebugButtonText", PlayerGroupAll());
    gv_debug_TVNewsMissioniButton[gv_debug_TVNewsMissioniButtonCount] = DialogControlLastCreated();
    DataTableSetString(true, ("DEBUG_TVNews_Button_" + IntToString(gv_debug_TVNewsMissioniButtonCount)), (lp_news));
    gv_debug_TVNewsMissioniButtonCount += 1;
    if ((gf_TVNewsTriggerCallback(lp_news) == null)) {
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    gv_debug_TVNewsMissioniButtonX += 1;
    if (((lv_rX + lv_width) > gv_debug_TVNewsMissioniButtonXMax)) {
        gv_debug_TVNewsMissioniButtonXMax = (lv_rX + lv_width);
    }

}

void gf_Debug_CreateTVNewsMissionButtonNewLine () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_debug_TVNewsMissioniButtonNewLine == true)) {
        return ;
    }

    gv_debug_TVNewsMissioniButtonNewLine = true;
    gv_debug_TVNewsMissioniButtonX = 0;
    gv_debug_TVNewsMissioniButtonY += 1;
}

void gf_Debug_CreateTVNewsDialog () {
    // Variable Declarations
    int lv_x;
    int lv_y;
    string lv_indexNews;
    string lv_prefix;
    string lv_prefixPrevious;

    // Automatic Variable Declarations
    string autoEBC37EBB_userType;
    int autoEBC37EBB_i;

    // Variable Initialization
    lv_prefix = "";
    lv_prefixPrevious = "";

    // Implementation
    if ((gv_debug_TVNewsDialog != c_invalidDialogId)) {
        return ;
    }

    libCamp_gf_CreateDialogInGrid(16.0, 12.0, c_anchorCenter, 0.0, 0.0, true);
    gv_debug_TVNewsDialog = DialogLastCreated();
    libCamp_gf_CreateDialogItemInGrid(gv_debug_TVNewsDialog, c_triggerControlTypeLabel, c_anchorTop, 0.0, 0.0, 10.0, 2.0, StringExternal("Param/Value/BA1734B0"));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportTitle", PlayerGroupAll());
    gv_debug_TVNewsMissioniButtonX = 0;
    gv_debug_TVNewsMissioniButtonXMax = 16.0;
    gv_debug_TVNewsMissioniButtonY = 2;
    autoEBC37EBB_userType = "TStory01TVNews";
    autoEBC37EBB_i = 1;
    for ( ; autoEBC37EBB_i <= UserDataInstanceCount(autoEBC37EBB_userType) ; autoEBC37EBB_i += 1 ) {
        lv_indexNews = UserDataInstance(autoEBC37EBB_userType, autoEBC37EBB_i);
        lv_prefix = StringSub((lv_indexNews), 1, 3);
        if ((lv_prefixPrevious != "") && (lv_prefixPrevious != lv_prefix)) {
            gf_Debug_CreateTVNewsMissionButtonNewLine();
        }

        lv_prefixPrevious = lv_prefix;
        gf_Debug_CreateTVNewsMissionButton(lv_indexNews);
    }
    gf_Debug_CreateTVNewsMissionButtonNewLine();
    libCamp_gf_CreateDialogItemInGrid(gv_debug_TVNewsDialog, c_triggerControlTypeButton, c_anchorBottomRight, 0.0, 0.3, 4.0, 1.0, StringExternal("Param/Value/6DD62B66"));
    gv_debug_TVNewsButtonClose = DialogControlLastCreated();
    libCamp_gf_SetDialogSizeInGrid(gv_debug_TVNewsDialog, (gv_debug_TVNewsMissioniButtonXMax + 0.3), ((IntToFixed(gv_debug_TVNewsMissioniButtonY) * 1.25) + 2.0));
}

void gf_DisplayBlizzconScreen () {
    // Variable Declarations
    int lv_dlgBG;
    int lv_dlgText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dlgBG = c_invalidDialogId;
    lv_dlgText = c_invalidDialogId;

    // Implementation
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, false);
    DialogCreate(2048, 1026, c_anchorCenter, 0, 0, true);
    lv_dlgBG = DialogLastCreated();
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\thanksforplaying09.dds", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TriggerExecute(gt_BlizzconScreenWait, true, true);
    GameOver(1, c_gameOverVictory, false, false);
}

void gf_Debug_RoomChangeTimerStart () {
    // Variable Declarations
    text lv_tempText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsDebugOptionSet("RoomSwitchTime", 1) == true)) {
        gv_debug_RoomChangeTimerDone = false;
        lv_tempText = StringToText("#TRESET");
    }

}

void gf_Debug_RoomChangeTimerStart2 (int lp_room, bool lp_display) {
    // Variable Declarations
    text lv_tempText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsDebugOptionSet("RoomSwitchTime", 1) == true)) {
        if ((gv_debug_RoomChangeTimerDone == false)) {
            gv_debug_RoomChangeTimerDone = true;
            gv_debug_RoomChangeTimerMessage = StringToText("#TELAPSED");
        }

        if ((lp_display == true)) {
            TriggerDebugOutput(1, (StringExternal("Param/Value/6B2389E9") + gf_RoomName(lp_room) + StringExternal("Param/Value/9A82A01B") + gv_debug_RoomChangeTimerMessage + StringExternal("Param/Value/A05FF17F")), true);
        }

    }

}

void gf_DebugOutputSetUnitsSingle (int lp_room) {
    // Variable Declarations
    unitgroup lv_units;
    unit lv_unit;
    text lv_output;

    // Automatic Variable Declarations
    unitgroup auto75C0B0D3_g;
    int auto75C0B0D3_u;

    // Variable Initialization
    lv_units = UnitGroupEmpty();
    lv_output = StringToText("");

    // Implementation
    lv_output = (StringExternal("Param/Value/B48BC2F4") + gf_RoomName(lp_room) + StringExternal("Param/Value/3E02CDE4"));
    lv_units = gf_RoomUnits(lp_room);
    auto75C0B0D3_g = lv_units;
    auto75C0B0D3_u = UnitGroupCount(auto75C0B0D3_g, c_unitCountAll);
    for (;; auto75C0B0D3_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto75C0B0D3_g, auto75C0B0D3_u);
        if (lv_unit == null) { break; }
        lv_output = (lv_output + StringToText((UnitGetType(lv_unit))) + StringExternal("Param/Value/3F38A323"));
    }
    lv_output = (lv_output + StringExternal("Param/Value/831DBE26"));
    TriggerDebugOutput(2, lv_output, true);
}

string gf_ActorStringID (int lp_actorID) {
    // Automatic Variable Declarations
    // Implementation
    return gv_actors[(lp_actorID)].lv_stringID;
}

text gf_ActorName (int lp_actorID) {
    // Automatic Variable Declarations
    // Implementation
    return gv_actors[(lp_actorID)].lv_name;
}

point gf_ActorPoint (int lp_roomID, int lp_actorID, int lp_toActorID) {
    // Variable Declarations
    unit lv_room;
    string lv_attachment;
    string lv_actorName1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attachment = "";
    lv_actorName1 = "";

    // Implementation
    lv_attachment = ("Pos_" + gf_ActorStringID(lp_actorID));
    if ((lp_toActorID != ge_ActorID_ActorNone)) {
        lv_attachment = (lv_attachment + "To" + gf_ActorStringID(lp_toActorID));
    }

    lv_room = gf_RoomUnit(lp_roomID);
    return UnitGetAttachmentPoint(lv_room, lv_attachment);
}

bool gf_ActorIsEnabledInRoom (int lp_actor, int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_actor == ge_ActorID_ActorRaynor)) {
        if (((lp_room == ge_RoomID_RoomChar) || (lp_room == ge_RoomID_RoomGalaxy) || (lp_room == ge_RoomID_RoomLabResearch) || (lp_room == ge_RoomID_RoomMercenary) || (lp_room == ge_RoomID_RoomMissionArchieves) || (lp_room == ge_RoomID_RoomObservatory) || (lp_room == ge_RoomID_RoomTechPurchase) || (lp_room == ge_RoomID_RoomVoid))) {
            return false;
        }

        return true;
    }

    return (gf_ActorRoom(lp_actor) == lp_room);
}

bool gf_ActorIsEnabled (int lp_actor) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto8A180F8D_ae;
    const int auto8A180F8D_ai = 1;

    // Variable Initialization

    // Implementation
    auto8A180F8D_ae = gv_c_ROOM_LAST;
    lv_index = gv_c_ROOM_FIRST;
    for ( ; ( (auto8A180F8D_ai >= 0 && lv_index <= auto8A180F8D_ae) || (auto8A180F8D_ai < 0 && lv_index >= auto8A180F8D_ae) ) ; lv_index += auto8A180F8D_ai ) {
        if ((gf_RoomIsEnabled(gf_RoomFromIndex(lv_index)) == true) && (gf_RoomLocation(gf_RoomFromIndex(lv_index)) == gv_currentLocation) && (gf_ActorIsEnabledInRoom(lp_actor, gf_RoomFromIndex(lv_index)) == true)) {
            return true;
        }

    }
    return false;
}

int gf_ActorID (unit lp_actorUnit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoC1AE7369_ae;
    const int autoC1AE7369_ai = 1;

    // Variable Initialization

    // Implementation
    autoC1AE7369_ae = gv_c_ACTOR_LAST;
    lv_index = gv_c_ACTOR_FIRST;
    for ( ; ( (autoC1AE7369_ai >= 0 && lv_index <= autoC1AE7369_ae) || (autoC1AE7369_ai < 0 && lv_index >= autoC1AE7369_ae) ) ; lv_index += autoC1AE7369_ai ) {
        if ((lp_actorUnit == gv_actors[lv_index].lv_unit)) {
            return gv_actors[lv_index].lv_actorID;
        }

    }
    return ge_ActorID_ActorNone;
}

unit gf_ActorUnit (int lp_iD) {
    // Automatic Variable Declarations
    // Implementation
    return gv_actors[(lp_iD)].lv_unit;
}

int gf_ActorRoom (int lp_iD) {
    // Automatic Variable Declarations
    // Implementation
    return gv_actors[(lp_iD)].lv_room;
}

bool gf_ActorWithFidget (int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    return ((gv_actors[(lp_actor)].lv_type == ge_ActorType_BackgroundWithFidget) || (gv_actors[(lp_actor)].lv_type == ge_ActorType_MainWithFidget));
}

bool gf_ActorWithConversation (int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_actors[(lp_actor)].lv_type == ge_ActorType_MainWithConversation) && (gf_ActorConversation(lp_actor) != null)) {
        return true;
    }

    return false;
}

string gf_ActorConversation (int lp_actorID) {
    // Variable Declarations
    string lv_convo;

    // Automatic Variable Declarations
    int autoF225BA17_val;
    int auto02751DAF_val;
    int auto8E412F9D_val;
    int auto385FE8B2_val;
    int autoD3682C99_val;
    int auto718B0C4D_val;
    int autoB6EA26D5_val;
    int auto1C7E68F9_val;

    // Variable Initialization

    // Implementation
    autoF225BA17_val = lp_actorID;
    if (autoF225BA17_val == ge_ActorID_ActorHanson) {
        auto02751DAF_val = gf_ActorRoom(lp_actorID);
        if (auto02751DAF_val == ge_RoomID_RoomBridge) {
            lv_convo = "BridgeHanson";
        }
        else if (auto02751DAF_val == ge_RoomID_RoomLab) {
            lv_convo = "LabHanson";
        }
        else {
        }
    }
    else if (autoF225BA17_val == ge_ActorID_ActorHorner) {
        auto8E412F9D_val = gf_ActorRoom(lp_actorID);
        if (auto8E412F9D_val == ge_RoomID_RoomBridge) {
            lv_convo = "BridgeHorner";
        }
        else {
        }
    }
    else if (autoF225BA17_val == ge_ActorID_ActorSwann) {
        auto385FE8B2_val = gf_ActorRoom(lp_actorID);
        if (auto385FE8B2_val == ge_RoomID_RoomArmory) {
            lv_convo = "ArmorySwann";
        }
        else {
        }
    }
    else if (autoF225BA17_val == ge_ActorID_ActorTosh) {
        autoD3682C99_val = gf_ActorRoom(lp_actorID);
        if (autoD3682C99_val == ge_RoomID_RoomBridge) {
            lv_convo = "BridgeTosh";
        }
        else if (autoD3682C99_val == ge_RoomID_RoomCantina) {
            lv_convo = "CantinaTosh";
        }
        else {
        }
    }
    else if (autoF225BA17_val == ge_ActorID_ActorTychus) {
        auto718B0C4D_val = gf_ActorRoom(lp_actorID);
        if (auto718B0C4D_val == ge_RoomID_RoomBridge) {
            lv_convo = "BridgeTychus";
        }
        else if (auto718B0C4D_val == ge_RoomID_RoomCantina) {
            lv_convo = "CantinaTychus";
        }
        else if (auto718B0C4D_val == ge_RoomID_RoomChar) {
            lv_convo = "CharTychus";
        }
        else if (auto718B0C4D_val == ge_RoomID_RoomMarSara) {
            lv_convo = "MarSaraTychus";
        }
        else {
        }
    }
    else if (autoF225BA17_val == ge_ActorID_ActorValerian) {
        lv_convo = "Valerian";
    }
    else if (autoF225BA17_val == ge_ActorID_ActorWarfield) {
        autoB6EA26D5_val = gf_ActorRoom(lp_actorID);
        if (autoB6EA26D5_val == ge_RoomID_RoomChar) {
            lv_convo = "CharWarfield";
        }
        else {
        }
    }
    else if (autoF225BA17_val == ge_ActorID_ActorWarfieldAOD) {
        auto1C7E68F9_val = gf_ActorRoom(lp_actorID);
        if (auto1C7E68F9_val == ge_RoomID_RoomChar) {
            lv_convo = "CharWarfield";
        }
        else {
        }
    }
    else {
    }
    if ((ConversationDataCanRun(lv_convo, false) == false)) {
        lv_convo = null;
    }

    return lv_convo;
}

string gf_ActorLightingAnim (int lp_actorID, int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int auto749F2054_val;

    // Implementation
    auto749F2054_val = lp_actorID;
    if (auto749F2054_val == ge_ActorID_ActorRaynor) {
        return gf_ActorLightingAnimRaynor(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else if (auto749F2054_val == ge_ActorID_ActorRaynorMarine) {
        return gf_ActorLightingAnimRaynorMarine(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else if (auto749F2054_val == ge_ActorID_ActorTychus) {
        return gf_ActorLightingAnimTychus(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else if (auto749F2054_val == ge_ActorID_ActorHanson) {
        return gf_ActorLightingAnimHanson(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else if (auto749F2054_val == ge_ActorID_ActorTosh) {
        return gf_ActorLightingAnimTosh(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else if (auto749F2054_val == ge_ActorID_ActorSwann) {
        return gf_ActorLightingAnimSwann(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else if (auto749F2054_val == ge_ActorID_ActorHorner) {
        return gf_ActorLightingAnimHorner(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else if (auto749F2054_val == ge_ActorID_ActorStetmann) {
        return gf_ActorLightingAnimStettmann(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else if (auto749F2054_val == ge_ActorID_ActorWarfield) {
        return gf_ActorLightingAnimWarfield(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else if (auto749F2054_val == ge_ActorID_ActorWarfieldAOD) {
        return gf_ActorLightingAnimWarfieldAOD(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimRaynor (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int autoDB0CE9A5_val;
    int autoE3B78DF9_val;
    int autoA6E71B2F_val;
    int auto899BA66A_val;
    int autoC554CBC2_val;
    int autoFC1B6053_val;
    int autoFAE59D5C_val;
    int autoA0CA5BB3_val;
    int auto313C4D3F_val;
    int auto2C955E6D_val;

    // Implementation
    autoDB0CE9A5_val = lp_roomID;
    if (autoDB0CE9A5_val == ge_RoomID_RoomMarSara) {
        autoE3B78DF9_val = lp_lightingType;
        if (autoE3B78DF9_val == ge_ActorLightingType_Scene) {
            return "Lighting 01 E";
        }
        else {
        }
    }
    else if (autoDB0CE9A5_val == ge_RoomID_RoomBridge) {
        autoA6E71B2F_val = lp_lightingType;
        if (autoA6E71B2F_val == ge_ActorLightingType_Default) {
            return "";
        }
        else if (autoA6E71B2F_val == ge_ActorLightingType_Convo) {
            auto899BA66A_val = lp_toActorID;
            if (auto899BA66A_val == ge_ActorID_ActorTychus) {
                return "Lighting 02 B";
            }
            else if (auto899BA66A_val == ge_ActorID_ActorHorner) {
                return "Lighting 02 C";
            }
            else if (auto899BA66A_val == ge_ActorID_ActorHanson) {
                return "Lighting 02 B";
            }
            else if (auto899BA66A_val == ge_ActorID_ActorTosh) {
                return "Lighting 02 B";
            }
            else {
            }
        }
        else if (autoA6E71B2F_val == ge_ActorLightingType_Scene) {
            return "Lighting 02 E";
        }
        else {
        }
    }
    else if (autoDB0CE9A5_val == ge_RoomID_RoomArmory) {
        autoC554CBC2_val = lp_lightingType;
        if (autoC554CBC2_val == ge_ActorLightingType_Default) {
            return "Lighting 03 A";
        }
        else if (autoC554CBC2_val == ge_ActorLightingType_Convo) {
            autoFC1B6053_val = lp_toActorID;
            if (autoFC1B6053_val == ge_ActorID_ActorSwann) {
                return "Lighting 03 B";
            }
            else {
            }
        }
        else if (autoC554CBC2_val == ge_ActorLightingType_Scene) {
            return "Lighting 03 A";
        }
        else {
        }
    }
    else if (autoDB0CE9A5_val == ge_RoomID_RoomCantina) {
        autoFAE59D5C_val = lp_lightingType;
        if (autoFAE59D5C_val == ge_ActorLightingType_Default) {
            return "Lighting 04 A";
        }
        else if (autoFAE59D5C_val == ge_ActorLightingType_Convo) {
            autoA0CA5BB3_val = lp_toActorID;
            if (autoA0CA5BB3_val == ge_ActorID_ActorTychus) {
                return "Lighting 04 B";
            }
            else if (autoA0CA5BB3_val == ge_ActorID_ActorTosh) {
                return "Lighting 04 C";
            }
            else if (autoA0CA5BB3_val == ge_ActorID_ActorBralik) {
                return "Lighting 04 D";
            }
            else {
            }
        }
        else if (autoFAE59D5C_val == ge_ActorLightingType_Scene) {
            return "Lighting 04 A";
        }
        else {
        }
    }
    else if (autoDB0CE9A5_val == ge_RoomID_RoomLab) {
        auto313C4D3F_val = lp_lightingType;
        if (auto313C4D3F_val == ge_ActorLightingType_Default) {
            if ((gf_LabRaynorHome() == PointFromId(211))) {
                return "Lighting 05 A";
            }
            else {
                return "Lighting 05 E";
            }
        }
        else if (auto313C4D3F_val == ge_ActorLightingType_Convo) {
            auto2C955E6D_val = lp_toActorID;
            if (auto2C955E6D_val == ge_ActorID_ActorHanson) {
                return "Lighting 05 C";
            }
            else if (auto2C955E6D_val == ge_ActorID_ActorStetmann) {
                return "Lighting 05 B";
            }
            else if (auto2C955E6D_val == ge_ActorID_ActorAdjutantConfederate) {
                return "Lighting 05 D";
            }
            else {
            }
        }
        else if (auto313C4D3F_val == ge_ActorLightingType_Scene) {
            return "Lighting 05 E";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimRaynorMarine (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int auto7347D469_val;
    int auto7DE5CACE_val;
    int autoA49BEBCF_val;

    // Implementation
    auto7347D469_val = lp_roomID;
    if (auto7347D469_val == ge_RoomID_RoomChar) {
        auto7DE5CACE_val = lp_lightingType;
        if (auto7DE5CACE_val == ge_ActorLightingType_Convo) {
            autoA49BEBCF_val = lp_toActorID;
            if (autoA49BEBCF_val == ge_ActorID_ActorTychus) {
                return "Lighting 09 B";
            }
            else if (autoA49BEBCF_val == ge_ActorID_ActorWarfield) {
                return "Lighting 09 C";
            }
            else if (autoA49BEBCF_val == ge_ActorID_ActorWarfieldAOD) {
                return "Lighting 09 C";
            }
            else {
            }
        }
        else if (auto7DE5CACE_val == ge_ActorLightingType_Scene) {
            return "Lighting 09 E";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimTychus (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int autoE10754D7_val;
    int auto3AC94017_val;
    int autoFC6F8F79_val;
    int auto60F17AB4_val;
    int autoE7EB6316_val;

    // Implementation
    autoE10754D7_val = lp_roomID;
    if (autoE10754D7_val == ge_RoomID_RoomMarSara) {
        auto3AC94017_val = lp_lightingType;
        if (auto3AC94017_val == ge_ActorLightingType_Default) {
            return "Lighting 01 A";
        }
        else if (auto3AC94017_val == ge_ActorLightingType_Convo) {
            return "Lighting 01 B";
        }
        else {
        }
    }
    else if (autoE10754D7_val == ge_RoomID_RoomBridge) {
        autoFC6F8F79_val = lp_lightingType;
        if (autoFC6F8F79_val == ge_ActorLightingType_Default) {
            return "Lighting 02 A";
        }
        else if (autoFC6F8F79_val == ge_ActorLightingType_Convo) {
            return "Lighting 02 A";
        }
        else {
        }
    }
    else if (autoE10754D7_val == ge_RoomID_RoomCantina) {
        auto60F17AB4_val = lp_lightingType;
        if (auto60F17AB4_val == ge_ActorLightingType_Convo) {
            return "Lighting 04 B";
        }
        else {
        }
    }
    else if (autoE10754D7_val == ge_RoomID_RoomChar) {
        autoE7EB6316_val = lp_lightingType;
        if (autoE7EB6316_val == ge_ActorLightingType_Convo) {
            return "Lighting 09 B";
        }
        else if (autoE7EB6316_val == ge_ActorLightingType_Scene) {
            return "Lighting 09 E";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimHanson (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int autoCDD51095_val;
    int auto6ABEBB5B_val;
    int auto678D19BE_val;

    // Implementation
    autoCDD51095_val = lp_roomID;
    if (autoCDD51095_val == ge_RoomID_RoomBridge) {
        auto6ABEBB5B_val = lp_lightingType;
        if (auto6ABEBB5B_val == ge_ActorLightingType_Default) {
            return "Lighting 02 A";
        }
        else if (auto6ABEBB5B_val == ge_ActorLightingType_Convo) {
            return "Lighting 02 C";
        }
        else if (auto6ABEBB5B_val == ge_ActorLightingType_Scene) {
            return "Lighting 02 E";
        }
        else {
        }
    }
    else if (autoCDD51095_val == ge_RoomID_RoomLab) {
        auto678D19BE_val = lp_lightingType;
        if (auto678D19BE_val == ge_ActorLightingType_Default) {
            return "Lighting 05 A";
        }
        else if (auto678D19BE_val == ge_ActorLightingType_Convo) {
            return "Lighting 05 B";
        }
        else if (auto678D19BE_val == ge_ActorLightingType_Scene) {
            return "Lighting 05 A";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimTosh (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int auto264FA331_val;
    int auto27AFF032_val;
    int auto36C4191B_val;

    // Implementation
    auto264FA331_val = lp_roomID;
    if (auto264FA331_val == ge_RoomID_RoomBridge) {
        auto27AFF032_val = lp_lightingType;
        if (auto27AFF032_val == ge_ActorLightingType_Default) {
            return "Lighting 02 A";
        }
        else if (auto27AFF032_val == ge_ActorLightingType_Convo) {
            return "Lighting 02 C";
        }
        else if (auto27AFF032_val == ge_ActorLightingType_Scene) {
            return "Lighting 02 E";
        }
        else {
        }
    }
    else if (auto264FA331_val == ge_RoomID_RoomCantina) {
        auto36C4191B_val = lp_lightingType;
        if (auto36C4191B_val == ge_ActorLightingType_Convo) {
            return "Lighting 04 B";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimSwann (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int auto867ED7CE_val;
    int autoCCC4E723_val;

    // Implementation
    auto867ED7CE_val = lp_roomID;
    if (auto867ED7CE_val == ge_RoomID_RoomArmory) {
        autoCCC4E723_val = lp_lightingType;
        if (autoCCC4E723_val == ge_ActorLightingType_Default) {
            return "Lighting 03 A";
        }
        else if (autoCCC4E723_val == ge_ActorLightingType_Convo) {
            return "Lighting 03 B";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimHorner (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int auto1A24A050_val;
    int auto95ABD4DD_val;

    // Implementation
    auto1A24A050_val = lp_roomID;
    if (auto1A24A050_val == ge_RoomID_RoomBridge) {
        auto95ABD4DD_val = lp_lightingType;
        if (auto95ABD4DD_val == ge_ActorLightingType_Convo) {
            return "Lighting 02 C";
        }
        else if (auto95ABD4DD_val == ge_ActorLightingType_Scene) {
            return "Lighting 02 E";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimStettmann (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int auto742723AA_val;
    int autoC9106FFE_val;
    int auto697FFCB8_val;

    // Implementation
    auto742723AA_val = lp_roomID;
    if (auto742723AA_val == ge_RoomID_RoomBridge) {
        autoC9106FFE_val = lp_lightingType;
        if (autoC9106FFE_val == ge_ActorLightingType_Default) {
            return "Lighting 02 A";
        }
        else {
        }
    }
    else if (auto742723AA_val == ge_RoomID_RoomLab) {
        auto697FFCB8_val = lp_lightingType;
        if (auto697FFCB8_val == ge_ActorLightingType_Default) {
            return "Lighting 05 A";
        }
        else if (auto697FFCB8_val == ge_ActorLightingType_Convo) {
            return "Lighting 05 B";
        }
        else if (auto697FFCB8_val == ge_ActorLightingType_Scene) {
            return "Lighting 05 E";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimWarfield (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int autoC976AB1B_val;
    int autoF563AAC2_val;

    // Implementation
    autoC976AB1B_val = lp_roomID;
    if (autoC976AB1B_val == ge_RoomID_RoomChar) {
        autoF563AAC2_val = lp_lightingType;
        if (autoF563AAC2_val == ge_ActorLightingType_Convo) {
            return "Lighting 09 C";
        }
        else if (autoF563AAC2_val == ge_ActorLightingType_Scene) {
            return "Lighting 09 E";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimWarfieldAOD (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    // Automatic Variable Declarations
    int auto5D22E3EA_val;
    int auto5C0B06E1_val;

    // Implementation
    auto5D22E3EA_val = lp_roomID;
    if (auto5D22E3EA_val == ge_RoomID_RoomChar) {
        auto5C0B06E1_val = lp_lightingType;
        if (auto5C0B06E1_val == ge_ActorLightingType_Convo) {
            return "Lighting 09 C";
        }
        else if (auto5C0B06E1_val == ge_ActorLightingType_Scene) {
            return "Lighting 09 E";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorRoomAnim (int lp_actor, int lp_room, int lp_index) {
    // Automatic Variable Declarations
    int auto6B5829D3_val;
    int auto9BAC5067_val;
    int autoA9C2B4F7_val;
    int autoA1D6649C_val;
    int auto780C38DC_val;
    int autoF2482213_val;
    int auto1F33ED28_val;
    int autoC6ACE3DA_val;
    int autoD4687776_val;
    int autoF8733A66_val;
    int auto48389DB8_val;
    int autoC0E82B21_val;
    int auto65644E90_val;
    int autoBC481815_val;
    int autoC5B88065_val;
    int auto3EF2965B_val;
    int autoD08D15AF_val;
    int auto430003A0_val;
    int auto91356838_val;

    // Implementation
    auto6B5829D3_val = lp_actor;
    if (auto6B5829D3_val == ge_ActorID_ActorRaynor) {
        auto9BAC5067_val = lp_room;
        if (auto9BAC5067_val == ge_RoomID_RoomMarSara) {
            autoA9C2B4F7_val = lp_index;
            if (autoA9C2B4F7_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_RaynorCommander_BarAnims\\SM_RaynorCommander_BarAnims.m3a";
            }
            else {
            }
        }
        else if (auto9BAC5067_val == ge_RoomID_RoomBridge) {
            autoA1D6649C_val = lp_index;
            if (autoA1D6649C_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_RaynorCommander_BridgeAnims\\SM_RaynorCommander_BridgeAnims.m3a";
            }
            else {
            }
        }
        else if (auto9BAC5067_val == ge_RoomID_RoomCantina) {
            auto780C38DC_val = lp_index;
            if (auto780C38DC_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_RaynorCommander_CantinaAnims\\SM_RaynorCommander_CantinaAnims.m3a";
            }
            else {
            }
        }
        else if (auto9BAC5067_val == ge_RoomID_RoomLab) {
            autoF2482213_val = lp_index;
            if (autoF2482213_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_RaynorCommander_LabAnims\\SM_RaynorCommander_LabAnims.m3a";
            }
            else {
            }
        }
        else {
        }
    }
    else if (auto6B5829D3_val == ge_ActorID_ActorRaynorMarine) {
        auto1F33ED28_val = lp_room;
        if (auto1F33ED28_val == ge_RoomID_RoomChar) {
            autoC6ACE3DA_val = lp_index;
            if (autoC6ACE3DA_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_RaynorMarine_CharAnims\\SM_RaynorMarine_CharAnims.m3a";
            }
            else {
            }
        }
        else {
        }
    }
    else if (auto6B5829D3_val == ge_ActorID_ActorStetmann) {
        autoD4687776_val = lp_room;
        if (autoD4687776_val == ge_RoomID_RoomLab) {
            autoF8733A66_val = lp_index;
            if (autoF8733A66_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_LabTech01_LabAnims\\SM_LabTech01_LabAnims.m3a";
            }
            else {
            }
        }
        else {
        }
    }
    else if (auto6B5829D3_val == ge_ActorID_ActorTychus) {
        auto48389DB8_val = lp_room;
        if (auto48389DB8_val == ge_RoomID_RoomMarSara) {
            autoC0E82B21_val = lp_index;
            if (autoC0E82B21_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_Marine_01_BarAnims\\SM_Marine_01_BarAnims.m3a";
            }
            else if (autoC0E82B21_val == 2) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_Marine01_ConversationAnims\\SM_Marine01_ConversationAnims.m3a";
            }
            else {
            }
        }
        else if (auto48389DB8_val == ge_RoomID_RoomBridge) {
            auto65644E90_val = lp_index;
            if (auto65644E90_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_Marine01_ConversationAnims\\SM_Marine01_ConversationAnims.m3a";
            }
            else {
            }
        }
        else if (auto48389DB8_val == ge_RoomID_RoomCantina) {
            autoBC481815_val = lp_index;
            if (autoBC481815_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_Marine01_ConversationAnims\\SM_Marine01_ConversationAnims.m3a";
            }
            else {
            }
        }
        else if (auto48389DB8_val == ge_RoomID_RoomChar) {
            autoC5B88065_val = lp_index;
            if (autoC5B88065_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_Marine_01_CharAnims\\SM_Marine_01_CharAnims.m3a";
            }
            else {
            }
        }
        else {
        }
    }
    else if (auto6B5829D3_val == ge_ActorID_ActorWarfield) {
        auto3EF2965B_val = lp_room;
        if (auto3EF2965B_val == ge_RoomID_RoomChar) {
            autoD08D15AF_val = lp_index;
            if (autoD08D15AF_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_Marine02_CharAnims\\SM_Marine02_CharAnims.m3a";
            }
            else {
            }
        }
        else {
        }
    }
    else if (auto6B5829D3_val == ge_ActorID_ActorWarfieldAOD) {
        auto430003A0_val = lp_room;
        if (auto430003A0_val == ge_RoomID_RoomChar) {
            auto91356838_val = lp_index;
            if (auto91356838_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_Marine02AOD_CharAnims\\SM_Marine02AOD_CharAnims.m3a";
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return null;
}

point gf_RaynorCantinaHome () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_cantinaState == ge_CantinaStates_Broken)) {
        return PointFromId(342);
    }
    else {
        if ((gf_RaynorCantinaHome2() == true)) {
            return PointFromId(980);
        }
        else {
            return PointFromId(154);
        }
    }
}

bool gf_RaynorCantinaHome2 () {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_cantinaState == ge_CantinaStates_Broken) || (libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == true))) {
        return true;
    }
    else {
        return false;
    }
}

point gf_LabRaynorHome () {
    // Automatic Variable Declarations
    // Implementation
    if (((libWoLC_gf_MissionStatusCheck("TZeratul01", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul02", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul03", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul04", libWoLC_ge_MissionStatus_Available) == true))) {
        return PointFromId(775);
    }
    else {
        return PointFromId(211);
    }
}

void gf_InitActorSingle (int lp_actorID, string lp_stringID, text lp_name, unit lp_unit, int lp_type, int lp_cantinaBGType, string lp_convoStateIndex) {
    // Automatic Variable Declarations
    // Implementation
    gv_actors[(lp_actorID)].lv_actorID = lp_actorID;
    gv_actors[(lp_actorID)].lv_stringID = lp_stringID;
    gv_actors[(lp_actorID)].lv_name = lp_name;
    gv_actors[(lp_actorID)].lv_unit = lp_unit;
    gv_actors[(lp_actorID)].lv_type = lp_type;
    gv_actors[(lp_actorID)].lv_cantinaBGType = lp_cantinaBGType;
    gv_actors[(lp_actorID)].lv_cantinaBGLocID = 0;
    gv_actors[(lp_actorID)].lv_convoStateIndex = lp_convoStateIndex;
    gv_actors[(lp_actorID)].lv_preloaded = false;
    gv_actors[(lp_actorID)].lv_roomAnim[0] = null;
}

void gf_InitActors () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto869F95E1_ae;
    const int auto869F95E1_ai = 1;
    int auto7189C51B_ae;
    const int auto7189C51B_ai = 1;
    int auto2E810E55_ae;
    const int auto2E810E55_ai = 1;

    // Variable Initialization

    // Implementation
    gf_InitActorSingle(ge_ActorID_ActorAdjutantConfederate, "Adjutant", StringExternal("Param/Value/26456811"), UnitFromId(430), ge_ActorType_BackgroundWithFidget, ge_ActorCantinaBGType_None, "Characters|CharConfederateAdjutant");
    gf_InitActorSingle(ge_ActorID_ActorAdjutant, "Adjutant", StringExternal("Param/Value/B390B217"), UnitFromId(497), ge_ActorType_BackgroundNonInteractive, ge_ActorCantinaBGType_None, "Characters|CharAdjutant");
    gf_InitActorSingle(ge_ActorID_ActorAnnabelle, "Annabelle", StringExternal("Param/Value/B442BB75"), UnitFromId(178), ge_ActorType_BackgroundWithFidget, ge_ActorCantinaBGType_Possible, "Characters|CharAnnabelle");
    gf_InitActorSingle(ge_ActorID_ActorBralik, "Bralik", StringExternal("Param/Value/9B4CA473"), UnitFromId(180), ge_ActorType_BackgroundWithFidget, ge_ActorCantinaBGType_Possible, "Characters|CharBralik");
    gf_InitActorSingle(ge_ActorID_ActorCade, "Cade", StringExternal("Param/Value/FD6397AB"), UnitFromId(411), ge_ActorType_BackgroundWithFidget, ge_ActorCantinaBGType_Possible, "Characters|CharCade");
    gf_InitActorSingle(ge_ActorID_ActorCooperBarTender, "Cooper", StringExternal("Param/Value/B588363E"), UnitFromId(188), ge_ActorType_BackgroundWithFidget, ge_ActorCantinaBGType_None, "Characters|CharCooper");
    gf_InitActorSingle(ge_ActorID_ActorStetmann, "Cowin", StringExternal("Param/Value/86EA9124"), UnitFromId(403), ge_ActorType_BackgroundWithFidget, ge_ActorCantinaBGType_None, "Characters|CharStetmann");
    gf_InitActorSingle(ge_ActorID_ActorEarl, "Earl", StringExternal("Param/Value/223BCB62"), UnitFromId(412), ge_ActorType_BackgroundWithFidget, ge_ActorCantinaBGType_Possible, "Characters|CharEarl");
    gf_InitActorSingle(ge_ActorID_ActorHall, "Hall", StringExternal("Param/Value/9C00717D"), UnitFromId(413), ge_ActorType_BackgroundNonInteractive, ge_ActorCantinaBGType_None, "Characters|CharHall");
    gf_InitActorSingle(ge_ActorID_ActorHanson, "Hanson", StringExternal("Param/Value/CD73EFEC"), UnitFromId(186), ge_ActorType_MainWithConversation, ge_ActorCantinaBGType_None, "Characters|CharHanson");
    gf_InitActorSingle(ge_ActorID_ActorHillMercContact, "Hill", StringExternal("Param/Value/9A468746"), UnitFromId(343), ge_ActorType_BackgroundWithFidget, ge_ActorCantinaBGType_None, "Characters|CharHill");
    gf_InitActorSingle(ge_ActorID_ActorHorner, "Horner", StringExternal("Param/Value/EE22F388"), UnitFromId(339), ge_ActorType_MainWithConversation, ge_ActorCantinaBGType_None, "Characters|CharHorner");
    gf_InitActorSingle(ge_ActorID_ActorKachinsky, "Kachinsky", StringExternal("Param/Value/53EC5C77"), UnitFromId(414), ge_ActorType_BackgroundWithFidget, ge_ActorCantinaBGType_Possible, "Characters|CharKachinsky");
    gf_InitActorSingle(ge_ActorID_ActorRaynor, "Raynor", StringExternal("Param/Value/D1EB5F97"), UnitFromId(424), ge_ActorType_MainWithFidget, ge_ActorCantinaBGType_None, "Characters|CharRaynor");
    gf_InitActorSingle(ge_ActorID_ActorRaynorMarine, "Raynor", StringExternal("Param/Value/4FCB4DBD"), UnitFromId(353), ge_ActorType_MainWithFidget, ge_ActorCantinaBGType_None, "Characters|CharRaynor");
    gf_InitActorSingle(ge_ActorID_ActorSwann, "Swann", StringExternal("Param/Value/D7841535"), UnitFromId(425), ge_ActorType_MainWithConversation, ge_ActorCantinaBGType_None, "Characters|CharSwann");
    gf_InitActorSingle(ge_ActorID_ActorTosh, "Tosh", StringExternal("Param/Value/181D331C"), UnitFromId(182), ge_ActorType_MainWithConversation, ge_ActorCantinaBGType_None, "Characters|CharTosh");
    gf_InitActorSingle(ge_ActorID_ActorTychus, "Tychus", StringExternal("Param/Value/F024A537"), UnitFromId(421), ge_ActorType_MainWithConversation, ge_ActorCantinaBGType_None, "Characters|CharTychus");
    gf_InitActorSingle(ge_ActorID_ActorValerian, "Valerian", StringExternal("Param/Value/964C91F6"), UnitFromId(448), ge_ActorType_MainWithConversation, ge_ActorCantinaBGType_None, "Characters|CharValerian");
    gf_InitActorSingle(ge_ActorID_ActorWarfield, "Warfield", StringExternal("Param/Value/15084905"), UnitFromId(350), ge_ActorType_MainWithConversation, ge_ActorCantinaBGType_None, "Characters|CharWarfield");
    gf_InitActorSingle(ge_ActorID_ActorWarfieldAOD, "Warfield", StringExternal("Param/Value/C36090F4"), UnitFromId(352), ge_ActorType_MainWithConversation, ge_ActorCantinaBGType_None, "Characters|CharWarfield");
    gf_InitActorSingle(ge_ActorID_ActorYbarraMiscMerc, "Ybarra", StringExternal("Param/Value/BD0335E0"), UnitFromId(415), ge_ActorType_BackgroundWithFidget, ge_ActorCantinaBGType_Always, "Characters|CharYbarra");
    gf_InitActorSingle(ge_ActorID_ActorZeratul, "Zeratul", StringExternal("Param/Value/8066977A"), UnitFromId(460), ge_ActorType_MainWithConversation, ge_ActorCantinaBGType_None, "Characters|CharZeratul");
    gf_InitActorSingle(ge_ActorID_ActorBridgeBG1, "BridgeBG1", StringExternal("Param/Value/C48E6CAC"), UnitFromId(985), ge_ActorType_BackgroundNonInteractive, ge_ActorCantinaBGType_None, null);
    gf_InitActorSingle(ge_ActorID_ActorBridgeBG2, "BridgeBG2", StringExternal("Param/Value/A2E47B91"), UnitFromId(224), ge_ActorType_BackgroundNonInteractive, ge_ActorCantinaBGType_None, null);
    gf_InitActorSingle(ge_ActorID_ActorArmoryBG1, "ArmoryBG1", StringExternal("Param/Value/A1635AEC"), UnitFromId(859), ge_ActorType_BackgroundNonInteractive, ge_ActorCantinaBGType_None, null);
    gf_InitActorRooms();
    auto869F95E1_ae = gv_c_ACTOR_LAST;
    lv_index = gv_c_ACTOR_FIRST;
    for ( ; ( (auto869F95E1_ai >= 0 && lv_index <= auto869F95E1_ae) || (auto869F95E1_ai < 0 && lv_index >= auto869F95E1_ae) ) ; lv_index += auto869F95E1_ai ) {
        libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[lv_index].lv_actorID), false);
    }
    auto7189C51B_ae = gv_c_ACTOR_LAST;
    lv_index = gv_c_ACTOR_FIRST;
    for ( ; ( (auto7189C51B_ai >= 0 && lv_index <= auto7189C51B_ae) || (auto7189C51B_ai < 0 && lv_index >= auto7189C51B_ae) ) ; lv_index += auto7189C51B_ai ) {
        if ((gv_actors[lv_index].lv_type == ge_ActorType_MainWithConversation)) {
            if ((gf_ActorWithConversation(gv_actors[lv_index].lv_actorID) == true)) {
                gf_AddClickable(gv_clickables, gf_ActorUnit(gv_actors[lv_index].lv_actorID), gf_ActorRoom(gv_actors[lv_index].lv_actorID), ge_ClickableCursorType_Talk);
            }
            else {
                gf_SetActorType(gv_actors[lv_index].lv_actorID, ge_ActorType_MainWithFidget);
            }
        }

    }
    auto2E810E55_ae = gv_c_ACTOR_LAST;
    lv_index = gv_c_ACTOR_FIRST;
    for ( ; ( (auto2E810E55_ai >= 0 && lv_index <= auto2E810E55_ae) || (auto2E810E55_ai < 0 && lv_index >= auto2E810E55_ae) ) ; lv_index += auto2E810E55_ai ) {
        if ((gf_ActorWithFidget(gv_actors[lv_index].lv_actorID) == true)) {
            gf_AddClickable(gv_clickables, gf_ActorUnit(gv_actors[lv_index].lv_actorID), gv_actors[lv_index].lv_actorID, ge_ClickableCursorType_Look);
        }

    }
    gf_AddClickable(gv_clickables, gf_ActorUnit(ge_ActorID_ActorHall), gf_ActorRoom(ge_ActorID_ActorHall), ge_ClickableCursorType_Activate);
    gf_AddClickable(gv_clickables, gf_ActorUnit(ge_ActorID_ActorAdjutant), gf_ActorRoom(ge_ActorID_ActorAdjutant), ge_ClickableCursorType_Activate);
    UnitGroupAdd(gv_hotspots_NoHighlightEffect, gf_ActorUnit(ge_ActorID_ActorCade));
    UnitGroupAdd(gv_hotspots_NoHighlightEffect, gf_ActorUnit(ge_ActorID_ActorHall));
    UnitGroupAdd(gv_hotspots_NoHighlightEffect, gf_ActorUnit(ge_ActorID_ActorBralik));
    UnitGroupAdd(gv_hotspots_NoHighlightEffect, gf_ActorUnit(ge_ActorID_ActorAnnabelle));
    UnitGroupAdd(gv_hotspots_NoHighlightEffect, gf_ActorUnit(ge_ActorID_ActorEarl));
    UnitGroupAdd(gv_hotspots_NoHighlightEffect, gf_ActorUnit(ge_ActorID_ActorKachinsky));
    UnitGroupAdd(gv_hotspots_NoHighlightEffect, gf_ActorUnit(ge_ActorID_ActorCooperBarTender));
    UnitGroupAdd(gv_hotspots_NoHighlightEffect, gf_ActorUnit(ge_ActorID_ActorYbarraMiscMerc));
    if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorTychus, ge_RoomID_RoomCantina) == true)) {
        ConversationDataStateSetValue("CharacterLocationStatus|TychusInCantina", 1);
    }
    else {
        ConversationDataStateSetValue("CharacterLocationStatus|TychusInCantina", 0);
    }
    if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorHanson, ge_RoomID_RoomLab) == true)) {
        ConversationDataStateSetValue("CharacterLocationStatus|HansonInLab", 1);
    }
    else {
        ConversationDataStateSetValue("CharacterLocationStatus|HansonInLab", 0);
    }
    if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorTosh, ge_RoomID_RoomCantina) == true)) {
        ConversationDataStateSetValue("CharacterLocationStatus|ToshInCantina", 1);
    }
    else {
        ConversationDataStateSetValue("CharacterLocationStatus|ToshInCantina", 0);
    }
}

void gf_InitActorRooms () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto15674CF3_ae;
    const int auto15674CF3_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_MissionStatusCheck("THorner01", libWoLC_ge_MissionStatus_Completed) == true)) {
        gf_SetActorRoom(ge_ActorID_ActorAdjutantConfederate, ge_RoomID_RoomLab);
    }

    gf_SetActorRoom(ge_ActorID_ActorAdjutant, ge_RoomID_RoomMarSara);
    if ((gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
        gf_SetActorRoom(ge_ActorID_ActorAnnabelle, ge_RoomID_RoomCantina);
    }
    else {
        gf_SetActorRoom(ge_ActorID_ActorAnnabelle, ge_RoomID_RoomNone);
    }
    gf_SetActorRoom(ge_ActorID_ActorBralik, ge_RoomID_RoomBridge);
    gf_SetActorRoom(ge_ActorID_ActorCade, ge_RoomID_RoomBridge);
    gf_SetActorRoom(ge_ActorID_ActorCooperBarTender, ge_RoomID_RoomCantina);
    if ((gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
        gf_SetActorRoom(ge_ActorID_ActorEarl, ge_RoomID_RoomCantina);
    }
    else {
        gf_SetActorRoom(ge_ActorID_ActorEarl, ge_RoomID_RoomNone);
    }
    gf_SetActorRoom(ge_ActorID_ActorHall, ge_RoomID_RoomBridge);
    if (((libWoLC_gf_LastSuccessfulMission() == "THanson01") || (libWoLC_gf_LastSuccessfulMission() == "THanson02"))) {
        gf_SetActorRoom(ge_ActorID_ActorHanson, ge_RoomID_RoomBridge);
    }
    else {
        if ((libWoLC_gf_MissionStatusCheck("THanson01", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_MissionStatusCheck("THanson03A", libWoLC_ge_MissionStatus_Completed) == false) && (libWoLC_gf_MissionStatusCheck("THanson03B", libWoLC_ge_MissionStatus_Completed) == false)) {
            gf_SetActorRoom(ge_ActorID_ActorHanson, ge_RoomID_RoomLab);
        }

    }
    gf_SetActorRoom(ge_ActorID_ActorHillMercContact, ge_RoomID_RoomCantina);
    gf_SetActorRoom(ge_ActorID_ActorHorner, ge_RoomID_RoomBridge);
    if ((gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
        gf_SetActorRoom(ge_ActorID_ActorKachinsky, ge_RoomID_RoomCantina);
    }
    else {
        gf_SetActorRoom(ge_ActorID_ActorKachinsky, ge_RoomID_RoomNone);
    }
    if ((libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_SetActorRoom(ge_ActorID_ActorRaynor, ge_RoomID_RoomMarSara);
    }
    else {
        gf_SetActorRoom(ge_ActorID_ActorRaynor, ge_RoomID_RoomBridge);
    }
    if ((libWoLC_gf_LastSuccessfulMission() == "TTychus04")) {
        gf_SetActorRoom(ge_ActorID_ActorRaynorMarine, ge_RoomID_RoomObservatory);
    }

    if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == true)) {
        gf_SetActorRoom(ge_ActorID_ActorRaynorMarine, ge_RoomID_RoomChar);
    }

    gf_InitActorRoomsStetmann();
    gf_SetActorRoom(ge_ActorID_ActorSwann, ge_RoomID_RoomArmory);
    if ((libWoLC_gf_LastSuccessfulMission() == "TTosh01")) {
        gf_SetActorRoom(ge_ActorID_ActorTosh, ge_RoomID_RoomBridge);
    }
    else {
        if ((libWoLC_gf_MissionStatusCheck("TTosh01", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_MissionStatusCheck("TTosh03B", libWoLC_ge_MissionStatus_Completed) == false)) {
            gf_SetActorRoom(ge_ActorID_ActorTosh, ge_RoomID_RoomCantina);
        }

    }
    if (((libWoLC_gf_LastSuccessfulMission() == "TRaynor01") || (libWoLC_gf_LastSuccessfulMission() == "TRaynor02"))) {
        gf_SetActorRoom(ge_ActorID_ActorTychus, ge_RoomID_RoomMarSara);
    }
    else if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == true)) {
        gf_SetActorRoom(ge_ActorID_ActorTychus, ge_RoomID_RoomChar);
    }
    else if (((libWoLC_gf_LastSuccessfulMission() == "TRaynor03") || (libWoLC_gf_LastSuccessfulMission() == "TTychus03") || (libWoLC_gf_LastSuccessfulMission() == "TTychus04") || (libWoLC_gf_LastSuccessfulMission() == "THorner04"))) {
        gf_SetActorRoom(ge_ActorID_ActorTychus, ge_RoomID_RoomBridge);
    }
    else if ((libWoLC_gf_LastSuccessfulMission() != null)) {
        gf_SetActorRoom(ge_ActorID_ActorTychus, ge_RoomID_RoomCantina);
    }
    if ((gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
        gf_SetActorRoom(ge_ActorID_ActorYbarraMiscMerc, ge_RoomID_RoomCantina);
    }
    else {
        gf_SetActorRoom(ge_ActorID_ActorYbarraMiscMerc, ge_RoomID_RoomNone);
    }
    gf_SetActorRoom(ge_ActorID_ActorValerian, ge_RoomID_RoomObservatory);
    if ((libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Available) == true)) {
        gf_SetActorRoom(ge_ActorID_ActorWarfieldAOD, ge_RoomID_RoomChar);
    }
    else {
        gf_SetActorRoom(ge_ActorID_ActorWarfield, ge_RoomID_RoomChar);
    }
    gf_SetActorRoom(ge_ActorID_ActorZeratul, ge_RoomID_RoomCorridor);
    gf_SetActorRoom(ge_ActorID_ActorBridgeBG1, ge_RoomID_RoomBridge);
    gf_SetActorRoom(ge_ActorID_ActorBridgeBG2, ge_RoomID_RoomNone);
    gf_SetActorRoom(ge_ActorID_ActorArmoryBG1, ge_RoomID_RoomArmory);
    auto15674CF3_ae = gv_c_ACTOR_LAST;
    lv_index = gv_c_ACTOR_FIRST;
    for ( ; ( (auto15674CF3_ai >= 0 && lv_index <= auto15674CF3_ae) || (auto15674CF3_ai < 0 && lv_index >= auto15674CF3_ae) ) ; lv_index += auto15674CF3_ai ) {
        if (((gv_actors[lv_index].lv_type == ge_ActorType_MainWithConversation) || (gv_actors[lv_index].lv_type == ge_ActorType_MainWithFidget) || (gv_actors[lv_index].lv_type == ge_ActorType_None) || (gv_actors[lv_index].lv_room == ge_RoomID_RoomNone))) {
            gv_actors[lv_index].lv_cantinaBGType = ge_ActorCantinaBGType_None;
        }

    }
    gf_InitActorCantinaBackground();
}

void gf_InitActorRoomsStetmann () {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_RoomIsEnabled(ge_RoomID_RoomLab) == true)) {
        gf_SetActorRoom(ge_ActorID_ActorStetmann, ge_RoomID_RoomLab);
    }
    else {
        if ((gf_RoomIsEnabled(ge_RoomID_RoomBridge) == true)) {
            gf_SetActorRoom(ge_ActorID_ActorStetmann, ge_RoomID_RoomBridge);
        }

    }
    gv_stetmannFront = false;
}

void gf_InitActorCantinaBackgroundLocations () {
    // Automatic Variable Declarations
    // Implementation
    gv_cantinaBGLocCount = 0;
    if ((gv_cantinaState == ge_CantinaStates_Normal)) {
        gv_cantinaBGLocCount += 1;
        gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_location = PointFromId(191);
        gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_sitDown = true;
        gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_haveFidget = false;
        gv_cantinaBGLocCount += 1;
        gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_location = PointFromId(193);
        gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_sitDown = true;
        gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_haveFidget = false;
    }

    gv_cantinaBGLocCount += 1;
    gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_location = PointFromId(243);
    gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_sitDown = false;
    gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_haveFidget = false;
    gv_cantinaBGLocCount += 1;
    gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_location = PointFromId(244);
    gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_sitDown = false;
    gv_cantinaBGLocs[gv_cantinaBGLocCount].lv_haveFidget = false;
}

void gf_InitActorCantinaBackground () {
    int init_i;

    // Variable Declarations
    int[31] lv_alwaysActor;
    int lv_alwaysActorCount;
    int[31] lv_possibleActor;
    int lv_possibleActorCount;
    int lv_showUpTotalCount;
    int lv_showUpAlwaysCount;
    int lv_showUpPossibleCount;
    int lv_actorIndex;
    int lv_actorIndexRandom;
    int lv_actorIDSwap;
    int[16] lv_bGLocationIndexArray;
    int lv_bGLocationIndex;
    int lv_bGLocationSwap;
    int lv_bGLocationRandom;
    int lv_actorID;

    // Automatic Variable Declarations
    int auto82218F96_ae;
    const int auto82218F96_ai = 1;
    int auto481BB6C6_ae;
    const int auto481BB6C6_ai = 1;
    int auto55277A5E_val;
    int auto7EB0D9E3_ae;
    const int auto7EB0D9E3_ai = 1;
    int autoA632537C_ae;
    const int autoA632537C_ai = 1;
    int auto6A314E41_ae;
    const int auto6A314E41_ai = 1;
    int auto90E90B3B_ae;
    const int auto90E90B3B_ai = 1;
    int autoAB6AF844_ae;
    const int autoAB6AF844_ai = 1;
    int auto31C04F78_ae;
    const int auto31C04F78_ai = 1;
    int auto10C52BC0_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 30; init_i += 1) {
        lv_alwaysActor[init_i] = ge_ActorID_ActorNone;
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        lv_possibleActor[init_i] = ge_ActorID_ActorNone;
    }
    lv_actorIDSwap = ge_ActorID_ActorNone;
    lv_actorID = ge_ActorID_ActorNone;

    // Implementation
    gf_InitActorCantinaBackgroundLocations();
    gf_ResetAllActorCantinaBGLocationis();
    if ((gf_RoomIsEnabled(ge_RoomID_RoomCantina) == false)) {
        return ;
    }

    if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorStetmann, ge_RoomID_RoomCantina) == true)) {
        gv_cantinaBGLocCount -= 1;
    }

    auto82218F96_ae = gv_cantinaBGLocCount;
    lv_bGLocationIndex = 1;
    for ( ; ( (auto82218F96_ai >= 0 && lv_bGLocationIndex <= auto82218F96_ae) || (auto82218F96_ai < 0 && lv_bGLocationIndex >= auto82218F96_ae) ) ; lv_bGLocationIndex += auto82218F96_ai ) {
        lv_bGLocationIndexArray[lv_bGLocationIndex] = lv_bGLocationIndex;
    }
    lv_alwaysActorCount = 0;
    lv_possibleActorCount = 0;
    auto481BB6C6_ae = gv_c_ACTOR_LAST;
    lv_actorIndex = gv_c_ACTOR_FIRST;
    for ( ; ( (auto481BB6C6_ai >= 0 && lv_actorIndex <= auto481BB6C6_ae) || (auto481BB6C6_ai < 0 && lv_actorIndex >= auto481BB6C6_ae) ) ; lv_actorIndex += auto481BB6C6_ai ) {
        auto55277A5E_val = gv_actors[lv_actorIndex].lv_cantinaBGType;
        if (auto55277A5E_val == ge_ActorCantinaBGType_Always) {
            lv_alwaysActorCount += 1;
            lv_alwaysActor[lv_alwaysActorCount] = gv_actors[lv_actorIndex].lv_actorID;
        }
        else if (auto55277A5E_val == ge_ActorCantinaBGType_Possible) {
            lv_possibleActorCount += 1;
            lv_possibleActor[lv_possibleActorCount] = gv_actors[lv_actorIndex].lv_actorID;
        }
        else {
        }
    }
    lv_showUpTotalCount = gv_cantinaBGLocCount;
    lv_showUpAlwaysCount = lv_alwaysActorCount;
    lv_showUpPossibleCount = (lv_showUpTotalCount - lv_showUpAlwaysCount);
    TriggerDebugOutput(1, (StringExternal("Param/Value/969F3850") + IntToText(lv_alwaysActorCount) + StringExternal("Param/Value/0F91CDC0") + IntToText(lv_possibleActorCount)), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/514E6E01") + IntToText(lv_showUpTotalCount) + StringExternal("Param/Value/4BB01066") + IntToText(lv_showUpAlwaysCount) + StringExternal("Param/Value/A0670695") + IntToText(lv_showUpPossibleCount)), false);
    auto7EB0D9E3_ae = lv_showUpTotalCount;
    lv_bGLocationIndex = 1;
    for ( ; ( (auto7EB0D9E3_ai >= 0 && lv_bGLocationIndex <= auto7EB0D9E3_ae) || (auto7EB0D9E3_ai < 0 && lv_bGLocationIndex >= auto7EB0D9E3_ae) ) ; lv_bGLocationIndex += auto7EB0D9E3_ai ) {
        lv_bGLocationRandom = RandomInt(lv_bGLocationIndex, gv_cantinaBGLocCount);
        if ((lv_bGLocationRandom != lv_bGLocationIndex)) {
            lv_bGLocationSwap = lv_bGLocationIndexArray[lv_bGLocationIndex];
            lv_bGLocationIndexArray[lv_bGLocationIndex] = lv_bGLocationIndexArray[lv_bGLocationRandom];
            lv_bGLocationIndexArray[lv_bGLocationRandom] = lv_bGLocationSwap;
        }

    }
    autoA632537C_ae = lv_showUpAlwaysCount;
    lv_actorIndex = 1;
    for ( ; ( (autoA632537C_ai >= 0 && lv_actorIndex <= autoA632537C_ae) || (autoA632537C_ai < 0 && lv_actorIndex >= autoA632537C_ae) ) ; lv_actorIndex += autoA632537C_ai ) {
        lv_actorIndexRandom = RandomInt(lv_actorIndex, lv_alwaysActorCount);
        if ((lv_actorIndexRandom != lv_actorIndex)) {
            lv_actorIDSwap = lv_alwaysActor[lv_actorIndex];
            lv_alwaysActor[lv_actorIndex] = lv_alwaysActor[lv_actorIndexRandom];
            lv_alwaysActor[lv_actorIndexRandom] = lv_actorIDSwap;
        }

    }
    auto6A314E41_ae = lv_showUpPossibleCount;
    lv_actorIndex = 1;
    for ( ; ( (auto6A314E41_ai >= 0 && lv_actorIndex <= auto6A314E41_ae) || (auto6A314E41_ai < 0 && lv_actorIndex >= auto6A314E41_ae) ) ; lv_actorIndex += auto6A314E41_ai ) {
        lv_actorIndexRandom = RandomInt(lv_actorIndex, lv_possibleActorCount);
        if ((lv_actorIndexRandom != lv_actorIndex)) {
            lv_actorIDSwap = lv_possibleActor[lv_actorIndex];
            lv_possibleActor[lv_actorIndex] = lv_possibleActor[lv_actorIndexRandom];
            lv_possibleActor[lv_actorIndexRandom] = lv_actorIDSwap;
        }

    }
    lv_actorIndex = 0;
    auto90E90B3B_ae = lv_showUpAlwaysCount;
    lv_bGLocationIndex = 1;
    for ( ; ( (auto90E90B3B_ai >= 0 && lv_bGLocationIndex <= auto90E90B3B_ae) || (auto90E90B3B_ai < 0 && lv_bGLocationIndex >= auto90E90B3B_ae) ) ; lv_bGLocationIndex += auto90E90B3B_ai ) {
        lv_actorIndex += 1;
        gf_SetActorCantianBGLocation(lv_alwaysActor[lv_actorIndex], lv_bGLocationIndexArray[lv_bGLocationIndex]);
    }
    lv_actorIndex = 0;
    autoAB6AF844_ae = lv_showUpTotalCount;
    lv_bGLocationIndex = (lv_showUpAlwaysCount + 1);
    for ( ; ( (autoAB6AF844_ai >= 0 && lv_bGLocationIndex <= autoAB6AF844_ae) || (autoAB6AF844_ai < 0 && lv_bGLocationIndex >= autoAB6AF844_ae) ) ; lv_bGLocationIndex += autoAB6AF844_ai ) {
        lv_actorIndex += 1;
        lv_actorID = lv_possibleActor[lv_actorIndex];
        gv_actors[(lv_actorID)].lv_cantinaBGType = ge_ActorCantinaBGType_Possible;
        gf_SetActorCantianBGLocation(lv_actorID, lv_bGLocationIndexArray[lv_bGLocationIndex]);
    }
    auto31C04F78_ae = gv_c_ACTOR_LAST;
    lv_actorIndex = gv_c_ACTOR_FIRST;
    for ( ; ( (auto31C04F78_ai >= 0 && lv_actorIndex <= auto31C04F78_ae) || (auto31C04F78_ai < 0 && lv_actorIndex >= auto31C04F78_ae) ) ; lv_actorIndex += auto31C04F78_ai ) {
        auto10C52BC0_val = gv_actors[lv_actorIndex].lv_cantinaBGType;
        if (auto10C52BC0_val == ge_ActorCantinaBGType_Always) {
            if ((gv_actors[lv_actorIndex].lv_cantinaBGLocID <= 0)) {
                gf_SetActorRoom(gv_actors[lv_actorIndex].lv_actorID, ge_RoomID_RoomNone);
            }
            else {
                gf_SetActorRoom(gv_actors[lv_actorIndex].lv_actorID, ge_RoomID_RoomCantina);
                TriggerDebugOutput(1, gf_ActorName(gv_actors[lv_actorIndex].lv_actorID), false);
            }
        }
        else if (auto10C52BC0_val == ge_ActorCantinaBGType_Possible) {
            if ((gv_actors[lv_actorIndex].lv_cantinaBGLocID > 0)) {
                gf_SetActorRoom(gv_actors[lv_actorIndex].lv_actorID, ge_RoomID_RoomCantina);
                TriggerDebugOutput(1, gf_ActorName(gv_actors[lv_actorIndex].lv_actorID), false);
            }
            else {
                if ((gv_actors[lv_actorIndex].lv_room == ge_RoomID_RoomCantina)) {
                    gf_SetActorRoom(gv_actors[lv_actorIndex].lv_actorID, ge_RoomID_RoomNone);
                }

            }
        }
        else {
        }
        if ((gv_actors[lv_actorIndex].lv_cantinaBGLocID > 0) && (gv_cantinaBGLocs[gv_actors[lv_actorIndex].lv_cantinaBGLocID].lv_sitDown == true)) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(gv_actors[lv_actorIndex].lv_actorID), "Cover", true);
            TriggerDebugOutput(1, (gf_ActorName(gv_actors[lv_actorIndex].lv_actorID) + StringExternal("Param/Value/F93B35C3")), false);
        }
        else {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(gv_actors[lv_actorIndex].lv_actorID), "Cover", false);
        }
    }
    if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorStetmann, ge_RoomID_RoomCantina) == true)) {
        gv_actors[(ge_ActorID_ActorStetmann)].lv_cantinaBGType = ge_ActorCantinaBGType_Always;
        gv_cantinaBGLocCount += 1;
        gf_SetActorCantianBGLocation(ge_ActorID_ActorStetmann, gv_cantinaBGLocCount);
    }

}

void gf_SetActorUnit (int lp_actorID, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gv_actors[(lp_actorID)].lv_unit = lp_unit;
}

void gf_SetActorRoom (int lp_actorID, int lp_roomID) {
    // Automatic Variable Declarations
    // Implementation
    gv_actors[(lp_actorID)].lv_room = lp_roomID;
}

void gf_SetActorType (int lp_actorID, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    gv_actors[(lp_actorID)].lv_type = lp_type;
}

void gf_SetActorCantianBGLocation (int lp_actorID, int lp_locID) {
    // Automatic Variable Declarations
    // Implementation
    gv_actors[(lp_actorID)].lv_cantinaBGLocID = lp_locID;
}

void gf_ResetAllActorCantinaBGLocationis () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto544C87ED_ae;
    const int auto544C87ED_ai = 1;

    // Variable Initialization

    // Implementation
    auto544C87ED_ae = gv_c_ACTOR_LAST;
    lv_index = gv_c_ACTOR_FIRST;
    for ( ; ( (auto544C87ED_ai >= 0 && lv_index <= auto544C87ED_ae) || (auto544C87ED_ai < 0 && lv_index >= auto544C87ED_ae) ) ; lv_index += auto544C87ED_ai ) {
        gf_SetActorCantianBGLocation(gv_actors[lv_index].lv_actorID, 0);
    }
}

void gf_ResetActorToLocation (int lp_actorID, point lp_location) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_location == null)) {
        return ;
    }

    UnitIssueOrder(gf_ActorUnit(lp_actorID), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetState(gf_ActorUnit(lp_actorID), c_unitStateMoveSuppressed, false);
    UnitSetPosition(gf_ActorUnit(lp_actorID), lp_location, false);
    UnitSetFacing(gf_ActorUnit(lp_actorID), PointGetFacing(lp_location), 0.0);
    UnitSetState(gf_ActorUnit(lp_actorID), c_unitStateMoveSuppressed, true);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_ActorUnit(lp_actorID), 0.0);
}

void gf_HideAllActors (bool lp_hideShow) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoD92EF53D_ae;
    const int autoD92EF53D_ai = 1;
    int auto13E65582_ae;
    const int auto13E65582_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_hideShow == false)) {
        auto13E65582_ae = gv_c_ACTOR_LAST;
        lv_index = gv_c_ACTOR_FIRST;
        for ( ; ( (auto13E65582_ai >= 0 && lv_index <= auto13E65582_ae) || (auto13E65582_ai < 0 && lv_index >= auto13E65582_ae) ) ; lv_index += auto13E65582_ai ) {
            gf_RemoveVisibleUnit(false, gv_actors[lv_index].lv_unit);
        }
    }
    else {
        autoD92EF53D_ae = gv_c_ACTOR_LAST;
        lv_index = gv_c_ACTOR_FIRST;
        for ( ; ( (autoD92EF53D_ai >= 0 && lv_index <= autoD92EF53D_ae) || (autoD92EF53D_ai < 0 && lv_index >= autoD92EF53D_ae) ) ; lv_index += autoD92EF53D_ai ) {
            gf_RemoveVisibleUnit(true, gv_actors[lv_index].lv_unit);
        }
    }
}

void gf_ActorTalked (int lp_actor) {
    // Automatic Variable Declarations
    int auto912D0039_val;

    // Implementation
    auto912D0039_val = lp_actor;
    if (auto912D0039_val == ge_ActorID_ActorHorner) {
        libWoLC_gf_SetStoryStateBoolean("HornerOn", true);
        libWoLC_gf_SetAchievementTermQuantityCampaign("TStory01_9_Horner", 1);
    }
    else if (auto912D0039_val == ge_ActorID_ActorTychus) {
        libWoLC_gf_SetStoryStateBoolean("TychusOn", true);
        libWoLC_gf_SetAchievementTermQuantityCampaign("TStory01_9_Tychus", 1);
    }
    else if (auto912D0039_val == ge_ActorID_ActorSwann) {
        libWoLC_gf_SetStoryStateBoolean("SwannOn", true);
        libWoLC_gf_SetAchievementTermQuantityCampaign("TStory01_9_Swann", 1);
    }
    else if (auto912D0039_val == ge_ActorID_ActorHanson) {
        libWoLC_gf_SetStoryStateBoolean("HansonOn", true);
        libWoLC_gf_SetAchievementTermQuantityCampaign("TStory01_9_Hanson", 1);
    }
    else if (auto912D0039_val == ge_ActorID_ActorTosh) {
        libWoLC_gf_SetStoryStateBoolean("ToshOn", true);
        libWoLC_gf_SetAchievementTermQuantityCampaign("TStory01_9_Tosh", 1);
    }
    else if (auto912D0039_val == ge_ActorID_ActorWarfield) {
        libWoLC_gf_SetStoryStateBoolean("WarfieldOn", true);
        libWoLC_gf_SetAchievementTermQuantityCampaign("TStory01_9_Warfield", 1);
    }
    else {
    }
}

void gf_LockActorReloading (bool lp_lockUnlock) {
    // Automatic Variable Declarations
    // Implementation
    gv_actorReloadLocked = (lp_lockUnlock == true);
}

void gf_ReloadActors (bool lp_forced) {
    // Variable Declarations
    int lv_actorIndex;
    bool lv_load;

    // Automatic Variable Declarations
    int auto2652B079_ae;
    const int auto2652B079_ai = 1;
    int auto70D1BA87_val;

    // Variable Initialization

    // Implementation
    if ((gv_actorReloadLocked == true)) {
        return ;
    }

    auto2652B079_ae = gv_c_ACTOR_LAST;
    lv_actorIndex = gv_c_ACTOR_FIRST;
    for ( ; ( (auto2652B079_ai >= 0 && lv_actorIndex <= auto2652B079_ae) || (auto2652B079_ai < 0 && lv_actorIndex >= auto2652B079_ae) ) ; lv_actorIndex += auto2652B079_ai ) {
        if ((lp_forced == true)) {
            lv_load = true;
        }
        else {
            if ((gf_ActorIsEnabled(gv_actors[lv_actorIndex].lv_actorID) == true)) {
                lv_load = true;
            }
            else {
                lv_load = false;
            }
        }
        if ((lv_load == true)) {
            if ((gv_actors[lv_actorIndex].lv_preloaded == false)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/BF17A6A7") + gf_ActorName(gv_actors[lv_actorIndex].lv_actorID)), false);
                gv_actors[lv_actorIndex].lv_preloaded = true;
                gf_PreloadUnitStoryMap(gf_ActorUnit(gv_actors[lv_actorIndex].lv_actorID));
                auto70D1BA87_val = gv_actors[lv_actorIndex].lv_actorID;
                if (auto70D1BA87_val == ge_ActorID_ActorTychus) {
                    if ((gv_currentLocation == ge_RoomLocation_RoomLocationChar)) {
                        TriggerDebugOutput(1, (StringExternal("Param/Value/0CADB231")), false);
                        libNtve_gf_PreloadModelAnimation("Assets\\StoryModeCharacters\\Terran\\SM_Marine_01_CharAnims\\SM_Marine_01_CharAnims.m3a", false);
                    }

                }
                else if (auto70D1BA87_val == ge_ActorID_ActorStetmann) {
                    if ((gf_RoomIsEnabled(ge_RoomID_RoomLab) == true)) {
                        libNtve_gf_PreloadModelAnimation("Assets\\StoryModeCharacters\\Terran\\SM_LabTech01_LabAnims\\SM_LabTech01_LabAnims.m3a", false);
                    }

                }
                else if (auto70D1BA87_val == ge_ActorID_ActorWarfield) {
                    if ((gv_currentLocation == ge_RoomLocation_RoomLocationChar)) {
                        libNtve_gf_PreloadModelAnimation("Assets\\StoryModeCharacters\\Terran\\SM_Marine02_CharAnims\\SM_Marine02_CharAnims.m3a", false);
                    }

                }
                else if (auto70D1BA87_val == ge_ActorID_ActorWarfieldAOD) {
                    if ((gv_currentLocation == ge_RoomLocation_RoomLocationChar)) {
                        libNtve_gf_PreloadModelAnimation("Assets\\StoryModeCharacters\\Terran\\SM_Marine02AOD_CharAnims\\SM_Marine02AOD_CharAnims.m3a", false);
                    }

                }
                else {
                }
            }

        }
        else {
            if ((gv_actors[lv_actorIndex].lv_preloaded == true)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/1C1C2145") + gf_ActorName(gv_actors[lv_actorIndex].lv_actorID)), false);
                gv_actors[lv_actorIndex].lv_preloaded = false;
                UnitUnloadModel(gf_ActorUnit(gv_actors[lv_actorIndex].lv_actorID));
            }

        }
    }
}

void gf_PlayActorLightingAnim (int lp_actorID, int lp_toActorID, int lp_room, int lp_lightingType) {
    // Variable Declarations
    string lv_anim;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anim = "Stand";

    // Implementation
    gf_ClearActorLightingAnim(lp_actorID);
    lv_anim = gf_ActorLightingAnim(lp_actorID, lp_toActorID, lp_room, lp_lightingType);
    if ((lv_anim != "")) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(lp_actorID)), gv_aNIMID_ACTORLIGHTING, lv_anim, c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
    }
    else {
        gf_ClearAnimationwithblendtime(gv_aNIMID_ACTORLIGHTING, gf_ActorUnit(lp_actorID), 0.0);
    }
}

void gf_ClearActorLightingAnim (int lp_actorID) {
    // Automatic Variable Declarations
    // Implementation
    gf_ClearAnimationwithblendtime(gv_aNIMID_ACTORLIGHTING, gf_ActorUnit(lp_actorID), 0.0);
}

void gf_ReloadRoomActorAnimation (int lp_actor, int lp_roomID) {
    // Variable Declarations
    int lv_actorIndex;
    string lv_animOld;
    string lv_animNew;
    int lv_index;

    // Automatic Variable Declarations
    const int auto4DA53D0F_ae = 3;
    const int auto4DA53D0F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_actorIndex = (lp_actor);
    lv_index = 1;
    for ( ; ( (auto4DA53D0F_ai >= 0 && lv_index <= auto4DA53D0F_ae) || (auto4DA53D0F_ai < 0 && lv_index >= auto4DA53D0F_ae) ) ; lv_index += auto4DA53D0F_ai ) {
        lv_animOld = gv_actors[lv_actorIndex].lv_roomAnim[lv_index];
        lv_animNew = gf_ActorRoomAnim(lp_actor, lp_roomID, lv_index);
        if ((lv_animOld != lv_animNew)) {
            if ((lv_animOld != null)) {
                UnitTypeAnimationUnload(UnitGetType(gf_ActorUnit(lp_actor)), lv_animOld);
                TriggerDebugOutput(1, (StringExternal("Param/Value/D4A752FC") + StringToText(lv_animOld) + StringExternal("Param/Value/75FB0D17") + gf_ActorName(lp_actor)), false);
            }

            if ((lv_animNew != null)) {
                UnitTypeAnimationLoad(UnitGetType(gf_ActorUnit(lp_actor)), lv_animNew);
                TriggerDebugOutput(1, (StringExternal("Param/Value/F7062F37") + StringToText(lv_animNew) + StringExternal("Param/Value/8A217FF5") + gf_ActorName(lp_actor)), false);
            }

            gv_actors[lv_actorIndex].lv_roomAnim[lv_index] = lv_animNew;
        }

    }
}

void gf_LoadActorComplexAnimation (int lp_actorID) {
    // Automatic Variable Declarations
    int auto205CF2C7_val;

    // Implementation
    auto205CF2C7_val = lp_actorID;
    if (auto205CF2C7_val == ge_ActorID_ActorHorner) {
        UnitTypeAnimationLoad(UnitGetType(gf_ActorUnit(lp_actorID)), "Assets\\StoryModeCharacters\\Terran\\SM_FirstOfficer_RequiredAnimsComplex\\SM_FirstOfficer_RequiredAnimsComplex.m3a");
    }
    else {
    }
}

void gf_ActorScenePrepare (int lp_actorID, int lp_toActorID, int lp_room, int lp_type) {
    // Variable Declarations
    int lv_lightingType;

    // Automatic Variable Declarations
    int auto315E68F6_val;
    int autoF960228F_val;

    // Variable Initialization
    lv_lightingType = ge_ActorLightingType_Default;

    // Implementation
    gv_actorScenePreparedCount += 1;
    gv_actorScenePrepared[gv_actorScenePreparedCount] = lp_actorID;
    gv_actorScenePreparedToActor[gv_actorScenePreparedCount] = lp_toActorID;
    gv_actorScenePreparedRoom[gv_actorScenePreparedCount] = lp_room;
    gv_actorScenePreparedType[gv_actorScenePreparedCount] = lp_type;
    gf_TurnActorFidgetOnOffInstantly(lp_actorID, false);
    if ((lp_type == ge_SceneType_Scene) && (lp_actorID != ge_ActorID_ActorTychus)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(lp_actorID)), gv_aNIMID_ACTORLISTEN, "Stand Listen", c_animFlagPlayForever, c_animTimeDefault);
    }

    auto315E68F6_val = lp_type;
    if (auto315E68F6_val == ge_SceneType_Convo) {
        lv_lightingType = ge_ActorLightingType_Convo;
    }
    else if (auto315E68F6_val == ge_SceneType_Scene) {
        lv_lightingType = ge_ActorLightingType_Scene;
    }
    else if (auto315E68F6_val == ge_SceneType_TV) {
        lv_lightingType = ge_ActorLightingType_Scene;
    }
    else {
    }
    gf_PlayActorLightingAnim(lp_actorID, lp_toActorID, lp_room, lv_lightingType);
    autoF960228F_val = lp_actorID;
    if (autoF960228F_val == ge_ActorID_ActorRaynor) {
        gf_ActorScenePrepareRaynor(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == ge_ActorID_ActorRaynorMarine) {
        gf_ActorScenePrepareRaynorMarine(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == ge_ActorID_ActorTychus) {
        gf_ActorScenePrepareTychus(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == ge_ActorID_ActorHorner) {
        gf_ActorScenePrepareHorner(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == ge_ActorID_ActorTosh) {
        gf_ActorScenePrepareTosh(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == ge_ActorID_ActorHanson) {
        gf_ActorScenePrepareHanson(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == ge_ActorID_ActorStetmann) {
        gf_ActorScenePrepareStettmann(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == ge_ActorID_ActorSwann) {
        gf_ActorScenePrepareSwann(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == ge_ActorID_ActorWarfield) {
        gf_ActorScenePrepareWarfield(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == ge_ActorID_ActorWarfieldAOD) {
        gf_ActorScenePrepareWarfieldAOD(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == ge_ActorID_ActorAdjutantConfederate) {
        gf_ActorScenePrepareLabAdjutant(lp_toActorID, lp_room, lp_type);
    }
    else {
    }
}

void gf_ActorSceneClearAll () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto0D438ED8_ae;
    const int auto0D438ED8_ai = 1;

    // Variable Initialization

    // Implementation
    auto0D438ED8_ae = gv_actorScenePreparedCount;
    lv_index = 1;
    for ( ; ( (auto0D438ED8_ai >= 0 && lv_index <= auto0D438ED8_ae) || (auto0D438ED8_ai < 0 && lv_index >= auto0D438ED8_ae) ) ; lv_index += auto0D438ED8_ai ) {
        gf_ActorSceneClear(gv_actorScenePrepared[lv_index], gv_actorScenePreparedToActor[lv_index], gv_actorScenePreparedRoom[lv_index], gv_actorScenePreparedType[lv_index]);
    }
    gv_actorScenePreparedCount = 0;
}

void gf_ActorSceneClear (int lp_actorID, int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int auto0CDC9ACF_val;

    // Implementation
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(lp_actorID), "InstantStanding");
    gf_TurnActorFidgetOnOffInstantly(lp_actorID, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(lp_actorID)), gv_aNIMID_ACTORLISTEN);
    gf_ClearActorLightingAnim(lp_actorID);
    gf_PlayActorLightingAnim(lp_actorID, ge_ActorID_ActorNone, lp_room, ge_ActorLightingType_Default);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFING, gf_ActorUnit(lp_actorID), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_ActorUnit(lp_actorID), 0.0);
    auto0CDC9ACF_val = lp_actorID;
    if (auto0CDC9ACF_val == ge_ActorID_ActorRaynor) {
        gf_ActorSceneClearRaynor(lp_toActorID, lp_room, lp_type);
    }
    else if (auto0CDC9ACF_val == ge_ActorID_ActorRaynorMarine) {
        gf_ActorSceneClearRaynorMarine(lp_toActorID, lp_room, lp_type);
    }
    else if (auto0CDC9ACF_val == ge_ActorID_ActorTychus) {
        gf_ActorSceneClearTychus(lp_toActorID, lp_room, lp_type);
    }
    else if (auto0CDC9ACF_val == ge_ActorID_ActorHorner) {
        gf_ActorSceneClearHorner(lp_toActorID, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    }
    else if (auto0CDC9ACF_val == ge_ActorID_ActorTosh) {
        gf_ActorSceneClearTosh(lp_toActorID, lp_room, lp_type);
    }
    else if (auto0CDC9ACF_val == ge_ActorID_ActorHanson) {
        gf_ActorSceneClearHanson(lp_toActorID, lp_room, lp_type);
    }
    else if (auto0CDC9ACF_val == ge_ActorID_ActorStetmann) {
        gf_ActorSceneClearStettmann(lp_toActorID, lp_room, lp_type);
    }
    else if (auto0CDC9ACF_val == ge_ActorID_ActorSwann) {
        gf_ActorSceneClearSwann(lp_toActorID, lp_room, lp_type);
    }
    else if (auto0CDC9ACF_val == ge_ActorID_ActorWarfield) {
        gf_ActorSceneClearWarfield(lp_toActorID, lp_room, lp_type);
    }
    else if (auto0CDC9ACF_val == ge_ActorID_ActorWarfieldAOD) {
        gf_ActorSceneClearWarfieldAOD(lp_toActorID, lp_room, lp_type);
    }
    else if (auto0CDC9ACF_val == ge_ActorID_ActorAdjutantConfederate) {
        gf_ActorSceneClearLabAdjutant(lp_toActorID, lp_room, lp_type);
    }
    else {
    }
}

void gf_ActorScenePrepareRaynor (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int autoD12F6240_val;
    int auto7DADAE64_val;
    int autoF1295927_val;
    int auto00783701_val;
    int autoC90A9B74_val;
    int autoA8E162AA_val;

    // Implementation
    autoD12F6240_val = lp_room;
    if (autoD12F6240_val == ge_RoomID_RoomMarSara) {
        auto7DADAE64_val = lp_type;
        if (auto7DADAE64_val == ge_SceneType_Convo) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Stand Ready", true);
        }
        else if (auto7DADAE64_val == ge_SceneType_Scene) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", false);
        }
        else if (auto7DADAE64_val == ge_SceneType_TV) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Ready M", true);
        }
        else {
        }
    }
    else if (autoD12F6240_val == ge_RoomID_RoomBridge) {
        gf_BridgeRaynorAnimation(true, false, true);
        autoF1295927_val = lp_type;
        if (autoF1295927_val == ge_SceneType_Convo) {
            auto00783701_val = lp_toActorID;
            if (auto00783701_val == ge_ActorID_ActorTychus) {
                gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Dialogue", true);
            }
            else {
            }
        }
        else {
        }
    }
    else if (autoD12F6240_val == ge_RoomID_RoomCantina) {
        autoC90A9B74_val = lp_type;
        if (autoC90A9B74_val == ge_SceneType_Convo) {
            autoA8E162AA_val = lp_toActorID;
            if (autoA8E162AA_val == ge_ActorID_ActorTychus) {
                if ((gv_cantinaState != ge_CantinaStates_Broken)) {
                    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Ready", true);
                }

            }
            else if (autoA8E162AA_val == ge_ActorID_ActorTosh) {
                if ((gf_RaynorCantinaHome2() == false)) {
                    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", false);
                    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", false);
                }

            }
            else {
            }
        }
        else if (autoC90A9B74_val == ge_SceneType_Scene) {
            if ((gf_RaynorCantinaHome2() == false)) {
                gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", false);
                gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", false);
            }

        }
        else if (autoC90A9B74_val == ge_SceneType_TV) {
            if ((gf_RaynorCantinaHome2() == false)) {
                gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", false);
                gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Ready T", true);
            }

        }
        else {
        }
    }
    else if (autoD12F6240_val == ge_RoomID_RoomLab) {
        gf_LabRaynorAnimation(true, false, true);
    }
    else {
    }
}

void gf_ActorSceneClearRaynor (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int auto19A09DCF_val;
    int auto2F9B5E47_val;
    int auto6428A2E4_val;
    int auto2AD60593_val;
    int auto413260E9_val;
    int auto553FA797_val;

    // Implementation
    auto19A09DCF_val = lp_room;
    if (auto19A09DCF_val == ge_RoomID_RoomMarSara) {
        auto2F9B5E47_val = lp_type;
        if (auto2F9B5E47_val == ge_SceneType_Convo) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Stand Ready", false);
        }
        else if (auto2F9B5E47_val == ge_SceneType_Scene) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", true);
        }
        else if (auto2F9B5E47_val == ge_SceneType_TV) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Ready M", false);
        }
        else {
        }
    }
    else if (auto19A09DCF_val == ge_RoomID_RoomBridge) {
        gf_BridgeRaynorAnimation(true, true, true);
        auto6428A2E4_val = lp_type;
        if (auto6428A2E4_val == ge_SceneType_Convo) {
            auto2AD60593_val = lp_toActorID;
            if (auto2AD60593_val == ge_ActorID_ActorTychus) {
                gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Dialogue", false);
            }
            else {
            }
        }
        else {
        }
    }
    else if (auto19A09DCF_val == ge_RoomID_RoomCantina) {
        auto413260E9_val = lp_type;
        if (auto413260E9_val == ge_SceneType_Convo) {
            auto553FA797_val = lp_toActorID;
            if (auto553FA797_val == ge_ActorID_ActorTychus) {
                if ((gv_cantinaState != ge_CantinaStates_Broken)) {
                    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Ready", false);
                }

            }
            else if (auto553FA797_val == ge_ActorID_ActorTosh) {
                if ((gf_RaynorCantinaHome2() == false)) {
                    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", true);
                    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", true);
                }

            }
            else {
            }
        }
        else if (auto413260E9_val == ge_SceneType_Scene) {
            if ((gf_RaynorCantinaHome2() == false)) {
                gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", true);
                gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", true);
            }

        }
        else if (auto413260E9_val == ge_SceneType_TV) {
            if ((gf_RaynorCantinaHome2() == false)) {
                gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", true);
                gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Ready T", false);
            }

        }
        else {
        }
    }
    else if (auto19A09DCF_val == ge_RoomID_RoomLab) {
        gf_LabRaynorAnimation(true, true, true);
    }
    else {
    }
}

void gf_ActorScenePrepareRaynorMarine (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int autoB80EB76D_val;
    int auto462A435A_val;
    int auto1AA8CF03_val;

    // Implementation
    autoB80EB76D_val = lp_room;
    if (autoB80EB76D_val == ge_RoomID_RoomChar) {
        gf_CharRaynorAnimation(true, false, true);
        auto462A435A_val = lp_type;
        if (auto462A435A_val == ge_SceneType_Convo) {
            auto1AA8CF03_val = lp_toActorID;
            if (auto1AA8CF03_val == ge_ActorID_ActorTychus) {
                gf_MakeUnitLookAtUnitWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
}

void gf_ActorSceneClearRaynorMarine (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int auto4C802D57_val;
    int autoA94E1053_val;
    int autoC1CCE171_val;

    // Implementation
    auto4C802D57_val = lp_room;
    if (auto4C802D57_val == ge_RoomID_RoomChar) {
        gf_CharRaynorAnimation(true, true, true);
        autoA94E1053_val = lp_type;
        if (autoA94E1053_val == ge_SceneType_Convo) {
            autoC1CCE171_val = lp_toActorID;
            if (autoC1CCE171_val == ge_ActorID_ActorTychus) {
                libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "InstantStanding");
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
}

void gf_ActorScenePrepareTychus (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int auto76814058_val;
    int auto7C764468_val;
    int autoD92DAF34_val;
    int auto7ED6BD5C_val;
    int autoFA90B0F3_val;

    // Implementation
    if ((lp_room != ge_RoomID_RoomChar) && ((lp_room != ge_RoomID_RoomMarSara) || (lp_type == ge_SceneType_Scene))) {
        UnitTypeAnimationLoad(UnitGetType(gf_ActorUnit(ge_ActorID_ActorTychus)), "Assets\\StoryModeCharacters\\Terran\\SM_Marine01_ConversationAnims\\SM_Marine01_ConversationAnims.m3a");
        gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(ge_ActorID_ActorTychus), "B", true, 0.0);
    }

    auto76814058_val = lp_room;
    if (auto76814058_val == ge_RoomID_RoomMarSara) {
        auto7C764468_val = lp_type;
        if (auto7C764468_val == ge_SceneType_Convo) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTychus), "Ready", true);
        }
        else if (auto7C764468_val == ge_SceneType_Scene) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTychus), "Cover", false);
        }
        else if (auto7C764468_val == ge_SceneType_TV) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTychus), "C", true);
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTychus), "Cover", false);
        }
        else {
        }
    }
    else if (auto76814058_val == ge_RoomID_RoomBridge) {
        autoD92DAF34_val = lp_type;
        if (autoD92DAF34_val == ge_SceneType_Convo) {
            gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
        }
        else {
        }
    }
    else if (auto76814058_val == ge_RoomID_RoomCantina) {
        auto7ED6BD5C_val = lp_type;
        if (auto7ED6BD5C_val == ge_SceneType_Convo) {
            gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
        }
        else if (auto7ED6BD5C_val == ge_SceneType_TV) {
            gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
        }
        else {
        }
    }
    else if (auto76814058_val == ge_RoomID_RoomChar) {
        autoFA90B0F3_val = lp_type;
        if (autoFA90B0F3_val == ge_SceneType_Convo) {
            gf_CharTychusAnimationStop();
            TriggerExecute(gt_CharTychusTalkAnimation, true, false);
        }
        else if (autoFA90B0F3_val == ge_SceneType_Scene) {
            gf_CharTychusAnimationStop();
        }
        else {
        }
    }
    else {
    }
}

void gf_ActorSceneClearTychus (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int autoB8198E91_val;
    int auto69E39FAD_val;
    int auto5792013F_val;

    // Implementation
    if ((lp_room != ge_RoomID_RoomChar) && ((lp_room != ge_RoomID_RoomMarSara) || (lp_type == ge_SceneType_Scene))) {
        gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(ge_ActorID_ActorTychus), "B", false, 0.0);
    }

    autoB8198E91_val = lp_room;
    if (autoB8198E91_val == ge_RoomID_RoomMarSara) {
        auto69E39FAD_val = lp_type;
        if (auto69E39FAD_val == ge_SceneType_Convo) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTychus), "Ready", false);
        }
        else if (auto69E39FAD_val == ge_SceneType_Scene) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTychus), "Cover", true);
        }
        else if (auto69E39FAD_val == ge_SceneType_TV) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTychus), "C", false);
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTychus), "Cover", true);
        }
        else {
        }
    }
    else if (autoB8198E91_val == ge_RoomID_RoomChar) {
        auto5792013F_val = lp_type;
        if (auto5792013F_val == ge_SceneType_Convo) {
            TriggerStop(gt_CharTychusTalkAnimation);
            gf_ClearAnimationwithblendtime(gv_aNIMID_CHARTYCHUSANDGUN_STAND2, gf_ActorUnit(ge_ActorID_ActorTychus), 0.0);
            gf_ClearAnimationwithblendtime(gv_aNIMID_CHARTYCHUSANDGUN_STAND2, gv_charGatlingGun, 0.0);
            gf_CharTychusAnimationStart();
        }
        else if (auto5792013F_val == ge_SceneType_Scene) {
            gf_CharTychusAnimationStart();
        }
        else {
        }
    }
    else {
    }
}

void gf_ActorScenePrepareHorner (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    gf_BridgeHornerAnimation(true, false, true);
}

void gf_ActorSceneClearHorner (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    gf_BridgeHornerAnimation(true, true, true);
}

void gf_ActorScenePrepareTosh (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int autoA1E9FF64_val;
    int autoE2B48295_val;

    // Implementation
    autoA1E9FF64_val = lp_room;
    if (autoA1E9FF64_val == ge_RoomID_RoomCantina) {
        autoE2B48295_val = lp_type;
        if (autoE2B48295_val == ge_SceneType_Convo) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTosh), "Cover", false);
        }
        else {
        }
    }
    else {
    }
}

void gf_ActorSceneClearTosh (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int auto0F164365_val;
    int auto00FB3EE3_val;

    // Implementation
    auto0F164365_val = lp_room;
    if (auto0F164365_val == ge_RoomID_RoomCantina) {
        auto00FB3EE3_val = lp_type;
        if (auto00FB3EE3_val == ge_SceneType_Convo) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTosh), "Cover", true);
        }
        else {
        }
    }
    else {
    }
}

void gf_ActorScenePrepareHanson (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
}

void gf_ActorSceneClearHanson (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
}

void gf_ActorScenePrepareStettmann (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
}

void gf_ActorSceneClearStettmann (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
}

void gf_ActorScenePrepareSwann (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
}

void gf_ActorSceneClearSwann (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
}

void gf_ActorScenePrepareWarfield (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    gf_CharWarfieldAnimation(true, false, true);
}

void gf_ActorSceneClearWarfield (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    gf_CharWarfieldAnimation(true, true, true);
}

void gf_ActorScenePrepareWarfieldAOD (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    gf_CharWarfieldAODAnimation(true, false, true);
}

void gf_ActorSceneClearWarfieldAOD (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    gf_CharWarfieldAODAnimation(true, true, true);
}

void gf_ActorScenePrepareLabAdjutant (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
}

void gf_ActorSceneClearLabAdjutant (int lp_toActorID, int lp_room, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate), "B", false, 0.0);
}

void gf_PreloadRoomIfCondition (int lp_room, bool lp_condition) {
    // Variable Declarations
    unit lv_roomUnit;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto1D348EDD_g;
    int auto1D348EDD_u;

    // Variable Initialization

    // Implementation
    if ((lp_condition == true) && (gv_roomPreloaded[(lp_room)] == false)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/DAFC6ABC") + IntToText((lp_room)) + StringExternal("Param/Value/014C5176") + gf_RoomName(lp_room)), false);
        gv_roomPreloaded[(lp_room)] = true;
        auto1D348EDD_g = gf_RoomUnits(lp_room);
        auto1D348EDD_u = UnitGroupCount(auto1D348EDD_g, c_unitCountAll);
        for (;; auto1D348EDD_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto1D348EDD_g, auto1D348EDD_u);
            if (lv_unit == null) { break; }
            gf_PreloadUnitStoryMap(lv_unit);
        }
    }

}

void gf_PreloadUnitGroup (unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto4D7FC978_g;
    int auto4D7FC978_u;

    // Variable Initialization

    // Implementation
    auto4D7FC978_g = lp_unitGroup;
    auto4D7FC978_u = UnitGroupCount(auto4D7FC978_g, c_unitCountAll);
    for (;; auto4D7FC978_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto4D7FC978_g, auto4D7FC978_u);
        if (lv_indexUnit == null) { break; }
        gf_PreloadUnitStoryMap(lv_indexUnit);
    }
}

void gf_PreloadUnitStoryMap (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    PreloadObject(c_gameCatalogUnit, (UnitGetType(lp_unit)), false);
    UnitLoadModel(lp_unit);
}

void gf_PrepareRoomArmoryBGGreasemonkey () {
    // Automatic Variable Declarations
    string auto694A68EA_val;
    int auto41D985D8_val;

    // Implementation
    if ((gv_armoryGreaseMonkeyPlacement == -1)) {
        gv_armoryGreaseMonkeyPlacement = RandomInt(0, 7);
        if ((libWoLC_gf_MissionStatusCheck("THanson01", libWoLC_ge_MissionStatus_Completed) == false) && (gv_armoryGreaseMonkeyPlacement == 0)) {
            gv_armoryGreaseMonkeyPlacement = 1;
        }

        if ((libWoLC_gf_MissionStatusCheck("TTychus01", libWoLC_ge_MissionStatus_Completed) == false) && (gv_armoryGreaseMonkeyPlacement == 1)) {
            gv_armoryGreaseMonkeyPlacement = 2;
        }

        if ((libWoLC_gf_MissionStatusCheck("THorner02", libWoLC_ge_MissionStatus_Completed) == false) && (gv_armoryGreaseMonkeyPlacement == 2)) {
            gv_armoryGreaseMonkeyPlacement = 3;
        }

        if ((libWoLC_gf_MissionStatusCheck("TTychus02", libWoLC_ge_MissionStatus_Completed) == false) && (gv_armoryGreaseMonkeyPlacement == 3)) {
            gv_armoryGreaseMonkeyPlacement = 4;
        }

        if ((libWoLC_gf_MissionStatusCheck("TTosh03A", libWoLC_ge_MissionStatus_Completed) == false) && (libWoLC_gf_MissionStatusCheck("TTosh03B", libWoLC_ge_MissionStatus_Completed) == false) && (gv_armoryGreaseMonkeyPlacement == 4)) {
            gv_armoryGreaseMonkeyPlacement = 5;
        }

        if ((libWoLC_gf_MissionStatusCheck("TTychus03", libWoLC_ge_MissionStatus_Completed) == false) && (gv_armoryGreaseMonkeyPlacement == 5)) {
            gv_armoryGreaseMonkeyPlacement = 6;
        }

        if ((libWoLC_gf_MissionStatusCheck("THanson03A", libWoLC_ge_MissionStatus_Completed) == false) && (libWoLC_gf_MissionStatusCheck("THanson03B", libWoLC_ge_MissionStatus_Completed) == false) && (gv_armoryGreaseMonkeyPlacement == 6)) {
            gv_armoryGreaseMonkeyPlacement = 7;
        }

        if ((libWoLC_gf_MissionStatusCheck("TTychus04", libWoLC_ge_MissionStatus_Completed) == false) && (gv_armoryGreaseMonkeyPlacement == 7)) {
            gv_armoryGreaseMonkeyPlacement = 0;
        }

        if ((libWoLC_gf_LastMap() == null)) {
        }
        else {
            if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true)) {
                auto694A68EA_val = libWoLC_gf_LastMission();
                if (auto694A68EA_val == "TTychus01") {
                    gv_armoryGreaseMonkeyPlacement = 1;
                }
                else if (auto694A68EA_val == "THanson01") {
                    gv_armoryGreaseMonkeyPlacement = 0;
                }
                else if (auto694A68EA_val == "THorner02") {
                    gv_armoryGreaseMonkeyPlacement = 2;
                }
                else if (auto694A68EA_val == "TTychus02") {
                    gv_armoryGreaseMonkeyPlacement = 3;
                }
                else if (auto694A68EA_val == "TTosh03A") {
                    gv_armoryGreaseMonkeyPlacement = 4;
                }
                else if (auto694A68EA_val == "TTosh03B") {
                    gv_armoryGreaseMonkeyPlacement = 4;
                }
                else if (auto694A68EA_val == "TTychus03") {
                    gv_armoryGreaseMonkeyPlacement = 5;
                }
                else if (auto694A68EA_val == "THanson03A") {
                    gv_armoryGreaseMonkeyPlacement = 6;
                }
                else if (auto694A68EA_val == "THanson03B") {
                    gv_armoryGreaseMonkeyPlacement = 6;
                }
                else if (auto694A68EA_val == "TTychus04") {
                    gv_armoryGreaseMonkeyPlacement = 7;
                }
                else {
                }
            }

        }
    }

    auto41D985D8_val = gv_armoryGreaseMonkeyPlacement;
    if (auto41D985D8_val == 0) {
        gf_ResetActorToLocation(ge_ActorID_ActorArmoryBG1, UnitGetAttachmentPoint(gv_armoryRoom, "Pos_Firebat"));
    }
    else if (auto41D985D8_val == 1) {
        gf_ResetActorToLocation(ge_ActorID_ActorArmoryBG1, UnitGetAttachmentPoint(gv_armoryRoom, "Pos_Marauder"));
    }
    else if (auto41D985D8_val == 2) {
        gf_ResetActorToLocation(ge_ActorID_ActorArmoryBG1, UnitGetAttachmentPoint(gv_armoryRoom, "Pos_Spidermine"));
    }
    else if (auto41D985D8_val == 3) {
        gf_ResetActorToLocation(ge_ActorID_ActorArmoryBG1, UnitGetAttachmentPoint(gv_armoryRoom, "Pos_SiegeTank"));
    }
    else if (auto41D985D8_val == 4) {
        gf_ResetActorToLocation(ge_ActorID_ActorArmoryBG1, UnitGetAttachmentPoint(gv_armoryRoom, "Pos_Ghost"));
    }
    else if (auto41D985D8_val == 5) {
        gf_ResetActorToLocation(ge_ActorID_ActorArmoryBG1, UnitGetAttachmentPoint(gv_armoryRoom, "Pos_Dropship"));
    }
    else if (auto41D985D8_val == 6) {
        gf_ResetActorToLocation(ge_ActorID_ActorArmoryBG1, UnitGetAttachmentPoint(gv_armoryRoom, "Pos_Viking"));
    }
    else if (auto41D985D8_val == 7) {
        gf_ResetActorToLocation(ge_ActorID_ActorArmoryBG1, UnitGetAttachmentPoint(gv_armoryRoom, "Pos_Banshee"));
    }
    else {
        gf_ResetActorToLocation(ge_ActorID_ActorArmoryBG1, UnitGetAttachmentPoint(gv_armoryRoom, "Pos_Firebat"));
    }
}

void gf_PrepareRoomCantinaTrophiesVisibilityLogic () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gf_MissionStatusCheck("THanson03A", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_RemoveVisibleUnit(false, gv_cantinaTrophyHansonA);
    }

    if ((libWoLC_gf_MissionStatusCheck("THanson03B", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_RemoveVisibleUnit(false, gv_cantinaTrophyHansonB);
    }

    if ((libWoLC_gf_MissionStatusCheck("THorner04", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_RemoveVisibleUnit(false, gv_cantinaTrophyHorner);
    }

    if ((libWoLC_gf_MissionStatusCheck("TTosh03A", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_RemoveVisibleUnit(false, gv_cantinaTrophyToshA);
    }

    if ((libWoLC_gf_MissionStatusCheck("TTosh03B", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_RemoveVisibleUnit(false, gv_cantinaTrophyToshB);
    }

}

void gf_PrepareRoomCantinaPostersVisibilityLogic () {
    // Automatic Variable Declarations
    // Implementation
    gf_RemoveVisibleUnit(false, gv_cantinaPoster1);
    gf_RemoveVisibleUnit(false, gv_cantinaPoster2);
    gf_RemoveVisibleUnit(false, gv_cantinaPoster3);
    gf_RemoveVisibleUnit(false, gv_cantinaPoster4);
    gf_RemoveVisibleUnit(false, gv_cantinaPoster5);
}

void gf_PrepareRoomCharArtifactLogic () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Available) == false)) {
        UnitGroupRemove(gv_clickables, gv_charArtifact);
        gf_TurnClickableOnOff(gv_charArtifact, false);
    }

}

bool gf_LabCrystalEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return libWoLC_gf_MissionStatusCheck("TTychus02", libWoLC_ge_MissionStatus_Completed);
}

void gf_PrepareRoomLabCrystalAtrifactVisibilityLogic () {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_LabCrystalEnabled() == false)) {
        gf_RemoveVisibleUnit(false, gv_labCrystal);
    }

    if ((libWoLC_gf_StoryStateInteger("LabArtifactCount") < 1)) {
        gf_RemoveVisibleUnit(false, gv_labArtifact1);
        gf_RemoveVisibleUnit(false, gv_labArtifactField);
    }

    if ((libWoLC_gf_StoryStateInteger("LabArtifactCount") < 2)) {
        gf_RemoveVisibleUnit(false, gv_labArtifact2);
    }

    if ((libWoLC_gf_StoryStateInteger("LabArtifactCount") < 3)) {
        gf_RemoveVisibleUnit(false, gv_labArtifact3);
    }

    if ((libWoLC_gf_StoryStateInteger("LabArtifactCount") < 4)) {
        gf_RemoveVisibleUnit(false, gv_labArtifact4);
    }

}

void gf_PrepareRoomActorVisibility (int lp_roomID) {
    // Variable Declarations
    int lv_actorIndex;
    int lv_actorID;

    // Automatic Variable Declarations
    int autoC888A67E_ae;
    const int autoC888A67E_ai = 1;

    // Variable Initialization
    lv_actorID = ge_ActorID_ActorNone;

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/EE48D823") + gf_RoomName(lp_roomID)), false);
    autoC888A67E_ae = gv_c_ACTOR_LAST;
    lv_actorIndex = gv_c_ACTOR_FIRST;
    for ( ; ( (autoC888A67E_ai >= 0 && lv_actorIndex <= autoC888A67E_ae) || (autoC888A67E_ai < 0 && lv_actorIndex >= autoC888A67E_ae) ) ; lv_actorIndex += autoC888A67E_ai ) {
        lv_actorID = gv_actors[lv_actorIndex].lv_actorID;
        if ((gf_ActorIsEnabledInRoom(lv_actorID, lp_roomID) == false)) {
            gf_RemoveVisibleUnit(false, gf_ActorUnit(lv_actorID));
        }
        else {
            TriggerDebugOutput(1, (StringExternal("Param/Value/E4C128DC") + gf_ActorName(lv_actorID)), false);
            gf_ReloadRoomActorAnimation(lv_actorID, lp_roomID);
            gf_PlayActorLightingAnim(lv_actorID, ge_ActorID_ActorNone, lp_roomID, ge_ActorLightingType_Default);
            gf_RemoveVisibleUnit(true, gf_ActorUnit(lv_actorID));
        }
    }
}

void gf_PrepareRoomActors (int lp_roomID, bool lp_includeRaynor) {
    // Variable Declarations
    int lv_actorIndex;

    // Automatic Variable Declarations
    int autoBE62A339_val;
    int auto31CE34DD_ae;
    const int auto31CE34DD_ai = 1;

    // Variable Initialization

    // Implementation
    gf_PrepareRoomActorVisibility(lp_roomID);
    autoBE62A339_val = lp_roomID;
    if (autoBE62A339_val == ge_RoomID_RoomArmory) {
        if ((lp_includeRaynor == true)) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(40));
        }

        gf_PrepareRoomArmoryBGGreasemonkey();
        gf_ResetActorToLocation(ge_ActorID_ActorSwann, PointFromId(69));
    }
    else if (autoBE62A339_val == ge_RoomID_RoomBridge) {
        if ((lp_includeRaynor == true)) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(36));
        }

        gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(92));
        gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(71));
        gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(967));
        gf_ResetActorToLocation(ge_ActorID_ActorTosh, PointFromId(966));
        gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
        gf_ResetActorToLocation(ge_ActorID_ActorStetmann, PointFromId(777));
    }
    else if (autoBE62A339_val == ge_RoomID_RoomCantina) {
        if ((lp_includeRaynor == true)) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynor, gf_RaynorCantinaHome());
        }

        gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(20));
        gf_ResetActorToLocation(ge_ActorID_ActorTosh, PointFromId(164));
        gf_ResetActorToLocation(ge_ActorID_ActorYbarraMiscMerc, PointFromId(20));
        gf_ResetActorToLocation(ge_ActorID_ActorCooperBarTender, PointFromId(128));
        gf_ResetActorToLocation(ge_ActorID_ActorHillMercContact, PointFromId(70));
        auto31CE34DD_ae = gv_c_ACTOR_LAST;
        lv_actorIndex = gv_c_ACTOR_FIRST;
        for ( ; ( (auto31CE34DD_ai >= 0 && lv_actorIndex <= auto31CE34DD_ae) || (auto31CE34DD_ai < 0 && lv_actorIndex >= auto31CE34DD_ae) ) ; lv_actorIndex += auto31CE34DD_ai ) {
            if ((gf_ActorIsEnabledInRoom(gv_actors[lv_actorIndex].lv_actorID, ge_RoomID_RoomCantina) == true) && (gv_actors[lv_actorIndex].lv_cantinaBGType != ge_ActorCantinaBGType_None) && (gv_actors[lv_actorIndex].lv_cantinaBGLocID > 0)) {
                gf_ResetActorToLocation(gv_actors[lv_actorIndex].lv_actorID, gv_cantinaBGLocs[gv_actors[lv_actorIndex].lv_cantinaBGLocID].lv_location);
            }

        }
    }
    else if (autoBE62A339_val == ge_RoomID_RoomChar) {
        if ((lp_includeRaynor == true)) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(218));
        }

        gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(221));
        gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(229));
        gf_ResetActorToLocation(ge_ActorID_ActorWarfieldAOD, PointFromId(229));
    }
    else if (autoBE62A339_val == ge_RoomID_RoomCorridor) {
        if ((lp_includeRaynor == true)) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(132));
        }

        gf_ResetActorToLocation(ge_ActorID_ActorZeratul, PointFromId(133));
    }
    else if (autoBE62A339_val == ge_RoomID_RoomFlagship) {
    }
    else if (autoBE62A339_val == ge_RoomID_RoomGalaxy) {
    }
    else if (autoBE62A339_val == ge_RoomID_RoomLab) {
        if ((lp_includeRaynor == true)) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynor, gf_LabRaynorHome());
        }

        gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(33));
        gf_ResetActorToLocation(ge_ActorID_ActorAdjutantConfederate, PointFromId(444));
        if ((gv_stetmannFront == true)) {
            gf_ResetActorToLocation(ge_ActorID_ActorStetmann, PointFromId(194));
        }
        else {
            gf_ResetActorToLocation(ge_ActorID_ActorStetmann, PointFromId(404));
        }
    }
    else if (autoBE62A339_val == ge_RoomID_RoomMarSara) {
        if ((lp_includeRaynor == true)) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(89));
        }

        gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(91));
        gf_ResetActorToLocation(ge_ActorID_ActorAdjutant, PointFromId(495));
    }
    else if (autoBE62A339_val == ge_RoomID_RoomObservatory) {
        if ((lp_includeRaynor == true)) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(248));
        }

        gf_ResetActorToLocation(ge_ActorID_ActorValerian, PointFromId(169));
    }
    else {
    }
}

void gf_PrepareRoom (int lp_room) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    int autoD1937875_val;

    // Variable Initialization

    // Implementation
    SoundSetReverb("Reverb_StoryModeTest", 0.0, false, false);
    autoD1937875_val = lp_room;
    if (autoD1937875_val == ge_RoomID_RoomConscription) {
        TriggerExecute(gt_PrepareRoomConscription, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomArmory) {
        TriggerExecute(gt_PrepareRoomArmory, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomBridge) {
        TriggerExecute(gt_PrepareRoomBridge, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomCantina) {
        TriggerExecute(gt_PrepareRoomCantina, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomChar) {
        TriggerExecute(gt_PrepareRoomChar, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomCorridor) {
        TriggerExecute(gt_PrepareRoomCorridor, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomGalaxy) {
        TriggerExecute(gt_PrepareRoomGalaxy, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomLab) {
        TriggerExecute(gt_PrepareRoomLab, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomMarSara) {
        TriggerExecute(gt_PrepareRoomMarSara, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomFlagship) {
        TriggerExecute(gt_PrepareRoomFlagship, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomObservatory) {
        TriggerExecute(gt_PrepareRoomObservatory, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomTechPurchase) {
        TriggerExecute(gt_PrepareRoomTechPurchase, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomLabResearch) {
        TriggerExecute(gt_PrepareRoomLabResearch, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomMercenary) {
        TriggerExecute(gt_PrepareRoomMercenary, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomMissionArchieves) {
        TriggerExecute(gt_PrepareRoomMissionArchieves, true, false);
    }
    else if (autoD1937875_val == ge_RoomID_RoomVoid) {
        TriggerExecute(gt_PrepareRoomVoid, true, false);
    }
    else {
    }
    SoundLengthQueryWait();
}

void gf_WalkinRoom (int lp_room) {
    // Automatic Variable Declarations
    int auto0CE9CDAF_val;

    // Implementation
    auto0CE9CDAF_val = lp_room;
    if (auto0CE9CDAF_val == ge_RoomID_RoomConscription) {
        TriggerExecute(gt_WalkinConscription, true, true);
    }
    else if (auto0CE9CDAF_val == ge_RoomID_RoomArmory) {
        TriggerExecute(gt_WalkinArmory, true, true);
    }
    else if (auto0CE9CDAF_val == ge_RoomID_RoomBridge) {
        TriggerExecute(gt_WalkinBridge, true, true);
    }
    else if (auto0CE9CDAF_val == ge_RoomID_RoomCantina) {
        TriggerExecute(gt_WalkinCantina, true, true);
    }
    else if (auto0CE9CDAF_val == ge_RoomID_RoomChar) {
        TriggerExecute(gt_WalkinChar, true, true);
    }
    else if (auto0CE9CDAF_val == ge_RoomID_RoomLab) {
        TriggerExecute(gt_WalkinLab, true, true);
    }
    else if (auto0CE9CDAF_val == ge_RoomID_RoomMarSara) {
        TriggerExecute(gt_WalkinMarSara, true, true);
    }
    else {
    }
}

void gf_EnterRoom (int lp_room, bool lp_showTransition) {
    // Automatic Variable Declarations
    int auto63D10BA2_val;

    // Implementation
    gf_ViewRoomCamera(lp_room, PlayerGroupAll(), 0.0);
    if ((lp_showTransition == true)) {
        gf_WalkinRoom(lp_room);
    }

    auto63D10BA2_val = lp_room;
    if (auto63D10BA2_val == ge_RoomID_RoomConscription) {
        TriggerExecute(gt_EnterConscription, true, false);
    }
    else if (auto63D10BA2_val == ge_RoomID_RoomArmory) {
        TriggerExecute(gt_EnterArmory, true, false);
    }
    else if (auto63D10BA2_val == ge_RoomID_RoomBridge) {
        TriggerExecute(gt_EnterBridge, true, false);
    }
    else if (auto63D10BA2_val == ge_RoomID_RoomCantina) {
        TriggerExecute(gt_EnterCantina, true, false);
    }
    else if (auto63D10BA2_val == ge_RoomID_RoomChar) {
        TriggerExecute(gt_EnterChar, true, false);
    }
    else if (auto63D10BA2_val == ge_RoomID_RoomLab) {
        TriggerExecute(gt_EnterLab, true, false);
    }
    else if (auto63D10BA2_val == ge_RoomID_RoomMarSara) {
        TriggerExecute(gt_EnterMarSara, true, false);
    }
    else {
    }
    if (((lp_room == ge_RoomID_RoomArmory) || (lp_room == ge_RoomID_RoomBridge) || (lp_room == ge_RoomID_RoomCantina) || (lp_room == ge_RoomID_RoomChar) || (lp_room == ge_RoomID_RoomLab) || (lp_room == ge_RoomID_RoomConscription) || (lp_room == ge_RoomID_RoomMarSara))) {
        libCamp_gf_UpdateRoomChangePanel();
    }

}

void gf_LeaveRoomArmory (bool lp_showTransition) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showTransition == true)) {
    }

    TriggerExecute(gt_ArmoryBackgroundActivitiesStop, true, false);
}

void gf_LeaveRoomBridge (bool lp_showTransition) {
    // Variable Declarations
    point lv_target;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_BridgeActorAnimation(true, false, true);
    gf_DestoryBridgeBackgroundSound();
    TriggerExecute(gt_BridgeBackgroundActivitiesStop, true, false);
}

void gf_LeaveRoomCantina (bool lp_showTransition) {
    // Variable Declarations
    point lv_target;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", false);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", false);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTosh), "Cover", false);
    gf_MuteJukebox(true, gv_cantinaJukeboxID);
    gf_DestoryCantinaBackgroundSound();
    TriggerExecute(gt_CantinaBackgroundActivitiesStop, true, false);
}

void gf_LeaveRoomChar (bool lp_showTransition) {
    // Automatic Variable Declarations
    // Implementation
    gf_CharTychusAnimationStop();
    gf_DestoryCharBackgroundSounds();
    gf_CharActorAnimation(true, false, true);
}

void gf_LeaveRoomConscription (bool lp_showTransition) {
    // Automatic Variable Declarations
}

void gf_LeaveRoomLab (bool lp_showTransition) {
    // Automatic Variable Declarations
    // Implementation
    gf_LabActorAnimation(true, false, true);
    if ((lp_showTransition == true)) {
    }

    TriggerExecute(gt_LabBackgroundActivitiesStop, true, false);
    gf_TurnLabBackgroundSoundOnOff(false);
}

void gf_LeaveRoomMarSara (bool lp_showTransition) {
    // Automatic Variable Declarations
    // Implementation
    gf_TurnMarSaraBarBackgroundSoundOnOff(false);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", false);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTychus), "Cover", false);
    gf_MuteJukebox(true, gv_marSaraJukeboxID);
}

void gf_LeaveRoomGalaxy (bool lp_showTransition) {
    // Automatic Variable Declarations
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), true);
}

void gf_LeaveRoomTechPurchase (bool lp_showTransition) {
    // Automatic Variable Declarations
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), true);
}

void gf_LeaveRoomLabResearch (bool lp_showTransition) {
    // Automatic Variable Declarations
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), true);
}

void gf_LeaveRoomMercenary (bool lp_showTransition) {
    // Automatic Variable Declarations
    // Implementation
    gf_MuteJukebox(true, gv_cantinaJukeboxID);
    UISetWorldVisible(PlayerGroupAll(), true);
}

void gf_LeaveRoomMissionArchieves (bool lp_showTransition) {
    // Automatic Variable Declarations
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), true);
}

void gf_LeaveRoom (int lp_room, bool lp_showTransition, bool lp_stopTransmissions) {
    // Automatic Variable Declarations
    int autoF20B8E05_val;

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/8A0D742E") + gf_RoomName(lp_room)), false);
    autoF20B8E05_val = lp_room;
    if (autoF20B8E05_val == ge_RoomID_RoomConscription) {
        gf_LeaveRoomConscription(true);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomArmory) {
        gf_LeaveRoomArmory(lp_showTransition);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomBridge) {
        gf_LeaveRoomBridge(lp_showTransition);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomCantina) {
        gf_LeaveRoomCantina(lp_showTransition);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomChar) {
        gf_LeaveRoomChar(lp_showTransition);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomLab) {
        gf_LeaveRoomLab(lp_showTransition);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomMarSara) {
        gf_LeaveRoomMarSara(lp_showTransition);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomGalaxy) {
        gf_LeaveRoomGalaxy(lp_showTransition);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomTechPurchase) {
        gf_LeaveRoomTechPurchase(lp_showTransition);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomLabResearch) {
        gf_LeaveRoomLabResearch(lp_showTransition);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomMercenary) {
        gf_LeaveRoomMercenary(lp_showTransition);
    }
    else if (autoF20B8E05_val == ge_RoomID_RoomMissionArchieves) {
        gf_LeaveRoomMissionArchieves(lp_showTransition);
    }
    else {
    }
    if ((lp_stopTransmissions == true)) {
        gf_StopAllTransmissionConversation();
    }

}

void gf_InitMarSaraBarUnits () {
    // Automatic Variable Declarations
    // Implementation
    gv_marSaraRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(4), UnitFilter(0, 0, 0, 0), 0);
    gf_ShowHideUnitGroup(false, gv_marSaraRoomUnits);
    gv_marSaraRoom = UnitFromId(80);
}

void gf_InitMarSaraBarHotspots () {
    // Automatic Variable Declarations
    // Implementation
    gv_marSaraAdjutant = UnitFromId(97);
    gv_marSaraProps = UnitFromId(97);
    gv_marSaraBadge = UnitFromId(324);
    gv_marSaraBriefcase = UnitFromId(144);
    gv_marSaraHydra = UnitFromId(236);
    gv_marSaraJukebox = UnitFromId(81);
    gv_marSaraPinboard = UnitFromId(160);
    gv_marSaraTV = UnitFromId(102);
    gf_AddClickable(gv_clickables, gv_marSaraBriefcase, ge_RoomID_RoomMarSara, ge_ClickableCursorType_Activate);
    gf_AddClickable(gv_clickables, gv_marSaraTV, ge_RoomID_RoomMarSara, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_marSaraJukebox, ge_RoomID_RoomMarSara, ge_ClickableCursorType_Activate);
    if ((libWoLC_gf_MissionStatusCheck("TRaynor01", libWoLC_ge_MissionStatus_Completed) == true)) {
    }

    if ((libWoLC_gf_MissionStatusCheck("TRaynor02", libWoLC_ge_MissionStatus_Completed) == true)) {
        gf_AddClickable(gv_clickables, gv_marSaraBadge, ge_RoomID_RoomMarSara, ge_ClickableCursorType_Look);
        gf_AddClickable(gv_clickables, gv_marSaraHydra, ge_RoomID_RoomMarSara, ge_ClickableCursorType_Look);
    }

}

void gf_PrepareCharSkybox (bool lp_convo) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_convo == true)) {
        GameSetBackground(c_backgroundTerrain, "SMCharInteractiveSkyparallax", 100.0);
    }
    else {
        GameSetBackground(c_backgroundTerrain, "SMCharInteractive02Skyparallax", 100.0);
    }
}

bool gf_RoomStates (int lp_stateType, int lp_room) {
    // Variable Declarations
    string lv_states;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_states = "";

    // Implementation
    lv_states = libCamp_gf_StoryModeRoomStates();
    lv_index = gf_RoomStatesIndex(lp_stateType, lp_room);
    return StringEqual(StringSub(lv_states, lv_index, lv_index), "1", c_stringCase);
}

void gf_SetRoomStates (int lp_stateType, int lp_room, bool lp_states) {
    // Variable Declarations
    string lv_states;
    int lv_index;
    string lv_newState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_states = "";
    lv_newState = "";

    // Implementation
    lv_states = libCamp_gf_StoryModeRoomStates();
    lv_index = gf_RoomStatesIndex(lp_stateType, lp_room);
    if ((lp_states == true)) {
        lv_newState = "1";
    }
    else {
        lv_newState = "0";
    }
    libCamp_gf_SetStoryModeRoomStates(StringReplace(lv_states, lv_newState, lv_index, lv_index));
}

int gf_RoomStatesIndex (int lp_stateType, int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    return (((lp_stateType) * gv_c_ROOM_LAST) + (lp_room));
}

void gf_RegisterRoomStates () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_RegisterStoryModeRoomStatesDefaultCallback(gt_RoomStatesDefaultCallback);
}

void gf_BridgeActorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly) {
    // Automatic Variable Declarations
    // Implementation
    gf_BridgeRaynorAnimation(lp_forced, lp_onOff, lp_instantly);
    gf_BridgeHornerAnimation(lp_forced, lp_onOff, lp_instantly);
}

void gf_BridgeRaynorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly) {
    // Automatic Variable Declarations
    // Implementation
    gf_RoomActorAnimation(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, lp_forced, lp_onOff, lp_instantly);
}

void gf_BridgeHornerAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly) {
    // Automatic Variable Declarations
    // Implementation
    gf_RoomActorAnimation(ge_RoomID_RoomBridge, ge_ActorID_ActorHorner, lp_forced, lp_onOff, lp_instantly);
}

void gf_LabActorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly) {
    // Automatic Variable Declarations
    // Implementation
    gf_LabRaynorAnimation(lp_forced, lp_onOff, lp_instantly);
}

void gf_LabRaynorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly) {
    // Automatic Variable Declarations
    // Implementation
    gf_RoomActorAnimation(ge_RoomID_RoomLab, ge_ActorID_ActorRaynor, lp_forced, lp_onOff, lp_instantly);
}

void gf_CharTychusAnimationStart () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(gt_CharTychusAnimation);
    TriggerExecute(gt_CharTychusAnimation, true, false);
}

void gf_CharTychusAnimationStop () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(gt_CharTychusAnimation);
    gf_ClearAnimationwithblendtime(gv_aNIMID_CHARTYCHUSANDGUN_STAND2, gf_ActorUnit(ge_ActorID_ActorTychus), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_CHARTYCHUSANDGUN_STAND2, gv_charGatlingGun, 0.0);
}

void gf_CharActorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly) {
    // Automatic Variable Declarations
    // Implementation
    gf_CharRaynorAnimation(lp_forced, lp_onOff, lp_instantly);
    gf_CharWarfieldAnimation(lp_forced, lp_onOff, lp_instantly);
    gf_CharWarfieldAODAnimation(lp_forced, lp_onOff, lp_instantly);
}

void gf_CharRaynorAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly) {
    // Automatic Variable Declarations
    // Implementation
    gf_RoomActorAnimation(ge_RoomID_RoomChar, ge_ActorID_ActorRaynorMarine, lp_forced, lp_onOff, lp_instantly);
}

void gf_CharWarfieldAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly) {
    // Automatic Variable Declarations
    // Implementation
    gf_RoomActorAnimation(ge_RoomID_RoomChar, ge_ActorID_ActorWarfield, lp_forced, lp_onOff, lp_instantly);
}

void gf_CharWarfieldAODAnimation (bool lp_forced, bool lp_onOff, bool lp_instantly) {
    // Automatic Variable Declarations
    // Implementation
    gf_RoomActorAnimation(ge_RoomID_RoomChar, ge_ActorID_ActorWarfieldAOD, lp_forced, lp_onOff, lp_instantly);
}

void gf_RoomActorAnimation (int lp_room, int lp_actor, bool lp_forced, bool lp_onOff, bool lp_instantly) {
    // Variable Declarations
    string lv_animprop;
    string lv_datatable_name;
    int lv_current;

    // Automatic Variable Declarations
    int auto0D35DB4F_val;

    // Variable Initialization
    lv_animprop = "Stand";
    lv_datatable_name = "";

    // Implementation
    auto0D35DB4F_val = lp_room;
    if (auto0D35DB4F_val == ge_RoomID_RoomBridge) {
        lv_animprop = "B";
    }
    else if (auto0D35DB4F_val == ge_RoomID_RoomLab) {
        if (((libWoLC_gf_MissionStatusCheck("TZeratul01", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul02", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul03", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul04", libWoLC_ge_MissionStatus_Available) == true))) {
            return ;
        }
        else {
            lv_animprop = "L";
        }
    }
    else if (auto0D35DB4F_val == ge_RoomID_RoomChar) {
        lv_animprop = "D";
    }
    else {
        return ;
    }
    lv_datatable_name = (IntToString((lp_room)) + gf_ActorStringID(lp_actor));
    if ((lp_forced == true)) {
        if ((lp_instantly == true)) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(lp_actor), lv_animprop, lp_onOff);
        }
        else {
            gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(lp_actor), lv_animprop, lp_onOff, c_animTimeDefault);
        }
        if ((lp_onOff == true)) {
            DataTableSetInt(true, lv_datatable_name, 9);
        }
        else {
            DataTableSetInt(true, lv_datatable_name, 0);
        }
        return ;
    }

    lv_current = DataTableGetInt(true, lv_datatable_name);
    if ((gv_worldMode == ge_WorldMode_WorldModeGlobal) && (UnitTestState(gf_ActorUnit(lp_actor), c_unitStateIdle) == true) && (libNtve_gf_UnitIsHidden(gf_ActorUnit(lp_actor)) == false) && (gv_currentRoom == lp_room)) {
        if ((lv_current <= 1)) {
            lv_current += 1;
            DataTableSetInt(true, lv_datatable_name, lv_current);
        }

        if ((lv_current == 1)) {
            libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gf_ActorUnit(lp_actor)), lv_animprop);
        }

    }
    else {
        if ((UnitTestState(gf_ActorUnit(lp_actor), c_unitStateIdle) == false) && (lv_current > 0)) {
            lv_current = 0;
            DataTableSetInt(true, lv_datatable_name, lv_current);
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(lp_actor), lv_animprop, false);
        }

    }
}

int gf_RoomLocation (int lp_room) {
    // Automatic Variable Declarations
    int auto403A5568_val;

    // Implementation
    auto403A5568_val = lp_room;
    if (auto403A5568_val == ge_RoomID_RoomMarSara) {
        return ge_RoomLocation_RoomLocationMarSara;
    }
    else if (auto403A5568_val == ge_RoomID_RoomBridge) {
        return ge_RoomLocation_RoomLocationHyperion;
    }
    else if (auto403A5568_val == ge_RoomID_RoomConscription) {
        if ((libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed) == false)) {
            return ge_RoomLocation_RoomLocationMarSara;
        }
        else {
            return ge_RoomLocation_RoomLocationHyperion;
        }
    }
    else if (auto403A5568_val == ge_RoomID_RoomArmory) {
        return ge_RoomLocation_RoomLocationHyperion;
    }
    else if (auto403A5568_val == ge_RoomID_RoomCantina) {
        return ge_RoomLocation_RoomLocationHyperion;
    }
    else if (auto403A5568_val == ge_RoomID_RoomCorridor) {
        return ge_RoomLocation_RoomLocationOthers;
    }
    else if (auto403A5568_val == ge_RoomID_RoomLab) {
        return ge_RoomLocation_RoomLocationHyperion;
    }
    else if (auto403A5568_val == ge_RoomID_RoomObservatory) {
        return ge_RoomLocation_RoomLocationValerianFlagship;
    }
    else if (auto403A5568_val == ge_RoomID_RoomFlagship) {
        return ge_RoomLocation_RoomLocationValerianFlagship;
    }
    else if (auto403A5568_val == ge_RoomID_RoomChar) {
        return ge_RoomLocation_RoomLocationChar;
    }
    else {
    }
    return ge_RoomLocation_RoomLocationOthers;
}

int gf_ConvertIntegerToRoomLocation (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lp_index;
}

bool gf_RoomIsOnLocation (int lp_room, int lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return (gf_RoomLocation(lp_room) == lp_location);
}

bool gf_RoomLocationIsEnabled (int lp_location) {
    // Automatic Variable Declarations
    // Implementation
    return gv_roomLocationEnabled[(lp_location)];
}

void gf_EnableRoomLocation (bool lp_enableDisable, int lp_location) {
    // Automatic Variable Declarations
    // Implementation
    gv_roomLocationEnabled[(lp_location)] = (lp_enableDisable == true);
}

void gf_UnloadLocation (int lp_location) {
    // Variable Declarations
    int lv_index;
    int lv_room;

    // Automatic Variable Declarations
    int auto0878F892_ae;
    const int auto0878F892_ai = 1;

    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;

    // Implementation
    auto0878F892_ae = gv_c_ROOM_LAST;
    lv_index = gv_c_ROOM_FIRST;
    for ( ; ( (auto0878F892_ai >= 0 && lv_index <= auto0878F892_ae) || (auto0878F892_ai < 0 && lv_index >= auto0878F892_ae) ) ; lv_index += auto0878F892_ai ) {
        lv_room = gf_RoomFromIndex(lv_index);
        if ((gf_RoomIsOnLocation(lv_room, lp_location) == true)) {
            gf_UnloadRoom(lv_room);
        }

    }
}

void gf_UnloadRoom (int lp_room) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup autoF63B25EA_g;
    int autoF63B25EA_u;

    // Variable Initialization

    // Implementation
    if ((gv_roomPreloaded[(lp_room)] == false)) {
        return ;
    }

    gv_roomPreloaded[(lp_room)] = false;
    autoF63B25EA_g = gf_RoomUnits(lp_room);
    autoF63B25EA_u = UnitGroupCount(autoF63B25EA_g, c_unitCountAll);
    for (;; autoF63B25EA_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(autoF63B25EA_g, autoF63B25EA_u);
        if (lv_pickedUnit == null) { break; }
        UnitUnloadModel(lv_pickedUnit);
    }
}

void gf_PreloadLocation (int lp_location) {
    // Variable Declarations
    int lv_index;
    int lv_room;

    // Automatic Variable Declarations
    int autoF4EEB69E_ae;
    const int autoF4EEB69E_ai = 1;

    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;

    // Implementation
    autoF4EEB69E_ae = gv_c_ROOM_LAST;
    lv_index = gv_c_ROOM_FIRST;
    for ( ; ( (autoF4EEB69E_ai >= 0 && lv_index <= autoF4EEB69E_ae) || (autoF4EEB69E_ai < 0 && lv_index >= autoF4EEB69E_ae) ) ; lv_index += autoF4EEB69E_ai ) {
        lv_room = gf_RoomFromIndex(lv_index);
        if ((gf_RoomIsOnLocation(lv_room, lp_location) == true) && (gf_RoomIsEnabled(lv_room) == true)) {
            TriggerDebugOutput(1, (StringExternal("Param/Value/760FB0C0") + gf_RoomName(lv_room)), false);
            gf_PreloadRoomIfCondition(lv_room, true);
        }

    }
}

void gf_ReloadLocations () {
    // Variable Declarations
    int lv_index;
    int lv_room;
    int lv_location;
    string lv_image;

    // Automatic Variable Declarations
    int autoD9FD6817_ae;
    const int autoD9FD6817_ai = 1;

    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;
    lv_location = ge_RoomLocation_RoomLocationHyperion;

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/E6AEF428"), false);
    if ((gv_currentLocation == ge_RoomLocation_RoomLocationOthers)) {
        return ;
    }

    autoD9FD6817_ae = gv_c_ROOMLOCATION_LAST;
    lv_index = gv_c_ROOMLOCATION_FIRST;
    for ( ; ( (autoD9FD6817_ai >= 0 && lv_index <= autoD9FD6817_ae) || (autoD9FD6817_ai < 0 && lv_index >= autoD9FD6817_ae) ) ; lv_index += autoD9FD6817_ai ) {
        lv_location = gf_ConvertIntegerToRoomLocation(lv_index);
        if ((lv_location == gv_currentLocation)) {
            TriggerDebugOutput(1, (StringExternal("Param/Value/C2DA54AC") + IntToText(lv_index)), false);
            gf_PreloadLocation(lv_location);
        }
        else {
            gf_UnloadLocation(lv_location);
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/BBFEC2A0"), false);
    gf_ReloadActors(false);
    TriggerDebugOutput(1, StringExternal("Param/Value/18FFC861"), false);
}

trigger auto_gf_TurnLabBackgroundSoundOnOff_Trigger = null;
bool auto_gf_TurnLabBackgroundSoundOnOff_lp_onOff;

void gf_TurnLabBackgroundSoundOnOff (bool lp_onOff) {
    auto_gf_TurnLabBackgroundSoundOnOff_lp_onOff = lp_onOff;

    if (auto_gf_TurnLabBackgroundSoundOnOff_Trigger == null) {
        auto_gf_TurnLabBackgroundSoundOnOff_Trigger = TriggerCreate("auto_gf_TurnLabBackgroundSoundOnOff_TriggerFunc");
    }

    TriggerExecute(auto_gf_TurnLabBackgroundSoundOnOff_Trigger, false, false);
}

bool auto_gf_TurnLabBackgroundSoundOnOff_TriggerFunc (bool testConds, bool runActions) {
    bool lp_onOff = auto_gf_TurnLabBackgroundSoundOnOff_lp_onOff;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        ActorSend(ActorFrom(gv_sOUNDACTOR_Lab_LiquidTanks), "SoundSetPaused");
        ActorSend(ActorFrom(gv_sOUNDACTOR_Lab_LiquidTanks), "SoundSetMuted");
        ActorSend(ActorFrom(gv_sOUNDACTOR_Lab_ResearchConsole), "SoundSetPaused");
        ActorSend(ActorFrom(gv_sOUNDACTOR_Lab_ResearchConsole), "SoundSetMuted");
        ActorSend(ActorFrom(gv_sOUNDACTOR_Lab_Monitors), "SoundSetPaused");
        ActorSend(ActorFrom(gv_sOUNDACTOR_Lab_Monitors), "SoundSetMuted");
    }
    else {
        ActorSend(ActorFrom(gv_sOUNDACTOR_Lab_LiquidTanks), "SoundSetMuted 1");
        ActorSend(ActorFrom(gv_sOUNDACTOR_Lab_ResearchConsole), "SoundSetMuted 1");
        ActorSend(ActorFrom(gv_sOUNDACTOR_Lab_Monitors), "SoundSetMuted 1");
    }
    return true;
}

void gf_TurnMarSaraBarBackgroundSoundOnOff (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_Fan), "SoundSetPaused");
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_Fan), "SoundSetMuted");
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_NeonSign), "SoundSetPaused");
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_NeonSign), "SoundSetMuted");
    }
    else {
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_Fan), "SoundSetMuted 1");
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_NeonSign), "SoundSetMuted 1");
    }
}

void gf_CreateBridgeBackgroundSound () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_bridgeBGSoundRadioBanter01 == null)) {
        SoundPlayAtPoint(SoundLink("Emitter_HyperionBridgeRadioBanter01", -1), PlayerGroupAll(), PointFromId(538), 0.0, 100.0, 0.0);
        gv_bridgeBGSoundRadioBanter01 = SoundLastPlayed();
    }

    gf_Ambience_RestoreSoundVolume(SoundLink("Emitter_HyperionBridgeRadioBanter01", -1), gv_bridgeBGSoundRadioBanter01);
    if ((gv_bridgeBGSoundRadioBanter02 == null)) {
        SoundPlayAtPoint(SoundLink("Emitter_HyperionBridgeRadioBanter02", -1), PlayerGroupAll(), PointFromId(668), 0.0, 100.0, 0.0);
        gv_bridgeBGSoundRadioBanter02 = SoundLastPlayed();
    }

    gf_Ambience_RestoreSoundVolume(SoundLink("Emitter_HyperionBridgeRadioBanter02", -1), gv_bridgeBGSoundRadioBanter02);
    if ((gv_bridgeBGSoundRadioBanter03 == null)) {
        SoundPlayAtPoint(SoundLink("Emitter_HyperionBridgeRadioBanter03", -1), PlayerGroupAll(), PointFromId(669), 0.0, 100.0, 0.0);
        gv_bridgeBGSoundRadioBanter03 = SoundLastPlayed();
    }

    gf_Ambience_RestoreSoundVolume(SoundLink("Emitter_HyperionBridgeRadioBanter03", -1), gv_bridgeBGSoundRadioBanter03);
    if ((gv_bridgeBGSoundWalla == null)) {
        SoundPlay(SoundLink("Ambience_HyperionBridgeWalla", 0), PlayerGroupAll(), 100.0, 0.0);
        gv_bridgeBGSoundWalla = SoundLastPlayed();
    }

    gf_Ambience_RestoreSoundVolume(SoundLink("Ambience_HyperionBridgeWalla", 0), gv_bridgeBGSoundWalla);
}

trigger auto_gf_DestoryBridgeBackgroundSound_Trigger = null;

void gf_DestoryBridgeBackgroundSound () {
    if (auto_gf_DestoryBridgeBackgroundSound_Trigger == null) {
        auto_gf_DestoryBridgeBackgroundSound_Trigger = TriggerCreate("auto_gf_DestoryBridgeBackgroundSound_TriggerFunc");
    }

    TriggerExecute(auto_gf_DestoryBridgeBackgroundSound_Trigger, false, false);
}

bool auto_gf_DestoryBridgeBackgroundSound_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_bridgeBGSoundRadioBanter01 != null)) {
        gf_Ambience_FadeSoundVolumeOverTime(SoundLink("Emitter_HyperionBridgeRadioBanter01", -1), gv_bridgeBGSoundRadioBanter01, 0.5);
    }

    if ((gv_bridgeBGSoundRadioBanter02 != null)) {
        gf_Ambience_FadeSoundVolumeOverTime(SoundLink("Emitter_HyperionBridgeRadioBanter02", -1), gv_bridgeBGSoundRadioBanter02, 0.5);
    }

    if ((gv_bridgeBGSoundRadioBanter03 != null)) {
        gf_Ambience_FadeSoundVolumeOverTime(SoundLink("Emitter_HyperionBridgeRadioBanter03", -1), gv_bridgeBGSoundRadioBanter03, 0.5);
    }

    if ((gv_bridgeBGSoundWalla != null)) {
        gf_Ambience_FadeSoundVolumeOverTime(SoundLink("Ambience_HyperionBridgeWalla", 0), gv_bridgeBGSoundWalla, 0.5);
    }

    return true;
}

void gf_CreateCantinaBackgroundSound () {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/D59DF7FD"), false);
    if ((gv_cantinaBGSoundWallaLeft == null)) {
        SoundPlayAtPoint(SoundLink("Emitter_CantinaWallaLeft", -1), PlayerGroupAll(), PointFromId(1062), 0.0, 100.0, 0.0);
        gv_cantinaBGSoundWallaLeft = SoundLastPlayed();
    }

    gf_Ambience_RestoreSoundVolume(SoundLink("Emitter_CantinaWallaLeft", -1), gv_cantinaBGSoundWallaLeft);
    if ((gv_cantinaBGSoundWallaRight == null)) {
        SoundPlayAtPoint(SoundLink("Emitter_CantinaWallaRight", -1), PlayerGroupAll(), PointFromId(1063), 0.0, 100.0, 0.0);
        gv_cantinaBGSoundWallaRight = SoundLastPlayed();
    }

    gf_Ambience_RestoreSoundVolume(SoundLink("Emitter_CantinaWallaRight", -1), gv_cantinaBGSoundWallaRight);
    if ((gv_bridgeBGSoundWalla2 == null)) {
        SoundPlay(SoundLink("Ambience_HyperionCantinaAdds", 0), PlayerGroupAll(), 100.0, 0.0);
        gv_bridgeBGSoundWalla2 = SoundLastPlayed();
    }

    gf_Ambience_RestoreSoundVolume(SoundLink("Ambience_HyperionCantinaAdds", 0), gv_bridgeBGSoundWalla2);
}

void gf_DestoryCantinaBackgroundSound () {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/5DADB659"), false);
    if ((gv_cantinaBGSoundWallaLeft != null)) {
        gf_Ambience_FadeSoundVolumeOverTime(SoundLink("Emitter_CantinaWallaLeft", -1), gv_cantinaBGSoundWallaLeft, 0.5);
    }

    if ((gv_cantinaBGSoundWallaRight != null)) {
        gf_Ambience_FadeSoundVolumeOverTime(SoundLink("Emitter_CantinaWallaRight", -1), gv_cantinaBGSoundWallaRight, 0.5);
    }

    if ((gv_bridgeBGSoundWalla2 != null)) {
        gf_Ambience_FadeSoundVolumeOverTime(SoundLink("Ambience_HyperionCantinaAdds", 0), gv_bridgeBGSoundWalla2, 0.5);
    }

}

void gf_CreateCharBackgroundSounds () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_bridgeBGSoundWalla3 == null)) {
        SoundPlay(SoundLink("Ambience_CharDistantBattle", 0), PlayerGroupAll(), 100.0, 0.0);
        gv_bridgeBGSoundWalla3 = SoundLastPlayed();
    }

    gf_Ambience_RestoreSoundVolume(SoundLink("Ambience_CharDistantBattle", 0), gv_bridgeBGSoundWalla3);
}

trigger auto_gf_DestoryCharBackgroundSounds_Trigger = null;

void gf_DestoryCharBackgroundSounds () {
    if (auto_gf_DestoryCharBackgroundSounds_Trigger == null) {
        auto_gf_DestoryCharBackgroundSounds_Trigger = TriggerCreate("auto_gf_DestoryCharBackgroundSounds_TriggerFunc");
    }

    TriggerExecute(auto_gf_DestoryCharBackgroundSounds_Trigger, false, false);
}

bool auto_gf_DestoryCharBackgroundSounds_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_bridgeBGSoundWalla3 != null)) {
        gf_Ambience_FadeSoundVolumeOverTime(SoundLink("Ambience_CharDistantBattle", 0), gv_bridgeBGSoundWalla3, 0.5);
    }

    return true;
}

void gf_RoomScenePrepare (int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int autoF40C51C7_val;
    int auto30B20C87_val;
    int auto227B8CF2_val;

    // Implementation
    gv_roomScenePreparedCount += 1;
    gv_roomScenePrepared[gv_roomScenePreparedCount] = lp_room;
    gv_roomScenePreparedType[gv_roomScenePreparedCount] = lp_type;
    autoF40C51C7_val = lp_room;
    if (autoF40C51C7_val == ge_RoomID_RoomMarSara) {
        auto30B20C87_val = lp_type;
        if (auto30B20C87_val == ge_SceneType_TV) {
            gf_TurnAnimationPropertiesOnOffInstantly(gv_marSaraTV, "Work", true);
        }
        else if (auto30B20C87_val == ge_SceneType_Scene) {
            gf_MuteJukebox(true, gv_marSaraJukeboxID);
        }
        else {
        }
    }
    else if (autoF40C51C7_val == ge_RoomID_RoomBridge) {
        gf_RemoveVisibleUnit(false, gv_bridgeStarmapHolomap);
        GameSetLighting("CutsceneTerran05Interior", 0.0);
        if ((gv_roomSceneLightingAnimation_ShouldPlay == true)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomBridge)), gv_aNIMID_ROOMLIGHTING, "Dialogue 05", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
        }

    }
    else if (autoF40C51C7_val == ge_RoomID_RoomCantina) {
        GameSetLighting("SMHyperionCantinaConversations", 0.0);
        if ((gv_roomSceneLightingAnimation_ShouldPlay == true)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomCantina)), gv_aNIMID_ROOMLIGHTING, "Dialogue 12", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
        }

        auto227B8CF2_val = lp_type;
        if (auto227B8CF2_val == ge_SceneType_TV) {
            gf_TurnAnimationPropertiesOnOffInstantly(gv_cantinaTV, "Work", true);
        }
        else {
        }
    }
    else if (autoF40C51C7_val == ge_RoomID_RoomLab) {
        if ((gv_roomSceneLightingAnimation_ShouldPlay == true)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomLab)), gv_aNIMID_ROOMLIGHTING, "Dialogue 13", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
        }

    }
    else if (autoF40C51C7_val == ge_RoomID_RoomChar) {
        gf_PrepareCharSkybox(true);
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gv_charConsole), "B");
        gf_RemoveVisibleUnit(false, gv_charBansheeA);
        gf_RemoveVisibleUnit(false, gv_charBansheeB);
        gf_RemoveVisibleUnit(false, gv_charMutaA);
        gf_RemoveVisibleUnit(false, gv_charMutaB);
        if ((gv_roomSceneLightingAnimation_ShouldPlay == true)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(765)), gv_aNIMID_ROOMLIGHTING, "Lighting 09", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomChar)), gv_aNIMID_ROOMLIGHTING, "Lighting 09", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
        }

    }
    else {
    }
}

void gf_RoomSceneClearAll () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoEBC60DCB_ae;
    const int autoEBC60DCB_ai = 1;

    // Variable Initialization

    // Implementation
    autoEBC60DCB_ae = gv_roomScenePreparedCount;
    lv_index = 1;
    for ( ; ( (autoEBC60DCB_ai >= 0 && lv_index <= autoEBC60DCB_ae) || (autoEBC60DCB_ai < 0 && lv_index >= autoEBC60DCB_ae) ) ; lv_index += autoEBC60DCB_ai ) {
        gf_RoomSceneClear(gv_roomScenePrepared[lv_index], gv_roomScenePreparedType[lv_index]);
    }
    gv_roomScenePreparedCount = 0;
}

void gf_RoomSceneClear (int lp_room, int lp_type) {
    // Automatic Variable Declarations
    int auto672D7D05_val;
    int auto91B6F2A9_val;
    int autoCFD20680_val;

    // Implementation
    auto672D7D05_val = lp_room;
    if (auto672D7D05_val == ge_RoomID_RoomMarSara) {
        auto91B6F2A9_val = lp_type;
        if (auto91B6F2A9_val == ge_SceneType_TV) {
            gf_TurnAnimationPropertiesOnOffInstantly(gv_cantinaTV, "Work", false);
        }
        else if (auto91B6F2A9_val == ge_SceneType_Scene) {
            gf_MuteJukebox(false, gv_marSaraJukeboxID);
        }
        else {
        }
    }
    else if (auto672D7D05_val == ge_RoomID_RoomBridge) {
        gf_RemoveVisibleUnit(true, gv_bridgeStarmapHolomap);
        GameSetLighting("SMHyperionBridge", 0.0);
        gf_ClearAnimationwithblendtime(gv_aNIMID_ROOMLIGHTING, gf_RoomUnit(ge_RoomID_RoomBridge), 0.0);
    }
    else if (auto672D7D05_val == ge_RoomID_RoomCantina) {
        GameSetLighting("SMHyperionCantina", 0.0);
        gf_ClearAnimationwithblendtime(gv_aNIMID_ROOMLIGHTING, gf_RoomUnit(ge_RoomID_RoomCantina), 0.0);
        autoCFD20680_val = lp_type;
        if (autoCFD20680_val == ge_SceneType_TV) {
            gf_TurnAnimationPropertiesOnOffInstantly(gv_cantinaTV, "Work", false);
        }
        else {
        }
    }
    else if (auto672D7D05_val == ge_RoomID_RoomLab) {
        gf_ClearAnimationwithblendtime(gv_aNIMID_ROOMLIGHTING, gf_RoomUnit(ge_RoomID_RoomLab), 0.0);
    }
    else if (auto672D7D05_val == ge_RoomID_RoomChar) {
        gf_PrepareCharSkybox(false);
        gf_TurnAnimationPropertiesOnOffInstantly(gv_charConsole, "B", false);
        gf_RemoveVisibleUnit(true, gv_charBansheeA);
        gf_RemoveVisibleUnit(true, gv_charBansheeB);
        gf_RemoveVisibleUnit(true, gv_charMutaA);
        gf_RemoveVisibleUnit(true, gv_charMutaB);
        GameSetLighting("SMCharBattlefield", 0.0);
        gf_ClearAnimationwithblendtime(gv_aNIMID_ROOMLIGHTING, UnitFromId(765), 0.0);
        gf_ClearAnimationwithblendtime(gv_aNIMID_ROOMLIGHTING, gf_RoomUnit(ge_RoomID_RoomChar), 0.0);
    }
    else {
    }
}

void gf_ViewRoomCamera (int lp_room, playergroup lp_players, fixed lp_duration) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto3C20983D_g;
    int auto67E08BC8_val;

    // Variable Initialization

    // Implementation
    auto3C20983D_g = lp_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto3C20983D_g, lv_player);
        if (lv_player < 0) { break; }
        auto67E08BC8_val = lp_room;
        {
            CameraUseModel(lv_player, gf_RoomUnit(lp_room), "Default", lp_duration);
            gf_ClearAnimationwithblendtime(gv_aNIMID_ZOOM, gf_RoomUnit(ge_RoomID_RoomArmory), 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomArmory)), gv_aNIMID_ZOOM, "Stand", c_animFlagPlayForever, 0.0);
        }
    }
}

unit gf_RoomUnit (int lp_roomID) {
    // Automatic Variable Declarations
    int auto7FD5B867_val;

    // Implementation
    auto7FD5B867_val = lp_roomID;
    if (auto7FD5B867_val == ge_RoomID_RoomConscription) {
        return gv_conscriptionRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomArmory) {
        return gv_armoryRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomMissionArchieves) {
        return gv_armoryRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomBridge) {
        return gv_bridgeRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomCantina) {
        return gv_cantinaRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomChar) {
        return gv_charRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomCorridor) {
        return gv_corridorRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomFlagship) {
        return gv_flagshipRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomGalaxy) {
        return gv_galaxyRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomLab) {
        return gv_labRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomMarSara) {
        return gv_marSaraRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomObservatory) {
        return gv_observatoryRoom;
    }
    else if (auto7FD5B867_val == ge_RoomID_RoomVoid) {
        return gv_voidRoom;
    }
    else {
    }
    return null;
}

unitgroup gf_RoomUnits (int lp_room) {
    // Automatic Variable Declarations
    int auto6A11BBD9_val;

    // Implementation
    auto6A11BBD9_val = lp_room;
    if (auto6A11BBD9_val == ge_RoomID_RoomConscription) {
        return gv_conscriptionRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomArmory) {
        return gv_armoryRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomBridge) {
        return gv_bridgeRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomCantina) {
        return gv_cantinaRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomChar) {
        return gv_charRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomCorridor) {
        return gv_corridorRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomFlagship) {
        return gv_flagshipRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomGalaxy) {
        return gv_galaxyRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomLab) {
        return gv_labRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomMarSara) {
        return gv_marSaraRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomObservatory) {
        return gv_observatoryRoomUnits;
    }
    else if (auto6A11BBD9_val == ge_RoomID_RoomVoid) {
        return gv_voidRoomUnits;
    }
    else {
    }
    return UnitGroupEmpty();
}

bool gf_RoomIsEnabled (int lp_room) {
    // Automatic Variable Declarations
    int autoDB3D4E18_val;

    // Implementation
    if ((gf_RoomLocationIsEnabled(gf_RoomLocation(lp_room)) == false)) {
        return false;
    }

    autoDB3D4E18_val = lp_room;
    if (autoDB3D4E18_val == ge_RoomID_RoomCantina) {
        return (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 4);
    }
    else if (autoDB3D4E18_val == ge_RoomID_RoomLab) {
        return (libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 5);
    }
    else {
    }
    return true;
}

text gf_RoomName (int lp_room) {
    // Automatic Variable Declarations
    int auto21353DF3_val;

    // Implementation
    auto21353DF3_val = lp_room;
    if (auto21353DF3_val == ge_RoomID_RoomArmory) {
        return StringExternal("Param/Value/3DC24A03");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomMissionArchieves) {
        return StringExternal("Param/Value/DF2FFC7C");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomBridge) {
        return StringExternal("Param/Value/FFFD0315");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomCantina) {
        return StringExternal("Param/Value/88998315");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomChar) {
        return StringExternal("Param/Value/65051152");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomConscription) {
        return StringExternal("Param/Value/DA61D7EF");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomCorridor) {
        return StringExternal("Param/Value/DC6A50B2");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomFlagship) {
        return StringExternal("Param/Value/348454AF");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomGalaxy) {
        return StringExternal("Param/Value/474CF0AF");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomLab) {
        return StringExternal("Param/Value/03979B30");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomLabResearch) {
        return StringExternal("Param/Value/0DDC5E74");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomMarSara) {
        return StringExternal("Param/Value/A97F1CC2");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomMercenary) {
        return StringExternal("Param/Value/A612CD29");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomObservatory) {
        return StringExternal("Param/Value/9A7AFA91");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomTechPurchase) {
        return StringExternal("Param/Value/457FF79A");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomVoid) {
        return StringExternal("Param/Value/E08A5DE1");
    }
    else if (auto21353DF3_val == ge_RoomID_RoomNone) {
        return StringExternal("Param/Value/706237AC");
    }
    else {
    }
    return StringToText("");
}

int gf_RoomFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int auto9E8DFA28_val;

    // Implementation
    auto9E8DFA28_val = lp_index;
    if (auto9E8DFA28_val == (ge_RoomID_RoomArmory)) {
        return ge_RoomID_RoomArmory;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomBridge)) {
        return ge_RoomID_RoomBridge;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomCantina)) {
        return ge_RoomID_RoomCantina;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomChar)) {
        return ge_RoomID_RoomChar;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomConscription)) {
        return ge_RoomID_RoomConscription;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomCorridor)) {
        return ge_RoomID_RoomCorridor;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomFlagship)) {
        return ge_RoomID_RoomFlagship;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomGalaxy)) {
        return ge_RoomID_RoomGalaxy;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomLab)) {
        return ge_RoomID_RoomLab;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomLabResearch)) {
        return ge_RoomID_RoomLabResearch;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomMarSara)) {
        return ge_RoomID_RoomMarSara;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomMercenary)) {
        return ge_RoomID_RoomMercenary;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomObservatory)) {
        return ge_RoomID_RoomObservatory;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomTechPurchase)) {
        return ge_RoomID_RoomTechPurchase;
    }
    else if (auto9E8DFA28_val == (ge_RoomID_RoomVoid)) {
        return ge_RoomID_RoomVoid;
    }
    else {
    }
    return ge_RoomID_RoomNone;
}

void gf_ChangeRoom (int lp_room, bool lp_showTransition) {
    // Automatic Variable Declarations
    // Implementation
    gf_GoToRoom(lp_room, lp_showTransition);
    gf_EnterRoom(lp_room, lp_showTransition);
    gf_HideFullScreenImage(false);
}

void gf_GoToRoom (int lp_room, bool lp_showTransition) {
    // Variable Declarations
    int lv_oldLocation;
    int lv_location;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oldLocation = ge_RoomLocation_RoomLocationHyperion;
    lv_location = ge_RoomLocation_RoomLocationHyperion;

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/A1DB48E9") + gf_RoomName(lp_room) + StringExternal("Param/Value/7E5C57BE") + gf_RoomName(gv_currentRoom)), false);
    if ((lp_room != gv_currentRoom)) {
        if ((gv_currentRoom != ge_RoomID_RoomNone)) {
            if ((lp_room != ge_RoomID_RoomGalaxy) && (lp_room != ge_RoomID_RoomLabResearch) && (lp_room != ge_RoomID_RoomMercenary) && (lp_room != ge_RoomID_RoomTechPurchase)) {
                gf_LeaveRoom(gv_currentRoom, lp_showTransition, true);
            }
            else {
                gf_LeaveRoom(gv_currentRoom, lp_showTransition, false);
            }
        }

        StorySetChange();
        gv_currentRoom = lp_room;
        lv_location = gf_RoomLocation(gv_currentRoom);
        if ((lv_location != ge_RoomLocation_RoomLocationOthers)) {
            lv_oldLocation = gv_currentLocation;
            gv_currentLocation = lv_location;
            if ((lv_oldLocation != gv_currentLocation) && (gv_currentLocation != ge_RoomLocation_RoomLocationOthers)) {
                gf_ReloadLocations();
            }

        }

    }

    gf_PrepareRoom(lp_room);
    gf_ViewRoomCamera(lp_room, PlayerGroupAll(), 0.0);
}

point gf_CenterOfRoom (int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGetPosition(gf_RoomUnit(lp_room));
}

void gf_DisplayRoomChangePanel () {
    // Variable Declarations
    int lv_roomIndex;
    text lv_tip;

    // Automatic Variable Declarations
    int autoA10CB223_ae;
    const int autoA10CB223_ai = 1;
    int autoC61B0905_val;

    // Variable Initialization

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/05AF9F6B"), false);
    if ((gv_roomChangePanelCreated == false)) {
        gv_roomChangePanelCreated = true;
        if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == true)) {
            gf_CharRoomUICreate();
        }
        else {
            if ((gf_RoomLocationIsEnabled(ge_RoomLocation_RoomLocationHyperion) == true)) {
                autoA10CB223_ae = gv_c_ROOM_LAST;
                lv_roomIndex = gv_c_ROOM_FIRST;
                for ( ; ( (autoA10CB223_ai >= 0 && lv_roomIndex <= autoA10CB223_ae) || (autoA10CB223_ai < 0 && lv_roomIndex >= autoA10CB223_ae) ) ; lv_roomIndex += autoA10CB223_ai ) {
                    if (((gf_RoomFromIndex(lv_roomIndex) == ge_RoomID_RoomConscription) || (gf_RoomFromIndex(lv_roomIndex) == ge_RoomID_RoomArmory) || (gf_RoomFromIndex(lv_roomIndex) == ge_RoomID_RoomBridge) || (gf_RoomFromIndex(lv_roomIndex) == ge_RoomID_RoomCantina) || (gf_RoomFromIndex(lv_roomIndex) == ge_RoomID_RoomLab) || ((gf_RoomFromIndex(lv_roomIndex) == ge_RoomID_RoomChar) && (gf_RoomIsEnabled(gf_RoomFromIndex(lv_roomIndex)) == true)))) {
                        if ((gf_RoomIsEnabled(gf_RoomFromIndex(lv_roomIndex)) == false)) {
                            lv_tip = StringExternal("Param/Value/6ABEA0B8");
                        }

                        libCamp_gf_AddRoomChangePanelButton(gf_RoomName(gf_RoomFromIndex(lv_roomIndex)), gt_RoomChangeButtonResponse, gt_RoomChangeButtonUpdate, lv_roomIndex, lv_tip);
                        gv_roomChangePanelButtonId[lv_roomIndex] = libCamp_gf_LastAddRoomChangePanelButton();
                        if ((gf_RoomIsEnabled(gf_RoomFromIndex(lv_roomIndex)) == true)) {
                            autoC61B0905_val = gf_RoomFromIndex(lv_roomIndex);
                            if (autoC61B0905_val == ge_RoomID_RoomLab) {
                                if ((libWoLC_gf_StoryState("LabVisited") == false)) {
                                    libCamp_gf_FlashRoomChangePanelButton(libCamp_gf_LastAddRoomChangePanelButton());
                                }

                            }
                            else if (autoC61B0905_val == ge_RoomID_RoomArmory) {
                                if ((libWoLC_gf_StoryState("ArmoryVisited") == false)) {
                                    libCamp_gf_FlashRoomChangePanelButton(libCamp_gf_LastAddRoomChangePanelButton());
                                }

                            }
                            else if (autoC61B0905_val == ge_RoomID_RoomCantina) {
                                if ((libWoLC_gf_StoryState("CantinaVisited") == false)) {
                                    libCamp_gf_FlashRoomChangePanelButton(libCamp_gf_LastAddRoomChangePanelButton());
                                }

                            }
                            else {
                            }
                        }

                    }

                }
            }
            else {
                if ((gf_RoomLocationIsEnabled(ge_RoomLocation_RoomLocationMarSara) == true)) {
                    lv_roomIndex = ge_RoomID_RoomMarSara;
                    libCamp_gf_AddRoomChangePanelButton(gf_RoomName(ge_RoomID_RoomMarSara), gt_RoomChangeButtonResponse, gt_RoomChangeButtonUpdate, lv_roomIndex, lv_tip);
                    gv_roomChangePanelButtonId[lv_roomIndex] = libCamp_gf_LastAddRoomChangePanelButton();
                    TriggerExecute(gt_RoomChangeButtonUpdate, true, false);
                    lv_roomIndex = ge_RoomID_RoomConscription;
                    libCamp_gf_AddRoomChangePanelButton(gf_RoomName(ge_RoomID_RoomConscription), gt_RoomChangeButtonResponse, gt_RoomChangeButtonUpdate, lv_roomIndex, lv_tip);
                    gv_roomChangePanelButtonId[lv_roomIndex] = libCamp_gf_LastAddRoomChangePanelButton();
                    TriggerExecute(gt_RoomChangeButtonUpdate, true, false);
                    if ((libWoLC_gf_StoryState("ConscriptionVisited") == false)) {
                        libCamp_gf_FlashRoomChangePanelButton(libCamp_gf_LastAddRoomChangePanelButton());
                    }

                }

            }
        }
    }

    libCamp_gf_UpdateRoomChangePanel();
    libCamp_gf_HideRoomChangePanel(true);
}

string gf_RoomLoadingImage (int lp_room) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    int autoB9CB7C25_val;

    // Variable Initialization

    // Implementation
    autoB9CB7C25_val = lp_room;
    if (autoB9CB7C25_val == ge_RoomID_RoomChar) {
        lv_image = "Assets\\Textures\\loading-char.dds";
    }
    else if (autoB9CB7C25_val == ge_RoomID_RoomBridge) {
        lv_image = "Assets\\Textures\\loading-hyperionbridge.dds";
    }
    else if (autoB9CB7C25_val == ge_RoomID_RoomCantina) {
        lv_image = "Assets\\Textures\\loading-hyperioncantina.dds";
    }
    else if (autoB9CB7C25_val == ge_RoomID_RoomArmory) {
        lv_image = "Assets\\Textures\\loading-hyperionarmory.dds";
    }
    else if (autoB9CB7C25_val == ge_RoomID_RoomLab) {
        lv_image = "Assets\\Textures\\loading-hyperionlab.dds";
    }
    else {
        lv_image = "Assets\\Textures\\loading-wingsofliberty.dds";
    }
    return lv_image;
}

unit gf_RoomDoor (int lp_room) {
    // Variable Declarations
    unit lv_door;

    // Automatic Variable Declarations
    int autoCDA09ED9_val;

    // Variable Initialization

    // Implementation
    autoCDA09ED9_val = lp_room;
    if (autoCDA09ED9_val == ge_RoomID_RoomBridge) {
        lv_door = gv_bridgeDoor;
    }
    else if (autoCDA09ED9_val == ge_RoomID_RoomCantina) {
        lv_door = gv_cantinaDoor;
    }
    else if (autoCDA09ED9_val == ge_RoomID_RoomLab) {
        lv_door = gv_labDoor;
    }
    else if (autoCDA09ED9_val == ge_RoomID_RoomArmory) {
        lv_door = gv_armoryDoor;
    }
    else if (autoCDA09ED9_val == ge_RoomID_RoomChar) {
        lv_door = gv_charDropship;
    }
    else {
        lv_door = null;
    }
    return lv_door;
}

int gf_DoorRoom (unit lp_door) {
    // Variable Declarations
    unit lv_door;

    // Automatic Variable Declarations
    unit auto76833007_val;

    // Variable Initialization

    // Implementation
    auto76833007_val = lp_door;
    if (auto76833007_val == gv_bridgeDoor) {
        return ge_RoomID_RoomBridge;
    }
    else if (auto76833007_val == gv_cantinaDoor) {
        return ge_RoomID_RoomCantina;
    }
    else if (auto76833007_val == gv_labDoor) {
        return ge_RoomID_RoomLab;
    }
    else if (auto76833007_val == gv_armoryDoor) {
        return ge_RoomID_RoomArmory;
    }
    else if (auto76833007_val == gv_charDropship) {
        return ge_RoomID_RoomChar;
    }
    else {
    }
    return ge_RoomID_RoomNone;
}

void gf_OpenDoor (int lp_room, bool lp_instant) {
    // Variable Declarations
    unit lv_door;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_doorOpened[(lp_room)] == true)) {
        return ;
    }

    lv_door = gf_RoomDoor(lp_room);
    if ((lv_door == null)) {
        return ;
    }

    gv_doorOpened[(lp_room)] = true;
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_door), gv_aNIMID_HIGHLIGHT, "Highlight Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    if ((lp_instant == true)) {
        if ((lp_room != ge_RoomID_RoomCantina)) {
            libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(lv_door), gv_aNIMID_HIGHLIGHT, 100.0);
        }

    }
    else {
        if ((lp_room == ge_RoomID_RoomBridge)) {
            SoundPlayAtPoint(SoundLink("SetPiece_HyperionDoor01_Open", -1), PlayerGroupAll(), PointFromId(120), 0.0, 100.0, 0.0);
        }
        else if ((lp_room == ge_RoomID_RoomCantina)) {
            SoundPlayAtPoint(SoundLink("SetPiece_HyperionDoor01_Open", -1), PlayerGroupAll(), PointFromId(51), 0.0, 100.0, 0.0);
        }
        else if ((lp_room == ge_RoomID_RoomLab)) {
            SoundPlayAtPoint(SoundLink("Lab_Intro_Doors_Open", -1), PlayerGroupAll(), PointFromId(251), 0.0, 100.0, 0.0);
        }
        else if ((lp_room == ge_RoomID_RoomArmory)) {
            SoundPlayAtPoint(SoundLink("ArmoryIntro_DoorOpen", -1), PlayerGroupAll(), PointFromId(399), 0.0, 100.0, 0.0);
        }
    }
}

void gf_CloseDoor (int lp_room, bool lp_instant) {
    // Variable Declarations
    unit lv_door;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_doorOpened[(lp_room)] == false)) {
        return ;
    }

    lv_door = gf_RoomDoor(lp_room);
    if ((lv_door == null)) {
        return ;
    }

    gv_doorOpened[(lp_room)] = false;
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_door), gv_aNIMID_HIGHLIGHT, "Highlight End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    if ((lp_instant == true)) {
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(lv_door), gv_aNIMID_HIGHLIGHT, 100.0);
    }
    else {
        if ((lp_room == ge_RoomID_RoomBridge)) {
            SoundPlayAtPoint(SoundLink("SetPiece_HyperionDoor01_Close", -1), PlayerGroupAll(), PointFromId(120), 0.0, 100.0, 0.0);
        }
        else if ((lp_room == ge_RoomID_RoomCantina)) {
            SoundPlayAtPoint(SoundLink("SetPiece_HyperionDoor01_Close", -1), PlayerGroupAll(), PointFromId(51), 0.0, 100.0, 0.0);
        }
        else if ((lp_room == ge_RoomID_RoomLab)) {
            SoundPlayAtPoint(SoundLink("Lab_Intro_Doors_Close", -1), PlayerGroupAll(), PointFromId(251), 0.0, 100.0, 0.0);
        }
        else if ((lp_room == ge_RoomID_RoomArmory)) {
            SoundPlayAtPoint(SoundLink("ArmoryIntro_DoorsClose", -1), PlayerGroupAll(), PointFromId(399), 0.0, 100.0, 0.0);
        }
    }
}

void gf_AddBGActor (int lp_actorID, point lp_home) {
    // Automatic Variable Declarations
    // Implementation
    gv_bGActorCount += 1;
    gv_bGActors[gv_bGActorCount].lv_actorID = lp_actorID;
    gv_bGActors[gv_bGActorCount].lv_home = lp_home;
    gv_bGActors[gv_bGActorCount].lv_nodeCount = 0;
    gv_bGActors[gv_bGActorCount].lv_doTrigger = TriggerCreate("gt_BGActorNodeDo_Func");
    gv_bGActors[gv_bGActorCount].lv_currentNodeID = 0;
}

int gf_LastAddedBGActorID () {
    // Automatic Variable Declarations
    // Implementation
    return gv_bGActorCount;
}

int gf_GetBGActorID (int lp_actorID) {
    // Variable Declarations
    int lv_bGActorID;

    // Automatic Variable Declarations
    int auto82C6B2C0_ae;
    const int auto82C6B2C0_ai = 1;

    // Variable Initialization

    // Implementation
    auto82C6B2C0_ae = gv_bGActorCount;
    lv_bGActorID = 1;
    for ( ; ( (auto82C6B2C0_ai >= 0 && lv_bGActorID <= auto82C6B2C0_ae) || (auto82C6B2C0_ai < 0 && lv_bGActorID >= auto82C6B2C0_ae) ) ; lv_bGActorID += auto82C6B2C0_ai ) {
        if ((gv_bGActors[lv_bGActorID].lv_actorID == lp_actorID)) {
            return lv_bGActorID;
        }

    }
    return -1;
}

int gf_GetBGActorIDByActionTrigger (trigger lp_actionTrigger) {
    // Variable Declarations
    int lv_actorID;
    int lv_nodeID;

    // Automatic Variable Declarations
    int auto014E7E2E_ae;
    const int auto014E7E2E_ai = 1;
    int auto9EF98DEA_ae;
    const int auto9EF98DEA_ai = 1;

    // Variable Initialization

    // Implementation
    auto014E7E2E_ae = gv_bGActorCount;
    lv_actorID = 1;
    for ( ; ( (auto014E7E2E_ai >= 0 && lv_actorID <= auto014E7E2E_ae) || (auto014E7E2E_ai < 0 && lv_actorID >= auto014E7E2E_ae) ) ; lv_actorID += auto014E7E2E_ai ) {
        auto9EF98DEA_ae = gv_bGActors[lv_actorID].lv_nodeCount;
        lv_nodeID = 1;
        for ( ; ( (auto9EF98DEA_ai >= 0 && lv_nodeID <= auto9EF98DEA_ae) || (auto9EF98DEA_ai < 0 && lv_nodeID >= auto9EF98DEA_ae) ) ; lv_nodeID += auto9EF98DEA_ai ) {
            if ((gv_bGActors[lv_actorID].lv_nodes[lv_nodeID].lv_actionTrigger == lp_actionTrigger)) {
                return lv_actorID;
            }

        }
    }
    return -1;
}

unit gf_GetBGActor (int lp_bGActorID) {
    // Automatic Variable Declarations
    // Implementation
    return gf_ActorUnit(gv_bGActors[lp_bGActorID].lv_actorID);
}

void gf_AddBGActorNode (int lp_actorID, int lp_nodeType, point lp_targetLoc, bool lp_turnOrNot, fixed lp_stayDuration, string lp_anim1, fixed lp_anim1Duration, string lp_anim2, fixed lp_anim2Duration, string lp_anim3, fixed lp_anim3Duration) {
    // Variable Declarations
    int lv_nodeID;
    int lv_animID;

    // Automatic Variable Declarations
    int auto36595557_val;

    // Variable Initialization

    // Implementation
    gv_bGActors[lp_actorID].lv_nodeCount += 1;
    lv_nodeID = gv_bGActors[lp_actorID].lv_nodeCount;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_type = lp_nodeType;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_target = lp_targetLoc;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_turnOrNot = lp_turnOrNot;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_stayDuration = lp_stayDuration;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount = 0;
    auto36595557_val = lp_nodeType;
    if (auto36595557_val == ge_BGAcotrNodeType_Move) {
        gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger = TriggerCreate("gt_BGActorNodeMoveArrive_Func");
        TriggerAddEventUnitRegion(gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger, UnitRefFromUnit(gf_GetBGActor(lp_actorID)), RegionCircle(gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_target, 0.2), true);
    }
    else if (auto36595557_val == ge_BGAcotrNodeType_Stay) {
        gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger = TriggerCreate("gt_BGActorNodeStayExpires_Func");
        TriggerAddEventTimer(gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger, gv_bGActors[lp_actorID].lv_timer);
    }
    else if (auto36595557_val == ge_BGAcotrNodeType_Disappear) {
        gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger = TriggerCreate("gt_BGActorNodeStayExpires_Func");
        TriggerAddEventTimer(gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger, gv_bGActors[lp_actorID].lv_timer);
    }
    else {
    }
    TriggerEnable(gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger, false);
    if ((lp_anim1 == "")) {
        return ;
    }

    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount += 1;
    lv_animID = gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_anim[lv_animID] = lp_anim1;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animDuration[lv_animID] = lp_anim1Duration;
    if ((lp_anim2 == "")) {
        return ;
    }

    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount += 1;
    lv_animID = gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_anim[lv_animID] = lp_anim2;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animDuration[lv_animID] = lp_anim2Duration;
    if ((lp_anim3 == "")) {
        return ;
    }

    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount += 1;
    lv_animID = gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_anim[lv_animID] = lp_anim3;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animDuration[lv_animID] = lp_anim3Duration;
}

void gf_BGActorStart (int lp_actorID) {
    // Variable Declarations
    int lv_bGActorID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bGActorID = gf_GetBGActorID(lp_actorID);
    if ((lv_bGActorID <= 0)) {
        return ;
    }

    if ((gv_bGActors[lv_bGActorID].lv_nodeCount == 0)) {
        return ;
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/EFFA4A63") + gf_ActorName(lp_actorID)), false);
    if ((gv_bGActors[lv_bGActorID].lv_started == false)) {
        gv_bGActors[lv_bGActorID].lv_started = true;
        gf_ResetActorToLocation(lp_actorID, gv_bGActors[lv_bGActorID].lv_home);
        gf_RemoveVisibleUnit(true, gf_GetBGActor(lv_bGActorID));
        gf_BGActorDoNext(lv_bGActorID);
    }
    else {
        gf_RemoveVisibleUnit(true, gf_GetBGActor(lv_bGActorID));
        libNtve_gf_PauseUnit(gf_ActorUnit(lp_actorID), false);
        gf_BGActorResume(lp_actorID);
    }
}

void gf_BGActorStop (int lp_actorID) {
    // Variable Declarations
    int lv_bGActorID;
    int lv_nodeID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bGActorID = gf_GetBGActorID(lp_actorID);
    if ((lv_bGActorID <= 0)) {
        return ;
    }

    if (((gv_bGActors[lv_bGActorID].lv_nodeCount == 0) || (gv_bGActors[lv_bGActorID].lv_started == false))) {
        return ;
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/3A3327C5") + gf_ActorName(lp_actorID)), false);
    gf_BGActorPause(lp_actorID);
    libNtve_gf_PauseUnit(gf_ActorUnit(lp_actorID), true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(lp_actorID));
}

void gf_BGActorTalkToRaynor (int lp_actorID) {
    // Variable Declarations
    int lv_bGActorID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bGActorID = gf_GetBGActorID(lp_actorID);
    if ((lv_bGActorID <= 0)) {
        return ;
    }

    if ((gv_bGActors[lv_bGActorID].lv_nodeCount == 0)) {
        return ;
    }

    gf_BGActorPause(lp_actorID);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_GetBGActor(lv_bGActorID), c_animTimeDefault);
}

void gf_BGActorPause (int lp_actorID) {
    // Variable Declarations
    int lv_bGActorID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bGActorID = gf_GetBGActorID(lp_actorID);
    if ((lv_bGActorID <= 0)) {
        return ;
    }

    if ((gv_bGActors[lv_bGActorID].lv_nodeCount == 0)) {
        return ;
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/335FC362") + gf_ActorName(lp_actorID)), false);
    TriggerStop(gv_bGActors[lv_bGActorID].lv_doTrigger);
    TimerPause(gv_bGActors[lv_bGActorID].lv_timer, true);
}

void gf_BGActorResume (int lp_actorID) {
    // Variable Declarations
    int lv_bGActorID;
    int lv_currentNodeID;

    // Automatic Variable Declarations
    int auto7B059918_val;

    // Variable Initialization

    // Implementation
    lv_bGActorID = gf_GetBGActorID(lp_actorID);
    if ((lv_bGActorID <= 0)) {
        return ;
    }

    if ((gv_bGActors[lv_bGActorID].lv_nodeCount == 0)) {
        return ;
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/E9C352CD") + gf_ActorName(lp_actorID)), false);
    lv_currentNodeID = gv_bGActors[lv_bGActorID].lv_currentNodeID;
    TimerPause(gv_bGActors[lv_bGActorID].lv_timer, false);
    auto7B059918_val = gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_type;
    if (auto7B059918_val == ge_BGAcotrNodeType_Move) {
        if ((gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_turnOrNot == true)) {
            gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection(gf_GetBGActor(lv_bGActorID), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target, c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gf_GetBGActor(lv_bGActorID), OrderTargetingPoint(AbilityCommand("move", 0), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target), c_orderQueueReplace);
        }
    }
    else if (auto7B059918_val == ge_BGAcotrNodeType_Stay) {
        gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection(gf_GetBGActor(lv_bGActorID), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target, c_orderQueueReplace);
    }
    else {
    }
}

void gf_BGActorDoNext (int lp_bGActorID) {
    // Variable Declarations
    int lv_currentNodeID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_bGActors[lp_bGActorID].lv_currentNodeID += 1;
    if ((gv_bGActors[lp_bGActorID].lv_currentNodeID > gv_bGActors[lp_bGActorID].lv_nodeCount)) {
        gv_bGActors[lp_bGActorID].lv_currentNodeID = 1;
    }

    gv_tP_BGActorID = lp_bGActorID;
    gv_tP_BGActorCurrentNodeID = gv_bGActors[lp_bGActorID].lv_currentNodeID;
    TriggerExecute(gv_bGActors[lp_bGActorID].lv_doTrigger, true, false);
}

void gf_HotspotZoom (unit lp_room, string lp_zoomCamera, string lp_animation, fixed lp_duration) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoB9BF28AF_g;

    // Variable Initialization

    // Implementation
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    gf_DisplayDebugMessage(StringExternal("Param/Value/2F41D290"));
    autoB9BF28AF_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB9BF28AF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        CameraUseModel(lv_indexPlayer, lp_room, lp_zoomCamera, 0.0);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_room), gv_aNIMID_ZOOM, lp_animation, c_animFlagPlayForever | c_animFlagNonLooping, 0);
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeReal);
    }

}

void gf_HotspotLeave (int lp_room, trigger lp_prepareRoomCallBack, fixed lp_outDuration, fixed lp_inDuration) {
    // Automatic Variable Declarations
    // Implementation
    gf_DisplayDebugMessage(StringExternal("Param/Value/536AC473"));
    TriggerDebugOutput(1, StringExternal("Param/Value/E16789E0"), false);
    gf_StopAllTransmissionConversation();
    CinematicFade(false, lp_outDuration, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(lp_prepareRoomCallBack, true, false);
    gf_GoToRoom(lp_room, false);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    CinematicFade(true, lp_inDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
}

void gf_HotspotLeaveWithCamera (int lp_room, trigger lp_prepareRoomCallBack, string lp_zoomBackCamera, string lp_zoomBackAnimation, fixed lp_zoomBackDuration) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoFB9AF868_g;

    // Variable Initialization

    // Implementation
    gf_DisplayDebugMessage(StringExternal("Param/Value/554296D0"));
    gf_StopAllTransmissionConversation();
    TriggerExecute(lp_prepareRoomCallBack, true, false);
    autoFB9AF868_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoFB9AF868_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        CameraUseModel(lv_indexPlayer, gf_RoomUnit(lp_room), lp_zoomBackCamera, 0.0);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(lp_room)), gv_aNIMID_ZOOM, lp_zoomBackAnimation, c_animFlagNonLooping, 0);
    if ((lp_zoomBackDuration > 0.0)) {
        Wait(lp_zoomBackDuration, c_timeReal);
    }

    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(lp_room)), gv_aNIMID_ZOOM);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_TurnClickablesOnOff(gv_clickables, true);
}

unit gf_HotspotClicked () {
    // Automatic Variable Declarations
    // Implementation
    return gv_hotspotClicked;
}

void gf_AddFlashingTextTagToHotspot (unit lp_unit, string lp_conversationStateIndex, int lp_offsetX, int lp_offsetY, int lp_edgeOffsetX, int lp_edgeOffsetY) {
    // Automatic Variable Declarations
    // Implementation
    if ((ConversationDataStateGetValue(lp_conversationStateIndex) == 1)) {
        return ;
    }

    gf__AddFlashingTextTag(lp_unit, ConversationDataStateName(lp_conversationStateIndex), ConversationDataStateAttachPoint(lp_conversationStateIndex), lp_offsetX, lp_offsetY, ConversationDataStateImagePath(lp_conversationStateIndex), ConversationDataStateImageEdge(lp_conversationStateIndex), lp_edgeOffsetX, lp_edgeOffsetY);
}

void gf_AddFlashingTextTagToActor (int lp_actor, string lp_conversationStateIndex, int lp_offsetX, int lp_offsetY, int lp_edgeOffsetX, int lp_edgeOffsetY) {
    // Variable Declarations
    string lv_convo;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_convo = gf_ActorConversation(lp_actor);
    if (((lv_convo == null) || (ConversationDataCanRun(lv_convo, true) == false))) {
        gf_LoadActorComplexAnimation(lp_actor);
        return ;
    }

    gf__AddFlashingTextTag(gf_ActorUnit(lp_actor), ConversationDataStateName(lp_conversationStateIndex), ConversationDataStateAttachPoint(lp_conversationStateIndex), lp_offsetX, lp_offsetY, ConversationDataStateImagePath(lp_conversationStateIndex), ConversationDataStateImageEdge(lp_conversationStateIndex), lp_edgeOffsetX, lp_edgeOffsetY);
}

void gf__AddFlashingTextTag (unit lp_unit, text lp_text, string lp_attachmentPoint, int lp_offsetX, int lp_offsetY, string lp_edgeImage, int lp_edge, int lp_edgeOffsetX, int lp_edgeOffsetY) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_HotspotFlashingTextTag(lp_unit) != c_textTagNone)) {
        return ;
    }

    if ((gv_hotspots_FlashingTextTagCount >= 30)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CEF2927D"));
        return ;
    }

    TextTagCreate(lp_text, 18, UnitGetPosition(lp_unit), 0.0, true, false, PlayerGroupAll());
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.0, 0.0);
    TextTagAttachToUnitPoint(TextTagLastCreated(), lp_unit, lp_attachmentPoint, lp_offsetX, lp_offsetY);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetEdgeImage(TextTagLastCreated(), lp_edge, lp_edgeImage, lp_edgeOffsetX, lp_edgeOffsetY);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, c_textTagTimePermanent);
    gv_hotspots_FlashingTextTagCount += 1;
    gv_hotspots_FlashingTextTags[gv_hotspots_FlashingTextTagCount] = TextTagLastCreated();
    UnitSetCustomValue(lp_unit, (ge_CustomDataIndex_CustomDataIndexFlashingData), IntToFixed(gv_hotspots_FlashingTextTagCount));
    if ((UnitGroupHasUnit(gv_visibleUnits, lp_unit) == false)) {
        gf_HideFlashingTextTag(false, lp_unit);
    }
    else {
        gf_HideFlashingTextTag(true, lp_unit);
    }
}

int gf_HotspotFlashingTextTag (unit lp_unit) {
    // Variable Declarations
    int lv_index;
    unit lv_hotspot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_hotspot = lp_unit;
    if ((UnitGroupHasUnit(gv_labArtifacts, lp_unit) == true)) {
        lv_hotspot = gv_labArtifactField;
    }

    lv_index = FixedToInt(UnitGetCustomValue(lv_hotspot, (ge_CustomDataIndex_CustomDataIndexFlashingData)));
    if ((lv_index <= 0)) {
        return c_textTagNone;
    }

    return gv_hotspots_FlashingTextTags[lv_index];
}

bool gf_HotspotFlashingPaused (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = FixedToInt(UnitGetCustomValue(lp_unit, (ge_CustomDataIndex_CustomDataIndexFlashingData)));
    if ((lv_index <= 0)) {
        return false;
    }

    return gv_hotspots_FlashingPaused[lv_index];
}

string gf_HotspotConvoState (unit lp_unit) {
    // Automatic Variable Declarations
    int auto5E20D3BB_val;
    unit autoEE6EF645_val;
    unit autoCEDB551B_val;
    unit auto6D96E1A9_val;
    unit autoEB19AB4C_val;
    unit autoFEE2209F_val;
    unit auto12D0043D_val;

    // Implementation
    auto5E20D3BB_val = gf_GetUnitClickableRoom(lp_unit);
    if (auto5E20D3BB_val == ge_RoomID_RoomMarSara) {
        autoEE6EF645_val = lp_unit;
        if (autoEE6EF645_val == gf_ActorUnit(ge_ActorID_ActorTychus)) {
            return "Hotspots|MarSaraTychus";
        }
        else if (autoEE6EF645_val == gv_marSaraBriefcase) {
            return "Hotspots|MarSaraBriefcase";
        }
        else if (autoEE6EF645_val == gv_marSaraTV) {
            return "Hotspots|MarSaraTV";
        }
        else if (autoEE6EF645_val == gf_PinboardItem(ge_PinboardItem_PBItem03Fightforfreedomposter)) {
            return "Hotspots|MarSaraFreedomPoster";
        }
        else if (autoEE6EF645_val == gf_PinboardItem(ge_PinboardItem_PBItem05VikingPolaroid)) {
            return "Hotspots|MarSaraVikingPhoto";
        }
        else if (autoEE6EF645_val == gf_PinboardItem(ge_PinboardItem_PBItem08Hydrahunt)) {
            return "Hotspots|MarSaraHydraHunt";
        }
        else if (autoEE6EF645_val == gf_PinboardItem(ge_PinboardItem_PBItem09KarriganPhoto)) {
            return "Hotspots|MarSaraKerriganPhoto";
        }
        else if (autoEE6EF645_val == gv_marSaraBadge) {
            return "Hotspots|MarSaraBadge";
        }
        else if (autoEE6EF645_val == gv_marSaraHydra) {
            return "Hotspots|MarSaraHydraHead";
        }
        else {
            return null;
        }
    }
    else if (auto5E20D3BB_val == ge_RoomID_RoomBridge) {
        autoCEDB551B_val = lp_unit;
        if (autoCEDB551B_val == gf_ActorUnit(ge_ActorID_ActorHorner)) {
            return "Hotspots|BridgeHorner";
        }
        else if (autoCEDB551B_val == gf_ActorUnit(ge_ActorID_ActorTychus)) {
            return "Hotspots|BridgeTychus";
        }
        else if (autoCEDB551B_val == gf_ActorUnit(ge_ActorID_ActorTosh)) {
            return "Hotspots|BridgeTosh";
        }
        else if (autoCEDB551B_val == gf_ActorUnit(ge_ActorID_ActorHanson)) {
            return "Hotspots|BridgeHanson";
        }
        else if (autoCEDB551B_val == gv_bridgeStarmap) {
            return "Hotspots|BridgeStarmap";
        }
        else if (autoCEDB551B_val == gv_bridgeMissionArchieves) {
            return "Hotspots|BridgeBattleReport";
        }
        else if (autoCEDB551B_val == gv_bridgeCommunicator) {
            return "Hotspots|BridgeCommunicator";
        }
        else {
            return null;
        }
    }
    else if (auto5E20D3BB_val == ge_RoomID_RoomArmory) {
        auto6D96E1A9_val = lp_unit;
        if (auto6D96E1A9_val == gf_ActorUnit(ge_ActorID_ActorSwann)) {
            return "Hotspots|ArmorySwann";
        }
        else if (auto6D96E1A9_val == gv_armoryConsole) {
            return "Hotspots|ArmoryTechConsole";
        }
        else if (auto6D96E1A9_val == gv_armoryTechBanshee1) {
            return "Hotspots|ArmoryBanshee";
        }
        else if (auto6D96E1A9_val == gv_armoryTechDropship) {
            return "Hotspots|ArmoryMedivac";
        }
        else if (auto6D96E1A9_val == gv_armoryTechFirebat) {
            return "Hotspots|ArmoryFirebat";
        }
        else if (auto6D96E1A9_val == gv_armoryTechGhostRifle) {
            return "Hotspots|ArmoryGhostRifle";
        }
        else if (auto6D96E1A9_val == gv_armoryTechMarauder) {
            return "Hotspots|ArmoryMarauder";
        }
        else if (auto6D96E1A9_val == gv_armoryTechSpectreCrates) {
            return "Hotspots|ArmorySpectreCrates";
        }
        else if (auto6D96E1A9_val == gv_armoryTechSpiderMines) {
            return "Hotspots|ArmorySpiderMine";
        }
        else if (auto6D96E1A9_val == gv_armoryTechTank) {
            return "Hotspots|ArmorySiegeTank";
        }
        else if (auto6D96E1A9_val == gv_armoryTechViking) {
            return "Hotspots|ArmoryViking";
        }
        else {
            return null;
        }
    }
    else if (auto5E20D3BB_val == ge_RoomID_RoomCantina) {
        autoEB19AB4C_val = lp_unit;
        if (autoEB19AB4C_val == gf_ActorUnit(ge_ActorID_ActorTychus)) {
            return "Hotspots|CantinaTychus";
        }
        else if (autoEB19AB4C_val == gf_ActorUnit(ge_ActorID_ActorTosh)) {
            return "Hotspots|CantinaTosh";
        }
        else if (autoEB19AB4C_val == gv_cantinaMercLabtop) {
            return "Hotspots|CantinaMercLaptop";
        }
        else if (autoEB19AB4C_val == gv_cantinaArcade) {
            return "Hotspots|CantinaArcade";
        }
        else if (autoEB19AB4C_val == gv_cantinaBadge) {
            return "Hotspots|CantinaBadge";
        }
        else if (autoEB19AB4C_val == gv_cantinaTrophyHansonA) {
            return "Hotspots|CantinaTrophyHansonA";
        }
        else if (autoEB19AB4C_val == gv_cantinaTrophyHansonB) {
            return "Hotspots|CantinaTrophyHansonB";
        }
        else if (autoEB19AB4C_val == gv_cantinaTrophyHorner) {
            return "Hotspots|CantinaTrophyHorner";
        }
        else if (autoEB19AB4C_val == gv_cantinaTrophyHydraClaw) {
            return "Hotspots|CantinaTrophyClaw";
        }
        else if (autoEB19AB4C_val == gv_cantinaTrophyToshA) {
            return "Hotspots|CantinaTrophyToshA";
        }
        else if (autoEB19AB4C_val == gv_cantinaTrophyToshB) {
            return "Hotspots|CantinaTrophyToshB";
        }
        else if (autoEB19AB4C_val == gv_cantinaTV) {
            return "Hotspots|CantinaTV";
        }
        else {
            return null;
        }
    }
    else if (auto5E20D3BB_val == ge_RoomID_RoomChar) {
        autoFEE2209F_val = lp_unit;
        if (autoFEE2209F_val == gv_charConsole) {
            return "Hotspots|CharConsole";
        }
        else if (autoFEE2209F_val == gv_charArtifact) {
            return "Hotspots|CharArtifact";
        }
        else if (autoFEE2209F_val == gf_ActorUnit(ge_ActorID_ActorWarfield)) {
            return "Hotspots|CharWarfield";
        }
        else if (autoFEE2209F_val == gf_ActorUnit(ge_ActorID_ActorWarfieldAOD)) {
            return "Hotspots|CharWarfield";
        }
        else if (autoFEE2209F_val == gf_ActorUnit(ge_ActorID_ActorTychus)) {
            return "Hotspots|CharTychus";
        }
        else {
        }
    }
    else if (auto5E20D3BB_val == ge_RoomID_RoomLab) {
        auto12D0043D_val = lp_unit;
        if (auto12D0043D_val == gf_ActorUnit(ge_ActorID_ActorHanson)) {
            return "Hotspots|LabHanson";
        }
        else if (auto12D0043D_val == gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)) {
            return "Hotspots|LabAdjutant";
        }
        else if (auto12D0043D_val == gv_labArtifactField) {
            return "Hotspots|LabArtifact";
        }
        else if (auto12D0043D_val == gv_labConsole) {
            return "Hotspots|LabConsole";
        }
        else if (auto12D0043D_val == gv_labCrystal) {
            if (((libWoLC_gf_MissionStatusCheck("TZeratul01", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul02", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul03", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul04", libWoLC_ge_MissionStatus_Available) == true))) {
                return "Hotspots|LabIhanCrystal";
            }

        }
        else if (auto12D0043D_val == gv_labTubeProtoss) {
            return "Hotspots|LabTubeProtoss";
        }
        else if (auto12D0043D_val == gv_labTubeZerg) {
            return "Hotspots|LabTubeZerg";
        }
        else {
        }
    }
    else {
    }
    return null;
}

void gf_StartFlashingUnit (unit lp_unit) {
    // Variable Declarations
    string lv_convoState;
    int lv_actorID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_actorID = ge_ActorID_ActorNone;

    // Implementation
    lv_convoState = gf_HotspotConvoState(lp_unit);
    if ((lv_convoState == null)) {
        return ;
    }

    lv_actorID = gf_ActorID(lp_unit);
    if ((lv_actorID == ge_ActorID_ActorNone)) {
        gf_AddFlashingTextTagToHotspot(lp_unit, lv_convoState, 0, 0, 0, 0);
    }
    else {
        gf_AddFlashingTextTagToActor(lv_actorID, lv_convoState, 0, 0, 0, 0);
    }
}

void gf_StopFlashingUnit (unit lp_unit) {
    // Variable Declarations
    int lv_tag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tag = c_textTagNone;

    // Implementation
    UnitGroupRemove(gv_hotspots_Flashing, lp_unit);
    lv_tag = gf_HotspotFlashingTextTag(lp_unit);
    if ((lv_tag == c_textTagNone)) {
        return ;
    }

    UnitSetCustomValue(lp_unit, (ge_CustomDataIndex_CustomDataIndexFlashingData), 0.0);
    TextTagDestroy(lv_tag);
    gf_LoadActorComplexAnimation(gf_ActorID(lp_unit));
}

void gf_HideFlashingTextTag (bool lp_showHide, unit lp_unit) {
    // Variable Declarations
    int lv_tag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tag = c_textTagNone;

    // Implementation
    if ((UnitGroupHasUnit(gv_labArtifacts, lp_unit) == true) && (lp_unit != gv_labArtifactField)) {
        return ;
    }

    lv_tag = gf_HotspotFlashingTextTag(lp_unit);
    if ((lv_tag != c_textTagNone)) {
        TextTagShow(lv_tag, PlayerGroupAll(), lp_showHide);
        if ((lp_showHide == true)) {
            TextTagPause(lv_tag, false);
        }
        else {
            TextTagPause(lv_tag, true);
        }
    }

}

void gf_PauseFlashingUnit (bool lp_pauseUnpause, unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = FixedToInt(UnitGetCustomValue(lp_unit, (ge_CustomDataIndex_CustomDataIndexFlashingData)));
    if ((lv_index <= 0)) {
        return ;
    }

    if ((lp_pauseUnpause == true)) {
        gv_hotspots_FlashingPaused[lv_index] = true;
        gf_HideFlashingTextTag(false, lp_unit);
    }
    else {
        gv_hotspots_FlashingPaused[lv_index] = false;
        if ((UnitGroupHasUnit(gv_visibleUnits, lp_unit) == true)) {
            gf_HideFlashingTextTag(true, lp_unit);
        }

    }
}

void gf_PauseFlashing (bool lp_pauseUnpause) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoDDB96A95_g;
    int autoDDB96A95_u;

    // Variable Initialization

    // Implementation
    autoDDB96A95_g = gv_hotspots_Flashing;
    autoDDB96A95_u = UnitGroupCount(autoDDB96A95_g, c_unitCountAll);
    for (;; autoDDB96A95_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoDDB96A95_g, autoDDB96A95_u);
        if (lv_unit == null) { break; }
        gf_PauseFlashingUnit(lp_pauseUnpause, lv_unit);
    }
    if ((lp_pauseUnpause == true)) {
        gf_ShowHideJukeboxTrackInfo(false);
    }
    else {
        gf_ShowHideJukeboxTrackInfo(true);
    }
}

void gf_HotspotHighlighted (unit lp_hotspot, bool lp_highlighted) {
    // Variable Declarations
    int lv_tag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tag = c_textTagNone;

    // Implementation
    lv_tag = gf_HotspotFlashingTextTag(lp_hotspot);
    if ((lv_tag != c_textTagNone)) {
        if ((lp_highlighted == true)) {
            TextTagSetTime(lv_tag, c_textTagTimeCurrent, 0.0);
        }
        else {
            TextTagSetTime(lv_tag, c_textTagTimeCurrent, 60.0);
        }
    }

}

void gf_ArmoryTech_HotspotClicked (string lp_convoID, string lp_camera, unit lp_techUnit, trigger lp_leaveCallback) {
    // Variable Declarations
    fixed lv_gradientWidthPercent;
    int lv_gradientWidth;
    fixed lv_gradientDirection;
    string lv_zoomAnim;

    // Automatic Variable Declarations
    string auto4907D0A4_val;

    // Variable Initialization
    lv_zoomAnim = "Stand";

    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    libCamp_gf_HideStoryUI(false, false);
    gf_PauseNewItemInfo(true);
    auto4907D0A4_val = lp_convoID;
    if (auto4907D0A4_val == "Hotspots|ArmoryFirebat") {
        lv_zoomAnim = "Fly 03";
    }
    else if (auto4907D0A4_val == "Hotspots|ArmorySiegeTank") {
        lv_zoomAnim = "Fly 03";
    }
    else if (auto4907D0A4_val == "Hotspots|ArmoryMarauder") {
        lv_zoomAnim = "Fly 04";
    }
    else if (auto4907D0A4_val == "Hotspots|ArmoryBanshee") {
        lv_zoomAnim = "Fly 04";
    }
    else {
        lv_zoomAnim = "Fly 00";
    }
    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomArmory), "Default", lv_zoomAnim, 0.0);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if ((lp_techUnit != null)) {
        gf_ArmoryTechHideallbut(lp_techUnit);
    }

    CameraUseModel(1, gf_RoomUnit(ge_RoomID_RoomArmory), lp_camera, 0.0);
    lv_gradientWidthPercent = ConversationDataStateFixedValue(lp_convoID, "Gradient Percent");
    lv_gradientWidth = FixedToInt((1600.0 * lv_gradientWidthPercent));
    lv_gradientDirection = ConversationDataStateFixedValue(lp_convoID, "Gradient Direction");
    DialogSetSize(gv_armoryGradientDialog, lv_gradientWidth, 1200);
    DialogControlSetSize(gv_armoryGradientDialogImage, PlayerGroupAll(), lv_gradientWidth, 1200);
    DialogSetVisible(gv_armoryGradientDialog, PlayerGroupAll(), true);
    if ((lv_gradientDirection == 0.0)) {
        DialogSetPosition(gv_armoryGradientDialog, c_anchorLeft, 0, 0);
        libNtve_gf_SetDialogItemImage(gv_armoryGradientDialogImage, "Assets\\Textures\\ui_armory_gradient_left.dds", PlayerGroupAll());
    }
    else {
        DialogSetPosition(gv_armoryGradientDialog, c_anchorRight, 0, 0);
        libNtve_gf_SetDialogItemImage(gv_armoryGradientDialogImage, "Assets\\Textures\\ui_armory_gradient_right.dds", PlayerGroupAll());
    }
    DialogSetVisible(gv_armoryGradientDialog, PlayerGroupAll(), true);
    if ((ConversationDataStateFixedValue(lp_convoID, "Active") == 1.0)) {
        gf_DisplayArmoryTextBox(ConversationDataStateText(lp_convoID, "Description"), ConversationDataStateText(lp_convoID, "Header"), gv_armoryAnchor[FixedToInt(ConversationDataStateFixedValue(lp_convoID, "Anchor"))], FixedToInt(ConversationDataStateFixedValue(lp_convoID, "OffsetX")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "OffsetY")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "Width")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "Height")), 1, FixedToInt(ConversationDataStateFixedValue(lp_convoID, "Background")), "ArmoryTitle", "ArmoryDescriptionBlue", FixedToInt(ConversationDataStateFixedValue(lp_convoID, "HeaderHeight")));
    }

    if ((ConversationDataStateFixedValue(lp_convoID, "2 Active") == 1.0)) {
        gf_DisplayArmoryTextBox(ConversationDataStateText(lp_convoID, "Description 2"), ConversationDataStateText(lp_convoID, "Header 2"), gv_armoryAnchor[FixedToInt(ConversationDataStateFixedValue(lp_convoID, "2 Anchor"))], FixedToInt(ConversationDataStateFixedValue(lp_convoID, "2 OffsetX")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "2 OffsetY")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "2 Width")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "2 Height")), 2, FixedToInt(ConversationDataStateFixedValue(lp_convoID, "2 Background")), "ArmorySubtitle", "ArmoryDescription", FixedToInt(ConversationDataStateFixedValue(lp_convoID, "2 HeaderHeight")));
    }

    if ((ConversationDataStateFixedValue(lp_convoID, "3 Active") == 1.0)) {
        gf_DisplayArmoryTextBox(ConversationDataStateText(lp_convoID, "Description 3"), ConversationDataStateText(lp_convoID, "Header 3"), gv_armoryAnchor[FixedToInt(ConversationDataStateFixedValue(lp_convoID, "3 Anchor"))], FixedToInt(ConversationDataStateFixedValue(lp_convoID, "3 OffsetX")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "3 OffsetY")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "3 Width")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "3 Height")), 3, FixedToInt(ConversationDataStateFixedValue(lp_convoID, "3 Background")), "ArmorySubtitle", "ArmoryDescription", FixedToInt(ConversationDataStateFixedValue(lp_convoID, "3 HeaderHeight")));
    }

    if ((ConversationDataStateFixedValue(lp_convoID, "4 Active") == 1.0)) {
        gf_DisplayArmoryTextBox(ConversationDataStateText(lp_convoID, "Description 4"), ConversationDataStateText(lp_convoID, "Header 4"), gv_armoryAnchor[FixedToInt(ConversationDataStateFixedValue(lp_convoID, "4 Anchor"))], FixedToInt(ConversationDataStateFixedValue(lp_convoID, "4 OffsetX")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "4 OffsetY")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "4 Width")), FixedToInt(ConversationDataStateFixedValue(lp_convoID, "4 Height")), 4, FixedToInt(ConversationDataStateFixedValue(lp_convoID, "4 Background")), "ArmorySubtitle", "ArmoryDescription", FixedToInt(ConversationDataStateFixedValue(lp_convoID, "4 HeaderHeight")));
    }

    gf_DisplayBackButton(lp_leaveCallback);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
}

void gf_ArmoryTech_HotspotLeave () {
    // Automatic Variable Declarations
    // Implementation
    gf_HideArmoryTextBox(false, 1);
    gf_HideArmoryTextBox(false, 2);
    gf_HideArmoryTextBox(false, 3);
    gf_HideArmoryTextBox(false, 4);
    DialogSetVisible(gv_armoryGradientDialog, PlayerGroupAll(), false);
    gf_PauseNewItemInfo(false);
    gf_ArmoryTechShowall();
    gf_HotspotLeave(ge_RoomID_RoomArmory, gt_PrepareRoomArmory, 0.0, 0.6);
    libCamp_gf_HideStoryUI(true, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
}

void gf_ArmoryTechHideallbut (unit lp_displayUnit) {
    // Automatic Variable Declarations
    unitgroup auto46FDA947_g;
    int auto46FDA947_u;
    unit auto46FDA947_var;

    // Implementation
    auto46FDA947_g = gv_armoryRoomZoomRemovableUnits;
    auto46FDA947_u = UnitGroupCount(auto46FDA947_g, c_unitCountAll);
    for (;; auto46FDA947_u -= 1) {
        auto46FDA947_var = UnitGroupUnitFromEnd(auto46FDA947_g, auto46FDA947_u);
        if (auto46FDA947_var == null) { break; }
        if ((lp_displayUnit != auto46FDA947_var)) {
            libNtve_gf_ShowHideUnit(auto46FDA947_var, false);
        }

    }
}

void gf_ArmoryTechShowall () {
    // Automatic Variable Declarations
    unitgroup autoBD209207_g;
    int autoBD209207_u;
    unit autoBD209207_var;

    // Implementation
    autoBD209207_g = gv_armoryRoomZoomRemovableUnits;
    autoBD209207_u = UnitGroupCount(autoBD209207_g, c_unitCountAll);
    for (;; autoBD209207_u -= 1) {
        autoBD209207_var = UnitGroupUnitFromEnd(autoBD209207_g, autoBD209207_u);
        if (autoBD209207_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoBD209207_var, true);
    }
}

void gf_MercDisplay (trigger lp_exitCallback) {
    // Automatic Variable Declarations
    // Implementation
    gf_PauseNewItemInfo(true);
    gf_GoToRoom(ge_RoomID_RoomMercenary, false);
    libWCUI_gf_DisplayMercenaryConsole(lp_exitCallback);
}

void gf_LabResearchDisplay (trigger lp_exitCallback) {
    // Automatic Variable Declarations
    // Implementation
    gf_PauseNewItemInfo(true);
    gf_GoToRoom(ge_RoomID_RoomLabResearch, false);
    libWCUI_gf_DisplayResearchConsole(lp_exitCallback);
}

void gf_TravelPanelDisplay (trigger lp_leaveCallback) {
    // Automatic Variable Declarations
    // Implementation
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, false);
    gf_GoToRoom(ge_RoomID_RoomGalaxy, false);
    gv_travelPanel_LeaveCallback = lp_leaveCallback;
    TriggerEnable(gt_TravelPanelLaunch, true);
    TriggerEnable(gt_TravelPanelLeave, true);
    libWCUI_gf_ShowHideTravelPanel(true);
}

void gf_TravelPanelClose () {
    // Automatic Variable Declarations
    // Implementation
    gf_PauseNewItemInfo(false);
    libCamp_gf_HideStoryUI(true, false);
    TriggerEnable(gt_TravelPanelLaunch, false);
    TriggerEnable(gt_TravelPanelLeave, false);
    libWCUI_gf_ShowHideTravelPanel(false);
}

void gf_TravelPanelZeratulDisplay (trigger lp_leaveCallback) {
    // Automatic Variable Declarations
    // Implementation
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, false);
    gf_GoToRoom(ge_RoomID_RoomGalaxy, false);
    gv_travelPanelZeratul_LeaveCallback = lp_leaveCallback;
    if ((libWoLC_gf_MissionStatusCheck("TZeratul01", libWoLC_ge_MissionStatus_Available) == true)) {
        gv_travelPanelZeratulMission = "TZeratul01";
    }
    else if ((libWoLC_gf_MissionStatusCheck("TZeratul02", libWoLC_ge_MissionStatus_Available) == true)) {
        gv_travelPanelZeratulMission = "TZeratul02";
    }
    else if ((libWoLC_gf_MissionStatusCheck("TZeratul03", libWoLC_ge_MissionStatus_Available) == true)) {
        gv_travelPanelZeratulMission = "TZeratul03";
    }
    else if ((libWoLC_gf_MissionStatusCheck("TZeratul04", libWoLC_ge_MissionStatus_Available) == true)) {
        gv_travelPanelZeratulMission = "TZeratul04";
    }
    TriggerEnable(gt_TravelPanelZeratulLaunch, true);
    TriggerEnable(gt_TravelPanelZeratulLeave, true);
    libWCUI_gf_ShowHideTravelPanel2(true, gv_travelPanelZeratulMission);
}

void gf_TravelPanelZeratulClose () {
    // Automatic Variable Declarations
    // Implementation
    gf_PauseNewItemInfo(false);
    libCamp_gf_HideStoryUI(true, false);
    TriggerEnable(gt_TravelPanelZeratulLaunch, false);
    TriggerEnable(gt_TravelPanelZeratulLeave, false);
    libWCUI_gf_ShowHideTravelPanel2(false, null);
}

void gf_DisplayIntroTextBox (text lp_header, string lp_headerStyle, text lp_text, string lp_textStyle, int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_width, int lp_height) {
    // Variable Declarations
    int lv_textBorder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textBorder = c_invalidDialogControlId;

    // Implementation
    if ((gv_introTextDialog != c_invalidDialogId)) {
        DialogDestroy(gv_introTextDialog);
    }

    DialogCreate(lp_width, lp_height, lp_anchor, lp_offsetX, lp_offsetY, true);
    gv_introTextDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lp_width - 15), 40);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_headerStyle, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -2, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_header, PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    lv_textBorder = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_armory_text_innerframe.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeHorizontalBorder, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_width, (lp_height - 40));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lp_width - 50), (lp_height - 90));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_textStyle, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_textBorder, c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_text, PlayerGroupAll());
    gf_HideIntroTextBox(true);
}

void gf_HideIntroTextBox (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_introTextDialog != c_invalidDialogId)) {
        DialogSetVisible(gv_introTextDialog, PlayerGroupAll(), lp_showHide);
    }

}

void gf_DisplayArmoryTextBox (text lp_text, text lp_headerText, int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_width, int lp_height, int lp_iD, int lp_backGroundImageInt, string lp_titleStyle, string lp_bodyStyle, int lp_headerHeight) {
    // Variable Declarations
    string lv_backgroundImage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_armoryTextDialog[lp_iD] != c_invalidDialogId)) {
        DialogDestroy(gv_armoryTextDialog[lp_iD]);
    }

    if ((lp_backGroundImageInt == 0)) {
        lv_backgroundImage = "Assets\\Textures\\ui_armory_text_innerframe.dds";
    }
    else {
        lv_backgroundImage = "Assets\\Textures\\ui_armory_text_outerframe.dds";
    }
    DialogCreate(lp_width, lp_height, lp_anchor, lp_offsetX, lp_offsetY, true);
    gv_armoryTextDialog[lp_iD] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_width, lp_headerHeight);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_titleStyle, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_headerText, PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_backgroundImage, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeHorizontalBorder, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_width, (lp_height - lp_headerHeight));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lp_width - 50), (lp_height - (lp_headerHeight + 50)));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_bodyStyle, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 25);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_text, PlayerGroupAll());
    gf_HideArmoryTextBox(true, lp_iD);
}

void gf_HideArmoryTextBox (bool lp_showHide, int lp_iD) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_armoryTextDialog[lp_iD] != c_invalidDialogId)) {
        DialogSetVisible(gv_armoryTextDialog[lp_iD], PlayerGroupAll(), lp_showHide);
    }

}

void gf_CharRoomUICreate () {
    // Automatic Variable Declarations
    // Implementation
    libCamp_gf_AddRoomChangePanelButton(StringExternal("Param/Value/AD9E5F3F"), gt_CharRoomUIButtonResponse, gt_CharRoomUIButtonUpdate, (ge_CharRoomUI_CharRoomUIArmory), StringToText(""));
    libCamp_gf_AddRoomChangePanelButton(StringExternal("Param/Value/8BE4B326"), gt_CharRoomUIButtonResponse, gt_CharRoomUIButtonUpdate, (ge_CharRoomUI_CharRoomUIResearch), StringToText(""));
    libCamp_gf_AddRoomChangePanelButton(StringExternal("Param/Value/B0EC18CF"), gt_CharRoomUIButtonResponse, gt_CharRoomUIButtonUpdate, (ge_CharRoomUI_CharRoomUIMercenaries), StringToText(""));
    libCamp_gf_AddRoomChangePanelButton(StringExternal("Param/Value/40C21185"), gt_CharRoomUIButtonResponse, gt_CharRoomUIButtonUpdate, (ge_CharRoomUI_CharRoomUINews), StringToText(""));
    if ((ConversationDataStateGetValue("Hotspots|CantinaTV") == 0)) {
        libCamp_gf_FlashRoomChangePanelButton(libCamp_gf_LastAddRoomChangePanelButton());
    }

    libCamp_gf_AddRoomChangePanelButton(StringExternal("Param/Value/F311546A"), gt_CharRoomUIButtonResponse, gt_CharRoomUIButtonUpdate, (ge_CharRoomUI_CharRoomUIMissionArchives), StringToText(""));
}

void gf_CharRoomUIDisplayUI (int lp_uI) {
    // Automatic Variable Declarations
    int autoCAD3A47E_val;
    int auto1AA3799C_val;

    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    autoCAD3A47E_val = lp_uI;
    if (autoCAD3A47E_val == ge_CharRoomUI_CharRoomUIArmory) {
        gf_GoToRoom(ge_RoomID_RoomTechPurchase, false);
    }
    else if (autoCAD3A47E_val == ge_CharRoomUI_CharRoomUIMissionArchives) {
        gf_GoToRoom(ge_RoomID_RoomMissionArchieves, false);
    }
    else if (autoCAD3A47E_val == ge_CharRoomUI_CharRoomUIMercenaries) {
        gf_GoToRoom(ge_RoomID_RoomMercenary, false);
    }
    else if (autoCAD3A47E_val == ge_CharRoomUI_CharRoomUIResearch) {
        gf_GoToRoom(ge_RoomID_RoomLabResearch, false);
    }
    else {
    }
    libCamp_gf_HideStoryUI(false, false);
    gf_PauseNewItemInfo(true);
    auto1AA3799C_val = lp_uI;
    if (auto1AA3799C_val == ge_CharRoomUI_CharRoomUIArmory) {
        libWCUI_gf_DisplayTechConsole(gt_CharRoomUILeaveUI);
    }
    else if (auto1AA3799C_val == ge_CharRoomUI_CharRoomUIMissionArchives) {
        libWCUI_gf_DisplayArchives(gt_CharRoomUILeaveUI, gt_BridgeMissionArchivesSceneFinish);
    }
    else if (auto1AA3799C_val == ge_CharRoomUI_CharRoomUIMercenaries) {
        libWCUI_gf_DisplayMercenaryConsole(gt_CharRoomUILeaveUI);
    }
    else if (auto1AA3799C_val == ge_CharRoomUI_CharRoomUIResearch) {
        libWCUI_gf_DisplayResearchConsole(gt_CharRoomUILeaveUI);
    }
    else {
    }
}

void gf_PlayFidget (string lp_fidget, int lp_actor1, int lp_actor2) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fidget == null)) {
        return ;
    }

    ConversationDataRegisterUnit(gf_ConvoCharacter(ge_ActorID_ActorRaynor), gf_ActorUnit(ge_ActorID_ActorRaynor));
    if ((lp_actor1 != ge_ActorID_ActorNone)) {
        ConversationDataRegisterUnit(gf_ConvoCharacter(lp_actor1), gf_ActorUnit(lp_actor1));
    }

    if ((lp_actor2 != ge_ActorID_ActorNone)) {
        ConversationDataRegisterUnit(gf_ConvoCharacter(lp_actor2), gf_ActorUnit(lp_actor2));
    }

    ConversationDataRun(lp_fidget, PlayerGroupAll(), c_conversationSkipSimple, true);
    if ((lp_actor1 != ge_ActorID_ActorNone)) {
        ConversationDataRegisterUnit(gf_ConvoCharacter(lp_actor1), gf_ActorUnit(lp_actor1));
    }

    if ((lp_actor2 != ge_ActorID_ActorNone)) {
        ConversationDataRegisterUnit(gf_ConvoCharacter(lp_actor2), gf_ActorUnit(lp_actor2));
    }

}

void gf_PlayGossip (int lp_actor) {
    // Variable Declarations
    string lv_gossip;

    // Automatic Variable Declarations
    int auto537BB163_val;
    int auto25ECBFA1_val;
    int auto5FA4E0A8_val;
    int auto58796638_val;
    int auto3B7706CD_val;
    int auto53FA8E69_val;
    int auto46469A7A_val;
    int autoD53AEE13_val;

    // Variable Initialization

    // Implementation
    if (((lp_actor == ge_ActorID_ActorNone) || (lp_actor == gv_currentGossipActor) || (UnitTestState(gf_ActorUnit(lp_actor), c_unitStateHighlightable) == false) || (gf_ActorWithFidget(lp_actor) == false))) {
        return ;
    }

    lv_gossip = null;
    auto537BB163_val = gv_currentRoom;
    if (auto537BB163_val == ge_RoomID_RoomArmory) {
        auto25ECBFA1_val = lp_actor;
        if (auto25ECBFA1_val == ge_ActorID_ActorAnnabelle) {
            lv_gossip = "ArmoryFidgetsAnnabelle";
        }
        else if (auto25ECBFA1_val == ge_ActorID_ActorRaynor) {
            lv_gossip = "HyperionfidgetsRaynor";
        }
        else if (auto25ECBFA1_val == ge_ActorID_ActorSwann) {
            lv_gossip = "SwannPissedLines";
        }
        else {
        }
    }
    else if (auto537BB163_val == ge_RoomID_RoomBridge) {
        auto5FA4E0A8_val = lp_actor;
        if (auto5FA4E0A8_val == ge_ActorID_ActorRaynor) {
            lv_gossip = "HyperionfidgetsRaynor";
        }
        else if (auto5FA4E0A8_val == ge_ActorID_ActorStetmann) {
            lv_gossip = "BridgeFidgetsStetmann";
        }
        else if (auto5FA4E0A8_val == ge_ActorID_ActorTychus) {
            lv_gossip = "TychusPissedLines";
        }
        else if (auto5FA4E0A8_val == ge_ActorID_ActorHorner) {
            lv_gossip = "HornerPissedLines";
        }
        else if (auto5FA4E0A8_val == ge_ActorID_ActorTosh) {
            lv_gossip = "ToshPissedLines";
        }
        else if (auto5FA4E0A8_val == ge_ActorID_ActorHanson) {
            lv_gossip = "HansonPissedLines";
        }
        else {
        }
    }
    else if (auto537BB163_val == ge_RoomID_RoomCantina) {
        auto58796638_val = lp_actor;
        if (auto58796638_val == ge_ActorID_ActorAnnabelle) {
            lv_gossip = "CantinaFidgetsAnnabelle";
        }
        else if (auto58796638_val == ge_ActorID_ActorBralik) {
            lv_gossip = "CantinaFidgetsBralik";
        }
        else if (auto58796638_val == ge_ActorID_ActorCade) {
            lv_gossip = "CantinaFidgetsCade";
        }
        else if (auto58796638_val == ge_ActorID_ActorCooperBarTender) {
            lv_gossip = "CantinaFidgetsCooper";
        }
        else if (auto58796638_val == ge_ActorID_ActorEarl) {
            lv_gossip = "CantinaFidgetsEarl";
        }
        else if (auto58796638_val == ge_ActorID_ActorHall) {
            lv_gossip = "CantinaFidgetsHall";
        }
        else if (auto58796638_val == ge_ActorID_ActorHillMercContact) {
            lv_gossip = "CantinaFidgetsHill";
        }
        else if (auto58796638_val == ge_ActorID_ActorKachinsky) {
            lv_gossip = "CantinaFidgetsKachinsky2";
        }
        else if (auto58796638_val == ge_ActorID_ActorYbarraMiscMerc) {
            lv_gossip = "CantinaFidgetsYbarra";
        }
        else if (auto58796638_val == ge_ActorID_ActorRaynor) {
            lv_gossip = "HyperionfidgetsRaynor";
        }
        else if (auto58796638_val == ge_ActorID_ActorTychus) {
            lv_gossip = "TychusPissedLines";
        }
        else if (auto58796638_val == ge_ActorID_ActorTosh) {
            lv_gossip = "ToshPissedLines";
        }
        else {
        }
    }
    else if (auto537BB163_val == ge_RoomID_RoomChar) {
        auto3B7706CD_val = lp_actor;
        if (auto3B7706CD_val == ge_ActorID_ActorRaynorMarine) {
            lv_gossip = "CharFidgetsRaynor";
        }
        else if (auto3B7706CD_val == ge_ActorID_ActorTychus) {
            lv_gossip = "TychusPissedLines";
        }
        else {
        }
    }
    else if (auto537BB163_val == ge_RoomID_RoomLab) {
        auto53FA8E69_val = lp_actor;
        if (auto53FA8E69_val == ge_ActorID_ActorStetmann) {
            if ((gv_stetmannFront == true)) {
                lv_gossip = "Labresearch";
            }
            else {
                lv_gossip = "LabFidgetsCowin";
            }
        }
        else if (auto53FA8E69_val == ge_ActorID_ActorRaynor) {
            lv_gossip = "HyperionfidgetsRaynor";
        }
        else if (auto53FA8E69_val == ge_ActorID_ActorAdjutantConfederate) {
            lv_gossip = "LabFidgetsAdjutant";
        }
        else if (auto53FA8E69_val == ge_ActorID_ActorHanson) {
            lv_gossip = "HansonPissedLines";
        }
        else {
        }
    }
    else if (auto537BB163_val == ge_RoomID_RoomMarSara) {
        auto46469A7A_val = lp_actor;
        if (auto46469A7A_val == ge_ActorID_ActorRaynor) {
            lv_gossip = "MarSaraFidgetsDrinks";
        }
        else {
        }
    }
    else if (auto537BB163_val == ge_RoomID_RoomObservatory) {
        autoD53AEE13_val = lp_actor;
        if (autoD53AEE13_val == ge_ActorID_ActorRaynorMarine) {
            lv_gossip = "HyperionfidgetsRaynor";
        }
        else {
        }
    }
    else {
    }
    if ((lv_gossip == null)) {
        return ;
    }

    gv_currentGossipActor = lp_actor;
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_StopAllTransmissionConversation();
    gf_PlayFidget(lv_gossip, lp_actor, ge_ActorID_ActorNone);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    if ((gv_currentGossipActor == lp_actor)) {
        gv_currentGossipActor = ge_ActorID_ActorNone;
    }

}

void gf_UseConversationCamera (int lp_room, int lp_character, int lp_cameraType, unit lp_cameraObject) {
    // Variable Declarations
    string lv_cameraName;
    string lv_c_StringCharacter;
    string lv_c_StringRaynor;

    // Automatic Variable Declarations
    int autoF218E54D_val;
    int auto10E63330_val;
    int autoABC25A19_val;
    int auto8E140248_val;
    int autoAFCC7143_val;
    int auto44005C00_val;
    int autoD9DC265E_val;
    int auto5E94A5A2_val;

    // Variable Initialization
    lv_cameraName = "";
    lv_c_StringCharacter = "Character ";
    lv_c_StringRaynor = "Raynor ";

    // Implementation
    gv_convoCameraCurrent = lp_cameraType;
    if ((gv_convoCameraChangeCallback != null)) {
        TriggerStop(gv_convoCameraChangeCallback);
        gv_convoCameraChangeResult = true;
        TriggerExecute(gv_convoCameraChangeCallback, true, true);
        if ((gv_convoCameraChangeResult == false)) {
            return ;
        }

    }

    if ((gv_convoCameras[(lp_cameraType)] != null)) {
        CameraApplyInfo(1, gv_convoCameras[(lp_cameraType)], 0.0, -1, 10, true);
        return ;
    }

    autoF218E54D_val = lp_room;
    if (autoF218E54D_val == ge_RoomID_RoomMarSara) {
        auto10E63330_val = lp_character;
        if (auto10E63330_val == ge_ActorID_ActorTychus) {
            if ((gf_UseConversationCameraMarSaraTychus(lp_cameraType) == true)) {
                return ;
            }

        }
        else {
        }
    }
    else if (autoF218E54D_val == ge_RoomID_RoomBridge) {
        autoABC25A19_val = lp_character;
        if (autoABC25A19_val == ge_ActorID_ActorTosh) {
            if ((gf_UseConversationCameraBridgeTosh(lp_cameraType) == true)) {
                return ;
            }

        }
        else if (autoABC25A19_val == ge_ActorID_ActorHorner) {
            if ((gf_UseConversationCameraBridgeHorner(lp_cameraType) == true)) {
                return ;
            }

        }
        else if (autoABC25A19_val == ge_ActorID_ActorHanson) {
            if ((gf_UseConversationCameraBridgeHanson(lp_cameraType) == true)) {
                return ;
            }

        }
        else if (autoABC25A19_val == ge_ActorID_ActorTychus) {
            if ((gf_UseConversationCameraBridgeTychus(lp_cameraType) == true)) {
                return ;
            }

        }
        else if (autoABC25A19_val == ge_ActorID_ActorValerian) {
            if ((gf_UseConversationCameraBridgeCommunicator(lp_cameraType) == true)) {
                return ;
            }

        }
        else {
        }
    }
    else if (autoF218E54D_val == ge_RoomID_RoomCantina) {
        auto8E140248_val = lp_character;
        if (auto8E140248_val == ge_ActorID_ActorTychus) {
            if ((gf_UseConversationCameraCantinaTychus(lp_cameraType) == true)) {
                return ;
            }

        }
        else if (auto8E140248_val == ge_ActorID_ActorTosh) {
            if ((gf_UseConversationCameraCantinaTosh(lp_cameraType) == true)) {
                return ;
            }

        }
        else {
        }
    }
    else if (autoF218E54D_val == ge_RoomID_RoomChar) {
        autoAFCC7143_val = lp_character;
        if (autoAFCC7143_val == ge_ActorID_ActorTychus) {
            if ((gf_UseConversationCameraCharTychus(lp_cameraType) == true)) {
                return ;
            }

        }
        else if (autoAFCC7143_val == ge_ActorID_ActorWarfield) {
            if ((gf_UseConversationCameraCharWarfield(lp_cameraType) == true)) {
                return ;
            }

        }
        else if (autoAFCC7143_val == ge_ActorID_ActorWarfieldAOD) {
            if ((gf_UseConversationCameraCharWarfield(lp_cameraType) == true)) {
                return ;
            }

        }
        else {
        }
    }
    else if (autoF218E54D_val == ge_RoomID_RoomLab) {
        auto44005C00_val = lp_character;
        if (auto44005C00_val == ge_ActorID_ActorHanson) {
            if ((gf_UseConversationCameraLabHanson(lp_cameraType) == true)) {
                return ;
            }

        }
        else if (auto44005C00_val == ge_ActorID_ActorAdjutantConfederate) {
            if ((gf_UseConversationCameraLabAdjutant(lp_cameraType) == true)) {
                return ;
            }

        }
        else {
        }
    }
    else if (autoF218E54D_val == ge_RoomID_RoomArmory) {
        autoD9DC265E_val = lp_character;
        if (autoD9DC265E_val == ge_ActorID_ActorSwann) {
            if ((gf_UseConversationCameraAmorySwan(lp_cameraType) == true)) {
                return ;
            }

        }
        else {
        }
    }
    else {
    }
    auto5E94A5A2_val = lp_cameraType;
    if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraMaster) {
        lv_cameraName = "Master";
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraCustom) {
        if ((gv_convoCameraCustomCallback != null)) {
            TriggerExecute(gv_convoCameraCustomCallback, true, true);
        }

        return ;
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        lv_cameraName = (lv_c_StringRaynor + "Closeup");
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        lv_cameraName = (lv_c_StringRaynor + "Medium");
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraRaynorShoulder) {
        lv_cameraName = (lv_c_StringRaynor + "Shoulder");
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraRaynorPushin) {
        lv_cameraName = (lv_c_StringRaynor + "Pushin");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraRaynorPullout) {
        lv_cameraName = (lv_c_StringRaynor + "Pushout");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraRaynorPanMedium) {
        lv_cameraName = (lv_c_StringRaynor + "Pan Medium");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        lv_cameraName = (lv_c_StringCharacter + "Closeup");
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        lv_cameraName = (lv_c_StringCharacter + "Medium");
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar1Shoulder) {
        lv_cameraName = (lv_c_StringCharacter + "Shoulder");
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar1Pushin) {
        lv_cameraName = (lv_c_StringCharacter + "Pushin");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar1Pullout) {
        lv_cameraName = (lv_c_StringCharacter + "Pushout");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar1PanMedium) {
        lv_cameraName = (lv_c_StringCharacter + "Pan Medium");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar2Closeup) {
        lv_cameraName = (lv_c_StringCharacter + "Closeup");
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar2Medium) {
        lv_cameraName = (lv_c_StringCharacter + "Medium");
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar2Shoulder) {
        lv_cameraName = (lv_c_StringCharacter + "Shoulder");
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar2Pushin) {
        lv_cameraName = (lv_c_StringCharacter + "Pushin");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar2Pullout) {
        lv_cameraName = (lv_c_StringCharacter + "Pushout");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == ge_ConvoCameraType_ConvoCameraChar2PanMedium) {
        lv_cameraName = (lv_c_StringCharacter + "Pan Medium");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else {
        return ;
    }
    gf_DisplayDebugMessage((StringExternal("Param/Value/61281884") + gf_RoomName(lp_room) + StringExternal("Param/Value/B463AF26") + gf_ActorName(lp_character) + StringExternal("Param/Value/20728E6C") + StringToText(lv_cameraName)));
    CameraUseModel(1, lp_cameraObject, lv_cameraName, 0.0);
}

bool gf_UseConversationCameraMarSaraTychus (int lp_cameraType) {
    // Automatic Variable Declarations
    int autoFA824B7F_val;

    // Implementation
    autoFA824B7F_val = lp_cameraType;
    if (autoFA824B7F_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(426), 0.0, -1, 10, true);
    }
    else if (autoFA824B7F_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(485), 0.0, -1, 10, true);
    }
    else if (autoFA824B7F_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(488), 0.0, -1, 10, true);
    }
    else if (autoFA824B7F_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(423), 0.0, -1, 10, true);
    }
    else if (autoFA824B7F_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(492), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraBridgeTosh (int lp_cameraType) {
    // Automatic Variable Declarations
    int auto883C35C4_val;

    // Implementation
    auto883C35C4_val = lp_cameraType;
    if (auto883C35C4_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(596), 0.0, -1, 10, true);
    }
    else if (auto883C35C4_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(595), 0.0, -1, 10, true);
    }
    else if (auto883C35C4_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(508), 0.0, -1, 10, true);
    }
    else if (auto883C35C4_val == ge_ConvoCameraType_ConvoCameraRaynorShoulder) {
        CameraApplyInfo(1, CameraInfoFromId(907), 0.0, -1, 10, true);
    }
    else if (auto883C35C4_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(597), 0.0, -1, 10, true);
    }
    else if (auto883C35C4_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(598), 0.0, -1, 10, true);
    }
    else if (auto883C35C4_val == ge_ConvoCameraType_ConvoCameraChar1Shoulder) {
        CameraApplyInfo(1, CameraInfoFromId(598), 0.0, -1, 10, true);
    }
    else if (auto883C35C4_val == ge_ConvoCameraType_ConvoCameraChar2Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(597), 0.0, -1, 10, true);
    }
    else if (auto883C35C4_val == ge_ConvoCameraType_ConvoCameraChar2Medium) {
        CameraApplyInfo(1, CameraInfoFromId(598), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraBridgeHorner (int lp_cameraType) {
    // Automatic Variable Declarations
    int autoE9D988A6_val;

    // Implementation
    autoE9D988A6_val = lp_cameraType;
    if (autoE9D988A6_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(581), 0.0, -1, 10, true);
    }
    else if (autoE9D988A6_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(354), 0.0, -1, 10, true);
    }
    else if (autoE9D988A6_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(355), 0.0, -1, 10, true);
    }
    else if (autoE9D988A6_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(582), 0.0, -1, 10, true);
    }
    else if (autoE9D988A6_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(580), 0.0, -1, 10, true);
    }
    else if (autoE9D988A6_val == ge_ConvoCameraType_ConvoCameraChar1Shoulder) {
        CameraApplyInfo(1, CameraInfoFromId(558), 0.0, -1, 10, true);
    }
    else if (autoE9D988A6_val == ge_ConvoCameraType_ConvoCameraChar2Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(582), 0.0, -1, 10, true);
    }
    else if (autoE9D988A6_val == ge_ConvoCameraType_ConvoCameraChar2Medium) {
        CameraApplyInfo(1, CameraInfoFromId(580), 0.0, -1, 10, true);
    }
    else if (autoE9D988A6_val == ge_ConvoCameraType_ConvoCameraChar2Shoulder) {
        CameraApplyInfo(1, CameraInfoFromId(558), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraBridgeHanson (int lp_cameraType) {
    // Automatic Variable Declarations
    int autoC4B7DAA8_val;

    // Implementation
    autoC4B7DAA8_val = lp_cameraType;
    if (autoC4B7DAA8_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(260), 0.0, -1, 10, true);
    }
    else if (autoC4B7DAA8_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(261), 0.0, -1, 10, true);
    }
    else if (autoC4B7DAA8_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(327), 0.0, -1, 10, true);
    }
    else if (autoC4B7DAA8_val == ge_ConvoCameraType_ConvoCameraRaynorShoulder) {
        CameraApplyInfo(1, CameraInfoFromId(1060), 0.0, -1, 10, true);
    }
    else if (autoC4B7DAA8_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(577), 0.0, -1, 10, true);
    }
    else if (autoC4B7DAA8_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(576), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraBridgeTychus (int lp_cameraType) {
    // Automatic Variable Declarations
    int autoB62DE91B_val;

    // Implementation
    autoB62DE91B_val = lp_cameraType;
    if (autoB62DE91B_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(570), 0.0, -1, 10, true);
    }
    else if (autoB62DE91B_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(566), 0.0, -1, 10, true);
    }
    else if (autoB62DE91B_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(567), 0.0, -1, 10, true);
    }
    else if (autoB62DE91B_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(568), 0.0, -1, 10, true);
    }
    else if (autoB62DE91B_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(569), 0.0, -1, 10, true);
    }
    else if (autoB62DE91B_val == ge_ConvoCameraType_ConvoCameraChar2Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(568), 0.0, -1, 10, true);
    }
    else if (autoB62DE91B_val == ge_ConvoCameraType_ConvoCameraChar2Medium) {
        CameraApplyInfo(1, CameraInfoFromId(569), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraBridgeCommunicator (int lp_cameraType) {
    // Automatic Variable Declarations
    int autoBF5DA589_val;

    // Implementation
    autoBF5DA589_val = lp_cameraType;
    if (autoBF5DA589_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(898), 0.0, -1, 10, true);
    }
    else if (autoBF5DA589_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(899), 0.0, -1, 10, true);
    }
    else if (autoBF5DA589_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(900), 0.0, -1, 10, true);
    }
    else if (autoBF5DA589_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(895), 0.0, -1, 10, true);
    }
    else if (autoBF5DA589_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(896), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraCantinaTychus (int lp_cameraType) {
    // Automatic Variable Declarations
    int autoC325EFC3_val;

    // Implementation
    autoC325EFC3_val = lp_cameraType;
    if (autoC325EFC3_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(325), 0.0, -1, 10, true);
    }
    else if (autoC325EFC3_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(623), 0.0, -1, 10, true);
    }
    else if (autoC325EFC3_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(626), 0.0, -1, 10, true);
    }
    else if (autoC325EFC3_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(624), 0.0, -1, 10, true);
    }
    else if (autoC325EFC3_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(625), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraCantinaTosh (int lp_cameraType) {
    // Automatic Variable Declarations
    int autoC7D5E46E_val;

    // Implementation
    autoC7D5E46E_val = lp_cameraType;
    if (autoC7D5E46E_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(1066), 0.0, -1, 10, true);
    }
    else if (autoC7D5E46E_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(1065), 0.0, -1, 10, true);
    }
    else if (autoC7D5E46E_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(1067), 0.0, -1, 10, true);
    }
    else if (autoC7D5E46E_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(1064), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraCharTychus (int lp_cameraType) {
    // Automatic Variable Declarations
    int auto7ED8D1B9_val;

    // Implementation
    auto7ED8D1B9_val = lp_cameraType;
    if (auto7ED8D1B9_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(552), 0.0, -1, 10, true);
    }
    else if (auto7ED8D1B9_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(553), 0.0, -1, 10, true);
    }
    else if (auto7ED8D1B9_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(554), 0.0, -1, 10, true);
    }
    else if (auto7ED8D1B9_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(555), 0.0, -1, 10, true);
    }
    else if (auto7ED8D1B9_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(556), 0.0, -1, 10, true);
    }
    else if (auto7ED8D1B9_val == ge_ConvoCameraType_ConvoCameraChar1Shoulder) {
        CameraApplyInfo(1, CameraInfoFromId(1079), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraCharWarfield (int lp_cameraType) {
    // Automatic Variable Declarations
    int auto9428B27A_val;

    // Implementation
    auto9428B27A_val = lp_cameraType;
    if (auto9428B27A_val == ge_ConvoCameraType_ConvoCameraRaynorShoulder) {
        CameraApplyInfo(1, CameraInfoFromId(112), 0.0, -1, 10, true);
    }
    else if (auto9428B27A_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(550), 0.0, -1, 10, true);
    }
    else if (auto9428B27A_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(551), 0.0, -1, 10, true);
    }
    else if (auto9428B27A_val == ge_ConvoCameraType_ConvoCameraChar1Shoulder) {
        CameraApplyInfo(1, CameraInfoFromId(117), 0.0, -1, 10, true);
    }
    else if (auto9428B27A_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(549), 0.0, -1, 10, true);
    }
    else if (auto9428B27A_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(557), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraLabHanson (int lp_cameraType) {
    // Automatic Variable Declarations
    int autoB4E9728C_val;

    // Implementation
    autoB4E9728C_val = lp_cameraType;
    if (autoB4E9728C_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(603), 0.0, -1, 10, true);
    }
    else if (autoB4E9728C_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(602), 0.0, -1, 10, true);
    }
    else if (autoB4E9728C_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(601), 0.0, -1, 10, true);
    }
    else if (autoB4E9728C_val == ge_ConvoCameraType_ConvoCameraRaynorShoulder) {
        CameraApplyInfo(1, CameraInfoFromId(604), 0.0, -1, 10, true);
    }
    else if (autoB4E9728C_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(600), 0.0, -1, 10, true);
    }
    else if (autoB4E9728C_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(599), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraLabAdjutant (int lp_cameraType) {
    // Automatic Variable Declarations
    int auto7C630580_val;

    // Implementation
    auto7C630580_val = lp_cameraType;
    if (auto7C630580_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(286), 0.0, -1, 10, true);
    }
    else if (auto7C630580_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(285), 0.0, -1, 10, true);
    }
    else if (auto7C630580_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(122), 0.0, -1, 10, true);
    }
    else if (auto7C630580_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(121), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraAmorySwan (int lp_cameraType) {
    // Automatic Variable Declarations
    int auto6A33610D_val;

    // Implementation
    auto6A33610D_val = lp_cameraType;
    if (auto6A33610D_val == ge_ConvoCameraType_ConvoCameraMaster) {
        CameraApplyInfo(1, CameraInfoFromId(575), 0.0, -1, 10, true);
    }
    else if (auto6A33610D_val == ge_ConvoCameraType_ConvoCameraRaynorCloseup) {
        CameraApplyInfo(1, CameraInfoFromId(572), 0.0, -1, 10, true);
    }
    else if (auto6A33610D_val == ge_ConvoCameraType_ConvoCameraRaynorMedium) {
        CameraApplyInfo(1, CameraInfoFromId(571), 0.0, -1, 10, true);
    }
    else if (auto6A33610D_val == ge_ConvoCameraType_ConvoCameraRaynorShoulder) {
        CameraApplyInfo(1, CameraInfoFromId(1020), 0.0, -1, 10, true);
    }
    else if (auto6A33610D_val == ge_ConvoCameraType_ConvoCameraChar1Closeup) {
        CameraApplyInfo(1, CameraInfoFromId(574), 0.0, -1, 10, true);
    }
    else if (auto6A33610D_val == ge_ConvoCameraType_ConvoCameraChar1Medium) {
        CameraApplyInfo(1, CameraInfoFromId(573), 0.0, -1, 10, true);
    }
    else if (auto6A33610D_val == ge_ConvoCameraType_ConvoCameraChar1Shoulder) {
        CameraApplyInfo(1, CameraInfoFromId(1019), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

void gf_SetConvensationCamera (int lp_type, camerainfo lp_cameraObject) {
    // Automatic Variable Declarations
    // Implementation
    gv_convoCameras[(lp_type)] = lp_cameraObject;
}

string gf_ConvoCharacter (int lp_actorID) {
    // Variable Declarations
    string lv_characterIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_actorID != ge_ActorID_ActorNone)) {
        lv_characterIndex = gv_actors[(lp_actorID)].lv_convoStateIndex;
    }

    return lv_characterIndex;
}

void gf_ConvoSetting (int lp_room, int lp_raynor, int lp_to1, unit lp_cameraObject1, int lp_to2, unit lp_cameraObject2, trigger lp_customCameraCallback, trigger lp_changeCameraCallback) {
    // Variable Declarations
    trigger lv_t;
    string lv_characterIndex1;
    string lv_characterIndex2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_DisplayDebugMessage((StringExternal("Param/Value/C3FCC4E0") + gf_RoomName(lp_room)));
    gv_convoCameraCurrent = ge_ConvoCameraType_ConvoCameraNone;
    gv_convoCameraRoom = lp_room;
    gv_convoCameraActor1 = lp_to1;
    gv_convoCameraActor2 = lp_to2;
    gv_convoCameraObjectCurrent1 = lp_cameraObject1;
    gv_convoCameraObjectCurrent2 = lp_cameraObject2;
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(lp_raynor));
    ConversationDataRegisterUnit(gf_ConvoCharacter(lp_to1), gf_ActorUnit(lp_to1));
    ConversationDataRegisterUnit(gf_ConvoCharacter(lp_to2), gf_ActorUnit(lp_to2));
    gv_convoCameraChangeCallback = lp_changeCameraCallback;
    ConversationDataRegisterCamera("Cameras|Master", null, null, gt_ConvoCameraTriggerMaster, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01", null, null, gt_ConvoCameraTriggerCustom, true);
    ConversationDataRegisterCamera("Cameras|RaynorMedium", null, null, gt_ConvoCameraTriggerRaynorMedium, true);
    ConversationDataRegisterCamera("Cameras|RaynorCloseUp", null, null, gt_ConvoCameraTriggerRaynorCloseup, true);
    ConversationDataRegisterCamera("Cameras|Speaker2Medium", null, null, gt_ConvoCameraTriggerCharacter1Medium, true);
    ConversationDataRegisterCamera("Cameras|Speaker2CloseUp", null, null, gt_ConvoCameraTriggerCharacter1Closeup, true);
    ConversationDataRegisterCamera("Cameras|Speaker3Medium", null, null, gt_ConvoCameraTriggerCharacter2Medium, true);
    ConversationDataRegisterCamera("Cameras|Speaker3CloseUp", null, null, gt_ConvoCameraTriggerCharacter2Closeup, true);
    gv_convoCameraCustomCallback = lp_customCameraCallback;
    lv_characterIndex1 = gf_ConvoCharacter(lp_to1);
    ConversationDataRegisterUnit(lv_characterIndex1, gf_ActorUnit(lp_to1));
    ConversationDataRegisterCamera("Cameras|CloseUp", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Closeup, true);
    ConversationDataRegisterCamera("Cameras|Medium", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Medium, true);
    ConversationDataRegisterCamera("Cameras|ShoulderHip", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Shoulder, true);
    ConversationDataRegisterCamera("Cameras|PushIn", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Pushin, true);
    ConversationDataRegisterCamera("Cameras|PullOut", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Pushout, true);
    ConversationDataRegisterCamera("Cameras|PanMediumToMedium", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Pan, true);
    if ((lp_to2 != ge_ActorID_ActorNone)) {
        lv_characterIndex2 = gf_ConvoCharacter(lp_to2);
        ConversationDataRegisterUnit(lv_characterIndex2, gf_ActorUnit(lp_to2));
        ConversationDataRegisterCamera("Cameras|CloseUp", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Closeup, true);
        ConversationDataRegisterCamera("Cameras|Medium", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Medium, true);
        ConversationDataRegisterCamera("Cameras|ShoulderHip", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Shoulder, true);
        ConversationDataRegisterCamera("Cameras|PushIn", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Pushin, true);
        ConversationDataRegisterCamera("Cameras|PullOut", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Pushout, true);
        ConversationDataRegisterCamera("Cameras|PanMediumToMedium", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Pan, true);
    }

    ConversationDataRegisterCamera("Cameras|CloseUp", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorCloseup, true);
    ConversationDataRegisterCamera("Cameras|Medium", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorMedium, true);
    ConversationDataRegisterCamera("Cameras|ShoulderHip", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorShoulder, true);
    ConversationDataRegisterCamera("Cameras|PushIn", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorPushin, true);
    ConversationDataRegisterCamera("Cameras|PullOut", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorPushout, true);
    ConversationDataRegisterCamera("Cameras|PanMediumToMedium", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorPan, true);
}

int gf_ConvoGetActorLocatioinActor (int lp_room, int lp_to) {
    // Variable Declarations
    int lv_tempTo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tempTo = ge_ActorID_ActorNone;

    // Implementation
    if ((lp_room == ge_RoomID_RoomBridge) && ((lp_to == ge_ActorID_ActorHanson) || (lp_to == ge_ActorID_ActorTosh))) {
        lv_tempTo = ge_ActorID_ActorTychus;
    }
    else if ((lp_room == ge_RoomID_RoomCantina) && (lp_to == ge_ActorID_ActorYbarraMiscMerc)) {
        lv_tempTo = ge_ActorID_ActorTychus;
    }
    else if ((lp_room == ge_RoomID_RoomLab) && (lp_to == ge_ActorID_ActorStetmann)) {
        lv_tempTo = ge_ActorID_ActorHanson;
    }
    else if ((lp_room == ge_RoomID_RoomLab) && (lp_to == ge_ActorID_ActorAdjutantConfederate)) {
        lv_tempTo = ge_ActorID_ActorNone;
    }
    else if ((true == true)) {
        lv_tempTo = lp_to;
    }
    return lv_tempTo;
}

void gf_ConvoPositionActors (int lp_room, int lp_raynor, int lp_to1, int lp_to2) {
    // Variable Declarations
    int lv_tempTo1;
    int lv_tempTo2;

    // Automatic Variable Declarations
    int auto5EED2DDB_val;
    int auto3AEB40C2_val;
    int auto2F7FB01D_val;

    // Variable Initialization
    lv_tempTo1 = ge_ActorID_ActorNone;
    lv_tempTo2 = ge_ActorID_ActorNone;

    // Implementation
    auto5EED2DDB_val = lp_room;
    if (auto5EED2DDB_val == ge_RoomID_RoomCantina) {
        auto3AEB40C2_val = lp_to1;
        if (auto3AEB40C2_val == ge_ActorID_ActorTychus) {
            if ((gv_cantinaState == ge_CantinaStates_Broken)) {
                gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(390));
                gf_ResetActorToLocation(lp_to1, PointFromId(391));
            }
            else {
                gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(616));
                gf_ResetActorToLocation(lp_to1, PointFromId(615));
            }
            return ;
        }
        else {
        }
    }
    else if (auto5EED2DDB_val == ge_RoomID_RoomChar) {
        auto2F7FB01D_val = lp_to1;
        if (auto2F7FB01D_val == ge_ActorID_ActorTychus) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(220));
            gf_ResetActorToLocation(lp_to1, PointFromId(223));
            return ;
        }
        else if (auto2F7FB01D_val == ge_ActorID_ActorWarfield) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(227));
            gf_ResetActorToLocation(lp_to1, PointFromId(228));
            return ;
        }
        else if (auto2F7FB01D_val == ge_ActorID_ActorWarfieldAOD) {
            gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(227));
            gf_ResetActorToLocation(lp_to1, PointFromId(228));
            return ;
        }
        else {
        }
    }
    else {
    }
    lv_tempTo1 = gf_ConvoGetActorLocatioinActor(lp_room, lp_to1);
    if ((lv_tempTo1 != ge_ActorID_ActorNone)) {
        gf_ResetActorToLocation(lp_raynor, gf_ActorPoint(lp_room, lp_raynor, lv_tempTo1));
        gf_ResetActorToLocation(lp_to1, gf_ActorPoint(lp_room, lv_tempTo1, ge_ActorID_ActorRaynor));
    }
    else {
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, gf_ActorPoint(lp_room, lp_raynor, lp_to1));
    }
    lv_tempTo2 = gf_ConvoGetActorLocatioinActor(lp_room, lp_to2);
    if ((lv_tempTo2 != ge_ActorID_ActorNone)) {
        gf_ResetActorToLocation(lp_to2, gf_ActorPoint(lp_room, lv_tempTo2, lp_raynor));
    }

}

void gf_ConvoClearCamera (int lp_to1, int lp_to2) {
    // Variable Declarations
    string lv_characterIndex1;
    string lv_characterIndex2;
    int lv_index;

    // Automatic Variable Declarations
    int auto1DA7D60C_ae;
    const int auto1DA7D60C_ai = 1;

    // Variable Initialization

    // Implementation
    ConversationDataRegisterCamera("Cameras|Master", null, null, null, false);
    lv_characterIndex1 = gf_ConvoCharacter(lp_to1);
    ConversationDataRegisterCamera("Cameras|CloseUp", lv_characterIndex1, null, null, false);
    ConversationDataRegisterCamera("Cameras|Medium", lv_characterIndex1, null, null, false);
    ConversationDataRegisterCamera("Cameras|ShoulderHip", lv_characterIndex1, null, null, false);
    ConversationDataRegisterCamera("Cameras|PushIn", lv_characterIndex1, null, null, false);
    ConversationDataRegisterCamera("Cameras|PullOut", lv_characterIndex1, null, null, false);
    if ((lp_to2 != ge_ActorID_ActorNone)) {
        lv_characterIndex2 = gf_ConvoCharacter(lp_to2);
        ConversationDataRegisterCamera("Cameras|CloseUp", lv_characterIndex2, null, null, false);
        ConversationDataRegisterCamera("Cameras|Medium", lv_characterIndex2, null, null, false);
        ConversationDataRegisterCamera("Cameras|ShoulderHip", lv_characterIndex2, null, null, false);
        ConversationDataRegisterCamera("Cameras|PushIn", lv_characterIndex2, null, null, false);
        ConversationDataRegisterCamera("Cameras|PullOut", lv_characterIndex2, null, null, false);
    }

    ConversationDataRegisterCamera("Cameras|CloseUp", "Characters|CharRaynor", null, null, false);
    ConversationDataRegisterCamera("Cameras|Medium", "Characters|CharRaynor", null, null, false);
    ConversationDataRegisterCamera("Cameras|ShoulderHip", "Characters|CharRaynor", null, null, false);
    ConversationDataRegisterCamera("Cameras|PushIn", "Characters|CharRaynor", null, null, false);
    ConversationDataRegisterCamera("Cameras|PullOut", "Characters|CharRaynor", null, null, false);
    auto1DA7D60C_ae = gv_c_ConvoCameraTypeLast;
    lv_index = gv_c_ConvoCameraTypeFirst;
    for ( ; ( (auto1DA7D60C_ai >= 0 && lv_index <= auto1DA7D60C_ae) || (auto1DA7D60C_ai < 0 && lv_index >= auto1DA7D60C_ae) ) ; lv_index += auto1DA7D60C_ai ) {
        gv_convoCameras[lv_index] = null;
    }
}

void gf_Convo (string lp_convo, int lp_room, int lp_raynor, point lp_raynorHome, int lp_to1, unit lp_cameraObject1, point lp_characterHome1, int lp_to2, unit lp_cameraObject2, point lp_characterHome2, trigger lp_callbackPre, trigger lp_callbackPost, bool lp_changeScreenMode, bool lp_changeCameraAtEnd, trigger lp_customCameraCallback, trigger lp_changeCameraCallback) {
    // Automatic Variable Declarations
    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, false);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceConversation);
    gf_SetIdleState(ge_IdleState_Busy);
    gf_ConvoSetting(lp_room, lp_raynor, lp_to1, lp_cameraObject1, lp_to2, lp_cameraObject2, lp_customCameraCallback, lp_changeCameraCallback);
    gf_ConvoPositionActors(lp_room, lp_raynor, lp_to1, lp_to2);
    gf_RoomScenePrepare(lp_room, ge_SceneType_Convo);
    gf_ActorScenePrepare(lp_to1, ge_ActorID_ActorNone, lp_room, ge_SceneType_Convo);
    gf_ActorScenePrepare(lp_to2, ge_ActorID_ActorNone, lp_room, ge_SceneType_Convo);
    gf_ActorScenePrepare(lp_raynor, lp_to1, lp_room, ge_SceneType_Convo);
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(lp_raynor), "AnimCancelActiveBlends ::Conversation");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(lp_to1), "AnimCancelActiveBlends ::Conversation");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(lp_to2), "AnimCancelActiveBlends ::Conversation");
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    TriggerExecute(lp_callbackPre, true, false);
    if ((lp_changeScreenMode == true)) {
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    }

    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    ConversationDataRun(lp_convo, PlayerGroupAll(), c_conversationSkipFull, true);
    gf_ConvoClearCamera(lp_to1, lp_to2);
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), "AnimCancelActiveBlends ::Conversation");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(lp_to1), "AnimCancelActiveBlends ::Conversation");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(lp_to2), "AnimCancelActiveBlends ::Conversation");
    TriggerExecute(lp_callbackPost, true, false);
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    if ((lp_raynorHome != null)) {
        gf_ResetActorToLocation(lp_raynor, lp_raynorHome);
    }

    if ((lp_characterHome1 != null)) {
        gf_ResetActorToLocation(lp_to1, lp_characterHome1);
    }

    if ((lp_characterHome2 != null)) {
        gf_ResetActorToLocation(lp_to2, lp_characterHome2);
    }

    if ((lp_changeCameraAtEnd == true)) {
        gf_ViewRoomCamera(lp_room, PlayerGroupAll(), 0.0);
    }

    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    if ((lp_changeScreenMode == true)) {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    }

    libCamp_gf_HideStoryUI(true, false);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
}

void gf_DisplayTimestampFromUserData (string lp_timestamp) {
    // Variable Declarations
    fixed lv_vol;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCamp_gf_HideStoryUI(false, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, 0.5);
    gf_TurnClickablesOnOff(gv_clickables, false);
    UISetCursorVisible(PlayerGroupAll(), false);
    libWoLC_gf_DisplayTimestamp(lp_timestamp, false);
    UISetCursorVisible(PlayerGroupAll(), true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    libCamp_gf_HideStoryUI(true, true);
}

void gf_DisplayTimestamp (int lp_type) {
    // Variable Declarations
    string lv_timestampRef;
    string lv_timestamp;
    string lv_suffix;

    // Automatic Variable Declarations
    int auto7D878BAB_val;

    // Variable Initialization
    lv_timestampRef = "";
    lv_suffix = "";

    // Implementation
    if (((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == false) || (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == true))) {
        return ;
    }

    auto7D878BAB_val = lp_type;
    if (auto7D878BAB_val == ge_TimestampType_BeforeCinematic) {
        lv_suffix = "_Cutscene";
    }
    else if (auto7D878BAB_val == ge_TimestampType_BeforeStorymode) {
        lv_suffix = "_Storymode";
    }
    else if (auto7D878BAB_val == ge_TimestampType_BeforeDebrief) {
        lv_suffix = "_Debrief";
    }
    else {
    }
    lv_timestampRef = ("Timestamps;" + (libWoLC_gf_LastMap()) + lv_suffix);
    lv_timestamp = UserDataInstanceFromReference(lv_timestampRef);
    if ((lv_timestamp != null)) {
        gf_DisplayTimestampFromUserData(lv_timestamp);
    }

}

string gf_SceneFile (string lp_scene, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(true, ("TStory01_Scene_File" + IntToString(lp_index) + "_" + (lp_scene)));
}

string gf_SceneAnimation (string lp_scene, int lp_index) {
    // Variable Declarations
    string lv_animation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_animation = DataTableGetString(true, ("TStory01_Scene_Anim" + IntToString(lp_index) + "_" + (lp_scene)));

    // Implementation
    return lv_animation;
}

soundlink gf_SceneSound (string lp_scene, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetSoundLink(true, ("TStory01_Scene_Sound" + IntToString(lp_index) + "_" + (lp_scene)));
}

void gf_SceneInitDataSingle (string lp_sceneIndex, string lp_file1, string lp_file2, string lp_file3, string lp_anim1, string lp_anim2, string lp_anim3, soundlink lp_mESound1, soundlink lp_mESound2, soundlink lp_mESound3) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DataTableSetString(true, ("TStory01_Scene_File" + IntToString(1) + "_" + (lp_sceneIndex)), lp_file1);
    DataTableSetString(true, ("TStory01_Scene_File" + IntToString(2) + "_" + (lp_sceneIndex)), lp_file2);
    DataTableSetString(true, ("TStory01_Scene_File" + IntToString(3) + "_" + (lp_sceneIndex)), lp_file3);
    DataTableSetString(true, ("TStory01_Scene_Anim" + IntToString(1) + "_" + (lp_sceneIndex)), lp_anim1);
    DataTableSetString(true, ("TStory01_Scene_Anim" + IntToString(2) + "_" + (lp_sceneIndex)), lp_anim2);
    DataTableSetString(true, ("TStory01_Scene_Anim" + IntToString(3) + "_" + (lp_sceneIndex)), lp_anim3);
    DataTableSetSoundLink(true, ("TStory01_Scene_Sound" + IntToString(1) + "_" + (lp_sceneIndex)), lp_mESound1);
    DataTableSetSoundLink(true, ("TStory01_Scene_Sound" + IntToString(2) + "_" + (lp_sceneIndex)), lp_mESound2);
    DataTableSetSoundLink(true, ("TStory01_Scene_Sound" + IntToString(3) + "_" + (lp_sceneIndex)), lp_mESound3);
}

void gf_SceneInitData () {
    // Automatic Variable Declarations
    // Implementation
    gf_SceneInitDataSingle("SceneTerran01RaynorIntro", "CinematicScenes/Terran01.SC2Scene", null, null, "Dialogue 01", "", "", SoundLink("Terran01_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran03ZeratulsWarning", "CinematicScenes/Terran03.SC2Scene", null, null, "Dialogue 03", "", "", SoundLink("Terran03_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran04TychusIntro", "CinematicScenes/Terran04.SC2Scene", null, null, "Dialogue 04", "", "", SoundLink("Terran04_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran05HornerBridgeIntro", "CinematicScenes/Terran05.SC2Scene", null, null, "Dialogue 05", "", "", SoundLink("Terran05_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran06ValerianIntro", "CinematicScenes/Terran06a.SC2Scene", "CinematicScenes/Terran06b.SC2Scene", "CinematicScenes/Terran06c.SC2Scene", "Dialogue 06 A", "Dialogue 06 B", "Dialogue 06 C", SoundLink("Terran06A_ME", -1), SoundLink("Terran06B_ME", -1), SoundLink("Terran06C_ME", -1));
    gf_SceneInitDataSingle("SceneTerran07BarFight", "CinematicScenes/Terran07.SC2Scene", null, null, "Dialogue 07", "", "", SoundLink("Terran07_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran08HansonEndA", "CinematicScenes/Terran08.SC2Scene", null, null, "Dialogue 08", "", "", SoundLink("Terran08_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran09ToshEndA", "CinematicScenes/Terran09.SC2Scene", null, null, "Dialogue 09", "", "", SoundLink("Terran09_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran10RaynorsDream", "CinematicScenes/Terran10.SC2Scene", null, null, "Dialogue 10", "", "", SoundLink("Terran10_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran11CharBatltefield", "CinematicScenes/Terran11.SC2Scene", null, null, "Dialogue 11", "", "", SoundLink("Terran11_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran12HornerVictory", "CinematicScenes/Terran12.SC2Scene", null, null, "Dialogue 12", "", "", SoundLink("Terran12_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran13HansonEndB", "CinematicScenes/Terran13.SC2Scene", null, null, "Dialogue 13", "", "", SoundLink("Terran13_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran14ToshEndB", "CinematicScenes/Terran14.SC2Scene", null, null, "Dialogue 14", "", "", SoundLink("Terran14_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran15KerriganIntro", "CinematicScenes/Terran15.SC2Scene", null, null, "Dialogue 15", "", "", SoundLink("Terran15_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran16CharIntro", "CinematicScenes/Terran16.SC2Scene", null, null, "Dialogue 16", "", "", SoundLink("Terran16_ME", -1), null, null);
    gf_SceneInitDataSingle("SceneTerran17CharBattlefieldEnd", "CinematicScenes/Terran17.SC2Scene", null, null, "Dialogue 17", "", "", SoundLink("Terran17_ME", -1), null, null);
}

void gf_ScenePreload (string lp_scene) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoABEEDA30_ae = 3;
    const int autoABEEDA30_ai = 1;
    string autoCB827E93_val;

    // Variable Initialization

    // Implementation
    if ((DataTableGetBool(true, ("TStory01_Scene_Preloaded_" + (lp_scene))) == true)) {
        return ;
    }

    lv_index = 1;
    for ( ; ( (autoABEEDA30_ai >= 0 && lv_index <= autoABEEDA30_ae) || (autoABEEDA30_ai < 0 && lv_index >= autoABEEDA30_ae) ) ; lv_index += autoABEEDA30_ai ) {
        if ((gf_SceneFile(lp_scene, lv_index) != null)) {
            PreloadScene(gf_SceneFile(lp_scene, lv_index), false);
        }

        if ((gf_SceneSound(lp_scene, lv_index) != null)) {
            libNtve_gf_PreloadSoundObject(SoundLinkId(gf_SceneSound(lp_scene, lv_index)), false);
        }

    }
    autoCB827E93_val = lp_scene;
    if (autoCB827E93_val == "SceneTerran07BarFight") {
        gf_ScenePreloadCantinaTrophies(lp_scene);
    }
    else if (autoCB827E93_val == "SceneTerran10RaynorsDream") {
        gf_ScenePreloadCantinaTrophies(lp_scene);
    }
    else if (autoCB827E93_val == "SceneTerran01RaynorIntro") {
        PreloadMovie("Assets\\Textures\\sm_pt01_tv.ogv", false);
    }
    else {
    }
    if (((lp_scene == "SceneTerran11CharBatltefield") || (lp_scene == "SceneTerran16CharIntro") || (lp_scene == "SceneTerran17CharBattlefieldEnd"))) {
        libNtve_gf_PreloadModelObject("SMCharCinematicSkyparallax", false);
    }

    DataTableSetBool(true, ("TStory01_Scene_Preloaded_" + (lp_scene)), true);
}

void gf_ScenePreloadInit () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    string auto33C12359_val;

    // Variable Initialization

    // Implementation
    if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Available) == true)) {
        gf_ScenePreload("SceneTerran16CharIntro");
    }

    if ((gv_isTransitionalLoad == true)) {
        return ;
    }

    auto33C12359_val = libWoLC_gf_LastSuccessfulMission();
    if (auto33C12359_val == null) {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran01RaynorIntro") == false)) {
            gf_ScenePreload("SceneTerran01RaynorIntro");
        }

    }
    else if (auto33C12359_val == "TRaynor01") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran04TychusIntro") == false)) {
            gf_ScenePreload("SceneTerran04TychusIntro");
        }

    }
    else if (auto33C12359_val == "TRaynor03") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran05HornerBridgeIntro") == false)) {
            gf_ScenePreload("SceneTerran05HornerBridgeIntro");
        }

    }
    else if (auto33C12359_val == "THanson03A") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran08HansonEndA") == false)) {
            gf_ScenePreload("SceneTerran08HansonEndA");
        }

    }
    else if (auto33C12359_val == "THanson03B") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran13HansonEndB") == false)) {
            gf_ScenePreload("SceneTerran13HansonEndB");
        }

    }
    else if (auto33C12359_val == "TTosh03A") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran09ToshEndA") == false)) {
            gf_ScenePreload("SceneTerran09ToshEndA");
        }

    }
    else if (auto33C12359_val == "TTosh03B") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran14ToshEndB") == false)) {
            gf_ScenePreload("SceneTerran14ToshEndB");
        }

    }
    else if (auto33C12359_val == "THorner04") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran12HornerVictory") == false)) {
            gf_ScenePreload("SceneTerran12HornerVictory");
        }

    }
    else if (auto33C12359_val == "TTychus01") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran15KerriganIntro") == false)) {
            gf_ScenePreload("SceneTerran15KerriganIntro");
        }

    }
    else if (auto33C12359_val == "TTychus02") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran03ZeratulsWarning") == false)) {
            gf_ScenePreload("SceneTerran03ZeratulsWarning");
        }

    }
    else if (auto33C12359_val == "TTychus03") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran10RaynorsDream") == false)) {
            gf_ScenePreload("SceneTerran10RaynorsDream");
        }

    }
    else if (auto33C12359_val == "TTychus04") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran06ValerianIntro") == false)) {
            gf_ScenePreload("SceneTerran06ValerianIntro");
        }

    }
    else if (auto33C12359_val == "TTychus05") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran07BarFight") == false)) {
            gf_ScenePreload("SceneTerran07BarFight");
        }

    }
    else if (auto33C12359_val == "TValerian01") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran11CharBatltefield") == false)) {
            gf_ScenePreload("SceneTerran11CharBatltefield");
        }

    }
    else if (auto33C12359_val == "TValerian02A") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran17CharBattlefieldEnd") == false)) {
            gf_ScenePreload("SceneTerran17CharBattlefieldEnd");
        }

    }
    else if (auto33C12359_val == "TValerian02B") {
        if ((libWoLC_gf_StoryScenePlayed("SceneTerran17CharBattlefieldEnd") == false)) {
            gf_ScenePreload("SceneTerran17CharBattlefieldEnd");
        }

    }
    else {
    }
}

void gf_ScenePrepare (bool lp_clickableOff) {
    // Variable Declarations
    int lv_actorIndex;
    int lv_actorID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_actorID = ge_ActorID_ActorNone;

    // Implementation
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceScene);
    gf_SetIdleState(ge_IdleState_Busy);
    if ((lp_clickableOff == true)) {
        gf_TurnClickablesOnOff(gv_clickables, false);
    }

    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_GoToRoom(ge_RoomID_RoomVoid, false);
    gf_HideAllActors(false);
    libCamp_gf_ChangeAmbience(null);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    gf_HideFullScreenImage(false);
}

void gf_ScenePlayAsync (string lp_scene, int lp_subIndex) {
    // Variable Declarations
    string lv_movieName;

    // Automatic Variable Declarations
    int auto4D2DD2F0_val;

    // Variable Initialization
    lv_movieName = "";

    // Implementation
    libCamp_gf_ChangeAmbience(null);
    Wait(0.1, c_timeGame);
    SoundPlaySceneFile(gf_SceneSound(lp_scene, lp_subIndex), PlayerGroupAll(), gf_SceneFile(lp_scene, lp_subIndex), "Cam_Export");
    gv_sceneSound = SoundLastPlayed();
    lv_movieName = ("TScene|" + (lp_scene));
    if ((lp_scene == "SceneTerran06ValerianIntro")) {
        auto4D2DD2F0_val = lp_subIndex;
        if (auto4D2DD2F0_val == 1) {
            lv_movieName = (lv_movieName + "a");
        }
        else if (auto4D2DD2F0_val == 2) {
            lv_movieName = (lv_movieName + "b");
        }
        else if (auto4D2DD2F0_val == 3) {
            lv_movieName = (lv_movieName + "c");
        }
        else {
        }
    }

    lv_movieName = (lv_movieName + ".ogg");
    MovieStartRecording(lv_movieName);
    TriggerExecute(gt_SceneSkippable, true, true);
    MovieStopRecording();
}

void gf_SceneCleanup () {
    // Automatic Variable Declarations
    // Implementation
    SoundStop(gv_sceneSound, true);
    gv_sceneSound = null;
    SoundStopAllModelSounds();
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
}

void gf_SceneCleanupWithFadeandEnterRoom () {
    // Automatic Variable Declarations
    // Implementation
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_SceneCleanup();
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
}

void gf_ScenePrepareCantinaTrophies (string lp_scene, fixed lp_x, fixed lp_y, fixed lp_facing) {
    // Variable Declarations
    point lv_loc;
    unitgroup lv_group;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto43B2FCFA_g;
    int auto43B2FCFA_u;
    string auto9CFFBB4F_val;
    unitgroup auto3D74DB38_g;
    int auto3D74DB38_u;
    unit auto3476E483_val;
    unitgroup auto4D2284EC_g;
    int auto4D2284EC_u;
    unit auto7EFE1C75_val;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    gf_SceneRemoveCantinaTrophies();
    lv_loc = Point(lp_x, lp_y);
    lv_group = gf_SceneCantinaTrophiesUnitTypeGroup(lp_scene);
    auto43B2FCFA_g = lv_group;
    auto43B2FCFA_u = UnitGroupCount(auto43B2FCFA_g, c_unitCountAll);
    for (;; auto43B2FCFA_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto43B2FCFA_g, auto43B2FCFA_u);
        if (lv_indexUnit == null) { break; }
        UnitCreate(1, UnitGetType(lv_indexUnit), 0, 0, lv_loc, lp_facing);
        UnitGroupAdd(gv_sceneCantinaTrophies, UnitLastCreated());
        if ((lv_indexUnit == gv_labCrystal)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Dialogue 13", 0, 0.0);
        }

    }
    if ((libWoLC_gf_StoryScenePlayed(lp_scene) == true)) {
        return ;
    }

    auto9CFFBB4F_val = lp_scene;
    if (auto9CFFBB4F_val == "SceneTerran07BarFight") {
        ConversationDataStateSetValue("SceneExtraObjects|Terran07TrophyHanson03A", 0);
        ConversationDataStateSetValue("SceneExtraObjects|Terran07TrophyHanson03B", 0);
        ConversationDataStateSetValue("SceneExtraObjects|Terran07TrophyHorner", 0);
        ConversationDataStateSetValue("SceneExtraObjects|Terran07TrophyTosh03A", 0);
        ConversationDataStateSetValue("SceneExtraObjects|Terran07TrophyTosh03B", 0);
        auto3D74DB38_g = lv_group;
        auto3D74DB38_u = UnitGroupCount(auto3D74DB38_g, c_unitCountAll);
        for (;; auto3D74DB38_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto3D74DB38_g, auto3D74DB38_u);
            if (lv_indexUnit == null) { break; }
            auto3476E483_val = lv_indexUnit;
            if (auto3476E483_val == gv_cantinaTrophyHansonA) {
                ConversationDataStateSetValue("SceneExtraObjects|Terran07TrophyHanson03A", 1);
            }
            else if (auto3476E483_val == gv_cantinaTrophyHansonB) {
                ConversationDataStateSetValue("SceneExtraObjects|Terran07TrophyHanson03B", 1);
            }
            else if (auto3476E483_val == gv_cantinaTrophyHorner) {
                ConversationDataStateSetValue("SceneExtraObjects|Terran07TrophyHorner", 1);
            }
            else if (auto3476E483_val == gv_cantinaTrophyToshA) {
                ConversationDataStateSetValue("SceneExtraObjects|Terran07TrophyTosh03A", 1);
            }
            else if (auto3476E483_val == gv_cantinaTrophyToshB) {
                ConversationDataStateSetValue("SceneExtraObjects|Terran07TrophyTosh03B", 1);
            }
            else {
            }
        }
    }
    else if (auto9CFFBB4F_val == "SceneTerran10RaynorsDream") {
        ConversationDataStateSetValue("SceneExtraObjects|Terran10TrophyHanson03A", 0);
        ConversationDataStateSetValue("SceneExtraObjects|Terran10TrophyHanson03B", 0);
        ConversationDataStateSetValue("SceneExtraObjects|Terran10TrophyHorner", 0);
        ConversationDataStateSetValue("SceneExtraObjects|Terran10TrophyTosh03A", 0);
        ConversationDataStateSetValue("SceneExtraObjects|Terran10TrophyTosh03B", 0);
        auto4D2284EC_g = lv_group;
        auto4D2284EC_u = UnitGroupCount(auto4D2284EC_g, c_unitCountAll);
        for (;; auto4D2284EC_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto4D2284EC_g, auto4D2284EC_u);
            if (lv_indexUnit == null) { break; }
            auto7EFE1C75_val = lv_indexUnit;
            if (auto7EFE1C75_val == gv_cantinaTrophyHansonA) {
                ConversationDataStateSetValue("SceneExtraObjects|Terran10TrophyHanson03A", 1);
            }
            else if (auto7EFE1C75_val == gv_cantinaTrophyHansonB) {
                ConversationDataStateSetValue("SceneExtraObjects|Terran10TrophyHanson03B", 1);
            }
            else if (auto7EFE1C75_val == gv_cantinaTrophyHorner) {
                ConversationDataStateSetValue("SceneExtraObjects|Terran10TrophyHorner", 1);
            }
            else if (auto7EFE1C75_val == gv_cantinaTrophyToshA) {
                ConversationDataStateSetValue("SceneExtraObjects|Terran10TrophyTosh03A", 1);
            }
            else if (auto7EFE1C75_val == gv_cantinaTrophyToshB) {
                ConversationDataStateSetValue("SceneExtraObjects|Terran10TrophyTosh03B", 1);
            }
            else {
            }
        }
    }
    else {
    }
}

void gf_SceneRemoveCantinaTrophies () {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto2E08833E_g;
    int auto2E08833E_u;

    // Variable Initialization

    // Implementation
    auto2E08833E_g = gv_sceneCantinaTrophies;
    auto2E08833E_u = UnitGroupCount(auto2E08833E_g, c_unitCountAll);
    for (;; auto2E08833E_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto2E08833E_g, auto2E08833E_u);
        if (lv_indexUnit == null) { break; }
        UnitRemove(lv_indexUnit);
    }
}

void gf_ScenePreloadCantinaTrophies (string lp_scene) {
    // Variable Declarations
    unitgroup lv_group;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoD0294E93_g;
    int autoD0294E93_u;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    lv_group = gf_SceneCantinaTrophiesUnitTypeGroup(lp_scene);
    autoD0294E93_g = lv_group;
    autoD0294E93_u = UnitGroupCount(autoD0294E93_g, c_unitCountAll);
    for (;; autoD0294E93_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoD0294E93_g, autoD0294E93_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_PreloadUnit(UnitGetType(lv_indexUnit), false);
    }
}

unitgroup gf_SceneCantinaTrophiesUnitTypeGroup (string lp_scene) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    string auto7A58B764_val;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    UnitGroupAdd(lv_group, gv_cantinaTrophyFrame);
    UnitGroupAdd(lv_group, gv_cantinaTrophyHydraClaw);
    if ((libWoLC_gf_StoryScenePlayed(lp_scene) == true)) {
        auto7A58B764_val = lp_scene;
        if (auto7A58B764_val == "SceneTerran07BarFight") {
            if ((ConversationDataStateGetValue("SceneExtraObjects|Terran07TrophyHanson03A") > 0)) {
                UnitGroupAdd(lv_group, gv_cantinaTrophyHansonA);
            }

            if ((ConversationDataStateGetValue("SceneExtraObjects|Terran07TrophyHanson03B") > 0)) {
                UnitGroupAdd(lv_group, gv_cantinaTrophyHansonB);
            }

            if ((ConversationDataStateGetValue("SceneExtraObjects|Terran07TrophyTosh03A") > 0)) {
                UnitGroupAdd(lv_group, gv_cantinaTrophyToshA);
            }

            if ((ConversationDataStateGetValue("SceneExtraObjects|Terran07TrophyTosh03B") > 0)) {
                UnitGroupAdd(lv_group, gv_cantinaTrophyToshB);
            }

            if ((ConversationDataStateGetValue("SceneExtraObjects|Terran07TrophyHorner") > 0)) {
                UnitGroupAdd(lv_group, gv_cantinaTrophyHorner);
            }

        }
        else if (auto7A58B764_val == "SceneTerran10RaynorsDream") {
            if ((ConversationDataStateGetValue("SceneExtraObjects|Terran10TrophyHanson03A") > 0)) {
                UnitGroupAdd(lv_group, gv_cantinaTrophyHansonA);
            }

            if ((ConversationDataStateGetValue("SceneExtraObjects|Terran10TrophyHanson03B") > 0)) {
                UnitGroupAdd(lv_group, gv_cantinaTrophyHansonB);
            }

            if ((ConversationDataStateGetValue("SceneExtraObjects|Terran10TrophyTosh03A") > 0)) {
                UnitGroupAdd(lv_group, gv_cantinaTrophyToshA);
            }

            if ((ConversationDataStateGetValue("SceneExtraObjects|Terran10TrophyTosh03B") > 0)) {
                UnitGroupAdd(lv_group, gv_cantinaTrophyToshB);
            }

            if ((ConversationDataStateGetValue("SceneExtraObjects|Terran10TrophyHorner") > 0)) {
                UnitGroupAdd(lv_group, gv_cantinaTrophyHorner);
            }

        }
        else {
        }
    }
    else {
        if ((libWoLC_gf_MissionStatusCheck("THanson03A", libWoLC_ge_MissionStatus_Completed) == true)) {
            UnitGroupAdd(lv_group, gv_cantinaTrophyHansonA);
        }

        if ((libWoLC_gf_MissionStatusCheck("THanson03B", libWoLC_ge_MissionStatus_Completed) == true)) {
            UnitGroupAdd(lv_group, gv_cantinaTrophyHansonB);
        }

        if ((libWoLC_gf_MissionStatusCheck("TTosh03A", libWoLC_ge_MissionStatus_Completed) == true)) {
            UnitGroupAdd(lv_group, gv_cantinaTrophyToshA);
        }

        if ((libWoLC_gf_MissionStatusCheck("TTosh03B", libWoLC_ge_MissionStatus_Completed) == true)) {
            UnitGroupAdd(lv_group, gv_cantinaTrophyToshB);
        }

        if ((libWoLC_gf_MissionStatusCheck("THorner04", libWoLC_ge_MissionStatus_Completed) == true)) {
            UnitGroupAdd(lv_group, gv_cantinaTrophyHorner);
        }

    }
    return lv_group;
}

void gf_ScenePrepareLabTrophies (fixed lp_x, fixed lp_y, fixed lp_facing) {
    // Variable Declarations
    point lv_loc;
    unitgroup lv_group;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoB64D5819_g;
    int autoB64D5819_u;
    unitgroup autoFC43916F_g;
    int autoFC43916F_u;
    unit auto787F2C58_val;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    gf_SceneRemoveLabTrophies();
    lv_loc = Point(lp_x, lp_y);
    lv_group = gf_SceneLabTrophiesUnitTypeGroup();
    autoB64D5819_g = lv_group;
    autoB64D5819_u = UnitGroupCount(autoB64D5819_g, c_unitCountAll);
    for (;; autoB64D5819_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoB64D5819_g, autoB64D5819_u);
        if (lv_indexUnit == null) { break; }
        UnitCreate(1, UnitGetType(lv_indexUnit), 0, 0, lv_loc, lp_facing);
        UnitGroupAdd(gv_sceneLabTrophies, UnitLastCreated());
        if (((lv_indexUnit == gv_labArtifact1) || (lv_indexUnit == gv_labArtifact2) || (lv_indexUnit == gv_labArtifact3) || (lv_indexUnit == gv_labArtifact4))) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Stand", c_animFlagPlayForever, 0.0);
        }

    }
    if ((libWoLC_gf_StoryScenePlayed("SceneTerran13HansonEndB") == true)) {
        return ;
    }

    ConversationDataStateSetValue("SceneExtraObjects|Terran13Crystal", 0);
    ConversationDataStateSetValue("SceneExtraObjects|Terran13Artifact1", 0);
    ConversationDataStateSetValue("SceneExtraObjects|Terran13Artifact2", 0);
    ConversationDataStateSetValue("SceneExtraObjects|Terran13Artifact3", 0);
    ConversationDataStateSetValue("SceneExtraObjects|Terran13Artifact4", 0);
    autoFC43916F_g = lv_group;
    autoFC43916F_u = UnitGroupCount(autoFC43916F_g, c_unitCountAll);
    for (;; autoFC43916F_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoFC43916F_g, autoFC43916F_u);
        if (lv_indexUnit == null) { break; }
        auto787F2C58_val = lv_indexUnit;
        if (auto787F2C58_val == gv_labCrystal) {
            ConversationDataStateSetValue("SceneExtraObjects|Terran13Crystal", 1);
        }
        else if (auto787F2C58_val == gv_labArtifact1) {
            ConversationDataStateSetValue("SceneExtraObjects|Terran13Artifact1", 1);
        }
        else if (auto787F2C58_val == gv_labArtifact2) {
            ConversationDataStateSetValue("SceneExtraObjects|Terran13Artifact2", 1);
        }
        else if (auto787F2C58_val == gv_labArtifact3) {
            ConversationDataStateSetValue("SceneExtraObjects|Terran13Artifact3", 1);
        }
        else if (auto787F2C58_val == gv_labArtifact4) {
            ConversationDataStateSetValue("SceneExtraObjects|Terran13Artifact4", 1);
        }
        else {
        }
    }
}

void gf_SceneRemoveLabTrophies () {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto10FDF654_g;
    int auto10FDF654_u;

    // Variable Initialization

    // Implementation
    auto10FDF654_g = gv_sceneLabTrophies;
    auto10FDF654_u = UnitGroupCount(auto10FDF654_g, c_unitCountAll);
    for (;; auto10FDF654_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto10FDF654_g, auto10FDF654_u);
        if (lv_indexUnit == null) { break; }
        UnitRemove(lv_indexUnit);
    }
}

void gf_ScenePreloadLabTrophies () {
    // Variable Declarations
    unitgroup lv_group;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto3A733BAC_g;
    int auto3A733BAC_u;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    lv_group = gf_SceneLabTrophiesUnitTypeGroup();
    auto3A733BAC_g = lv_group;
    auto3A733BAC_u = UnitGroupCount(auto3A733BAC_g, c_unitCountAll);
    for (;; auto3A733BAC_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto3A733BAC_g, auto3A733BAC_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_PreloadUnit(UnitGetType(lv_indexUnit), false);
    }
}

unitgroup gf_SceneLabTrophiesUnitTypeGroup () {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    if ((libWoLC_gf_StoryScenePlayed("SceneTerran13HansonEndB") == true)) {
        if ((ConversationDataStateGetValue("SceneExtraObjects|Terran13Crystal") > 0)) {
            UnitGroupAdd(lv_group, gv_labCrystal);
        }

        if ((ConversationDataStateGetValue("SceneExtraObjects|Terran13Artifact1") > 0)) {
            UnitGroupAdd(lv_group, gv_labArtifactField);
            UnitGroupAdd(lv_group, gv_labArtifact1);
        }

        if ((ConversationDataStateGetValue("SceneExtraObjects|Terran13Artifact2") > 0)) {
            UnitGroupAdd(lv_group, gv_labArtifact2);
        }

        if ((ConversationDataStateGetValue("SceneExtraObjects|Terran13Artifact3") > 0)) {
            UnitGroupAdd(lv_group, gv_labArtifact3);
        }

        if ((ConversationDataStateGetValue("SceneExtraObjects|Terran13Artifact4") > 0)) {
            UnitGroupAdd(lv_group, gv_labArtifact4);
        }

    }
    else {
        if ((gf_LabCrystalEnabled() == true)) {
            UnitGroupAdd(lv_group, gv_labCrystal);
        }

        if ((libWoLC_gf_StoryStateInteger("LabArtifactCount") >= 1)) {
            UnitGroupAdd(lv_group, gv_labArtifactField);
            UnitGroupAdd(lv_group, gv_labArtifact1);
        }

        if ((libWoLC_gf_StoryStateInteger("LabArtifactCount") >= 2)) {
            UnitGroupAdd(lv_group, gv_labArtifact2);
        }

        if ((libWoLC_gf_StoryStateInteger("LabArtifactCount") >= 3)) {
            UnitGroupAdd(lv_group, gv_labArtifact3);
        }

        if ((libWoLC_gf_StoryStateInteger("LabArtifactCount") >= 4)) {
            UnitGroupAdd(lv_group, gv_labArtifact4);
        }

    }
    return lv_group;
}

void gf_Scene (string lp_scene, int lp_subIndex, bool lp_clickableOff, bool lp_fadeIn) {
    // Automatic Variable Declarations
    // Implementation
    gf_ScenePreload(lp_scene);
    gf_ScenePrepare(lp_clickableOff);
    gf_ScenePlayAsync(lp_scene, lp_subIndex);
    if ((lp_fadeIn == true)) {
        gf_SceneCleanupWithFadeandEnterRoom();
    }
    else {
        gf_SceneCleanup();
    }
}

void gf_AnimaticPrepare () {
    // Automatic Variable Declarations
    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceScene);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_GoToRoom(ge_RoomID_RoomVoid, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libCamp_gf_ChangeAmbience(null);
    gf_FadeOutSoundChannelVolumeForMovie(0.5);
}

void gf_AnimaticCleanup (int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_room != ge_RoomID_RoomNone)) {
        gf_GoToRoom(lp_room, false);
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    gf_StopAllTransmissionConversation();
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_TurnClickablesOnOff(gv_clickables, true);
}

void gf_MissionLaunchWithBriefing (string lp_mission, int lp_difficulty) {
    // Variable Declarations
    string lv_pickedMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pickedMission = gf_MissionPlayBriefing(lp_mission, true);
    if ((lv_pickedMission != null)) {
        libWoLC_gf_LaunchMission(lv_pickedMission, false, lp_difficulty);
    }

}

string gf_MissionPlayBriefing (string lp_mission, bool lp_playABChoice) {
    // Variable Declarations
    bool lv_gameDataIsFullyDownloaded;
    string lv_missionPicked;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameDataIsFullyDownloaded = GameDataIsFullyDownloaded(1);
    lv_missionPicked = lp_mission;

    // Implementation
    if ((lp_playABChoice == true) && (gf_MissionABChoiceCallback(lp_mission) != null)) {
        gf_SetMissionABChoiceResult(null);
        TriggerExecute(gf_MissionABChoiceCallback(lp_mission), true, true);
        lv_missionPicked = gf_MissionABChoiceResult();
        if ((gf_MissionABChoiceResult() == null)) {
            return null;
        }

    }

    if ((lv_gameDataIsFullyDownloaded == true) && (gf_MissionBriefingCallback(lv_missionPicked) != null)) {
        TriggerExecute(gf_MissionBriefingCallback(lv_missionPicked), true, true);
    }

    return lv_missionPicked;
}

trigger gf_MissionBriefingCallback (string lp_mapID2) {
    // Variable Declarations
    string lv_instance;
    string lv_trigger;
    string lv_rawTrigger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_instance = CatalogFieldValueGet(c_gameCatalogMap, (lp_mapID2), "UserReference", 1);
    lv_trigger = UserDataGetString("TStory01Briefings", UserDataInstanceFromReference(lv_instance), "Callback", 1);
    lv_rawTrigger = ("gt_" + lv_trigger + "_Func");

    // Implementation
    return TriggerFind(lv_rawTrigger);
}

trigger gf_MissionBriefingPreload (string lp_mapID2) {
    // Variable Declarations
    string lv_instance;
    string lv_trigger;
    string lv_rawTrigger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_instance = CatalogFieldValueGet(c_gameCatalogMap, (lp_mapID2), "UserReference", 1);
    lv_trigger = UserDataGetString("TStory01Briefings", UserDataInstanceFromReference(lv_instance), "Preload", 1);
    lv_rawTrigger = ("gt_" + lv_trigger + "_Func");

    // Implementation
    return TriggerFind(lv_rawTrigger);
}

trigger gf_MissionBriefingPreloadRough (string lp_mapID2) {
    // Variable Declarations
    string lv_instance;
    string lv_trigger;
    string lv_rawTrigger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_instance = CatalogFieldValueGet(c_gameCatalogMap, (lp_mapID2), "UserReference", 1);
    lv_trigger = UserDataGetString("TStory01Briefings", UserDataInstanceFromReference(lv_instance), "PreloadRough", 1);
    lv_rawTrigger = ("gt_" + lv_trigger + "_Func");

    // Implementation
    return TriggerFind(lv_rawTrigger);
}

trigger gf_MissionABChoiceCallback (string lp_mapID2) {
    // Variable Declarations
    string lv_instance;
    string lv_trigger;
    string lv_rawTrigger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_instance = CatalogFieldValueGet(c_gameCatalogMap, (lp_mapID2), "UserReference", 1);
    lv_trigger = UserDataGetString("TStory01ABChoice", UserDataInstanceFromReference(lv_instance), "Callback", 1);
    lv_rawTrigger = ("gt_" + lv_trigger + "_Func");

    // Implementation
    return TriggerFind(lv_rawTrigger);
}

void gf_SetMissionABChoiceResult (string lp_mapID) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(true, "TStory01_ABChoice_Result", (lp_mapID));
}

string gf_MissionABChoiceResult () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(true, "TStory01_ABChoice_Result"));
}

void gf_Briefing (string lp_mission, int lp_room, trigger lp_skippable, trigger lp_preload) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, true);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceScriptedScene);
    gf_SetIdleState(ge_IdleState_Busy);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_LockActorReloading(true);
    gf_GoToRoom(lp_room, false);
    if ((lp_preload != null)) {
        TriggerExecute(lp_preload, true, false);
    }

    SoundLengthQueryWait();
    gf_RoomScenePrepare(lp_room, ge_SceneType_Scene);
    gf_HideAllActors(false);
    gv_briefingCompleted = false;
    TriggerExecute(lp_skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    if ((gv_briefingMovieSound != null)) {
        SoundStop(gv_briefingMovieSound, true);
        gv_briefingMovieSound = null;
    }

    if ((gv_briefingSoundPlayed != null)) {
        SoundStop(gv_briefingSoundPlayed, true);
        gv_briefingSoundPlayed = null;
    }

    if ((gv_briefingCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    if (((lp_mission == "TTosh03A") || (libWoLC_gf_WC_CampaignMapIsZeratul(lp_mission) == true))) {
        gf_FadeOutAllSoundChannelVolume(lv_fadeDuration);
        gf_CustomFadeInOut(false, lv_fadeDuration, true);
        CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        gf_CustomFadeInOut(true, 0.0, false);
        UISetWorldVisible(PlayerGroupAll(), true);
    }
    else if (true) {
        gf_FadeOutAllSoundChannelVolume(lv_fadeDuration);
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }
    gf_StopAllTransmissionConversation();
    if ((gv_briefingMovieTransmission != c_invalidTransmissionId)) {
        TransmissionClear(gv_briefingMovieTransmission);
        gv_briefingMovieTransmission = c_invalidTransmissionId;
        UISetWorldVisible(PlayerGroupAll(), true);
    }

    gf_RoomSceneClearAll();
    if ((gv_briefingVideoPlaying != null)) {
        ActorSend(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Center)), MakeMsgTextureVideoStop(TextureGetSlotName(gv_briefingVideoPlaying), TextureGetSlotComponent(gv_briefingVideoPlaying)));
    }

    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lp_room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lp_room, ge_BriefingScreen_Center));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lp_room, ge_BriefingScreen_Left));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lp_room, ge_BriefingScreen_Right));
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Main));
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Center));
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Left));
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Right));
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(lp_room, ge_BriefingScreen_Main), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(lp_room, ge_BriefingScreen_Center), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(lp_room, ge_BriefingScreen_Left), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(lp_room, ge_BriefingScreen_Right), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFINGSCREENFUZZY, gf_BriefingScreen(lp_room, ge_BriefingScreen_Main), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFINGSCREENFUZZY, gf_BriefingScreen(lp_room, ge_BriefingScreen_Center), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_INCOMINGTRANSMISSION, gf_BriefingScreen(lp_room, ge_BriefingScreen_Main), 0.0);
    gf_ClearAnimationwithblendtime("BriefingVideoSwap", gf_BriefingScreen(lp_room, ge_BriefingScreen_Center), 0.0);
    gf_BriefingDestoryAllPortraits();
    UISetWorldVisible(PlayerGroupAll(), true);
    PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), false, false);
    gf_BriefingRemoveAllActors();
    gf_LockActorReloading(false);
}

void gf_BriefingPreload (bool lp_all) {
    // Variable Declarations
    int lv_room;
    string lv_indexMission;
    int lv_index;

    // Automatic Variable Declarations
    int auto5CF02C08_ae;
    int auto5CF02C08_ai;

    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;

    // Implementation
    if ((lp_all == true)) {
        gf_ReloadActors(true);
    }

    if (((lp_all == true) || (gf_RoomIsEnabled(ge_RoomID_RoomMarSara) == true))) {
        lv_room = ge_RoomID_RoomMarSara;
        gf_BriefingPreloadScreens(lv_room);
    }

    if (((lp_all == true) || (gf_RoomIsEnabled(ge_RoomID_RoomBridge) == true))) {
        lv_room = ge_RoomID_RoomBridge;
        gf_BriefingPreloadScreens(lv_room);
    }

    if (((lp_all == true) || (libWoLC_gf_MissionStatusCheck("TZeratul01", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul02", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul03", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul04", libWoLC_ge_MissionStatus_Available) == true))) {
        lv_room = ge_RoomID_RoomLab;
        gf_BriefingPreloadScreens(lv_room);
    }

    if (((lp_all == true) || (gf_RoomIsEnabled(ge_RoomID_RoomChar) == true))) {
        lv_room = ge_RoomID_RoomChar;
        gf_BriefingPreloadScreens(lv_room);
    }

    auto5CF02C08_ae = CatalogEntryCount(c_gameCatalogMap);
    auto5CF02C08_ai = 1;
    while (auto5CF02C08_ai <= auto5CF02C08_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto5CF02C08_ai);
        auto5CF02C08_ai = auto5CF02C08_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission") {
            if ((libWoLC_gf_MissionStatusCheck(lv_indexMission, libWoLC_ge_MissionStatus_Available) == true)) {
                TriggerExecute(gf_MissionBriefingPreloadRough(lv_indexMission), true, false);
            }

        }    
    }
}

void gf_BriefingPreloadScreens (int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    gf_PreloadUnitStoryMap(gf_BriefingScreen(lp_room, ge_BriefingScreen_Main));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(lp_room, ge_BriefingScreen_Center));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(lp_room, ge_BriefingScreen_Left));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(lp_room, ge_BriefingScreen_Right));
}

void gf_BriefingPrepare (int lp_room, int lp_initCamera, int lp_actor1, int lp_actor2, int lp_actor3, bool lp_mainAnim, bool lp_center, bool lp_left, bool lp_right) {
    // Automatic Variable Declarations
    // Implementation
    gf_BriefingPlayVideo("video_static", lp_room, ge_BriefingScreen_Center, false);
    gf_BriefingAddActor(lp_room, lp_actor1);
    gf_BriefingAddActor(lp_room, lp_actor2);
    gf_BriefingAddActor(lp_room, lp_actor3);
    if ((lp_mainAnim == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Main)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Main)), c_animNameDefault, 100.0);
        gf_RemoveVisibleUnit(true, gf_BriefingScreen(lp_room, ge_BriefingScreen_Main));
    }

    if ((lp_center == true)) {
        gf_RemoveVisibleUnit(true, gf_BriefingScreen(lp_room, ge_BriefingScreen_Center));
    }

    if ((lp_left == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Left)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Left)), c_animNameDefault, 100.0);
        gf_RemoveVisibleUnit(true, gf_BriefingScreen(lp_room, ge_BriefingScreen_Left));
    }

    if ((lp_right == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Right)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Right)), c_animNameDefault, 100.0);
        gf_RemoveVisibleUnit(true, gf_BriefingScreen(lp_room, ge_BriefingScreen_Right));
    }

    gf_BriefingApplyCamera(lp_room, lp_initCamera, 0.0);
}

string gf_BriefingCamera (int lp_camera) {
    // Automatic Variable Declarations
    int auto139618EC_val;

    // Implementation
    auto139618EC_val = lp_camera;
    if (auto139618EC_val == ge_BriefingCamera_BriefingScreen01) {
        return "CAM_BriefingScreen01";
    }
    else if (auto139618EC_val == ge_BriefingCamera_ScreenClose) {
        return "CAM_BriefingScreen02";
    }
    else if (auto139618EC_val == ge_BriefingCamera_ScreenMedium) {
        return "CAM_BriefingScreen03";
    }
    else if (auto139618EC_val == ge_BriefingCamera_BriefingScreen04) {
        return "CAM_BriefingScreen04";
    }
    else if (auto139618EC_val == ge_BriefingCamera_ScreenFar) {
        return "CAM_Intro";
    }
    else if (auto139618EC_val == ge_BriefingCamera_Intro2) {
        return "CAM_Intro2";
    }
    else if (auto139618EC_val == ge_BriefingCamera_Intro3) {
        return "CAM_Intro3";
    }
    else if (auto139618EC_val == ge_BriefingCamera_twoshots01) {
        return "CAM_twoshots01";
    }
    else if (auto139618EC_val == ge_BriefingCamera_twoshots02) {
        return "CAM_twoshots02";
    }
    else if (auto139618EC_val == ge_BriefingCamera_twoshots03) {
        return "CAM_twoshots03";
    }
    else if (auto139618EC_val == ge_BriefingCamera_twoshots04) {
        return "CAM_twoshots04";
    }
    else if (auto139618EC_val == ge_BriefingCamera_raynor01) {
        return "CAM_raynor01";
    }
    else if (auto139618EC_val == ge_BriefingCamera_tychus01) {
        return "CAM_tychus01";
    }
    else if (auto139618EC_val == ge_BriefingCamera_Hanson01) {
        return "CAM_Hanson01";
    }
    else if (auto139618EC_val == ge_BriefingCamera_Horner01) {
        return "CAM_Horner01";
    }
    else {
    }
    return "";
}

unit gf_BriefingScreen (int lp_room, int lp_briefingScreen) {
    // Automatic Variable Declarations
    int autoF8FAAF55_val;
    int auto9B6CC97E_val;
    int auto80F234F9_val;
    int auto60F94461_val;

    // Implementation
    autoF8FAAF55_val = lp_room;
    if (autoF8FAAF55_val == ge_RoomID_RoomMarSara) {
        auto9B6CC97E_val = lp_briefingScreen;
        if (auto9B6CC97E_val == ge_BriefingScreen_Main) {
            return gv_briefing_MarSaraMain;
        }
        else if (auto9B6CC97E_val == ge_BriefingScreen_Center) {
            return gv_briefing_MarSaraCenter;
        }
        else if (auto9B6CC97E_val == ge_BriefingScreen_Left) {
            return gv_briefing_MarSaraLeft;
        }
        else if (auto9B6CC97E_val == ge_BriefingScreen_Right) {
            return gv_briefing_MarSaraRight;
        }
        else {
        }
    }
    else if (autoF8FAAF55_val == ge_RoomID_RoomBridge) {
        auto80F234F9_val = lp_briefingScreen;
        if (auto80F234F9_val == ge_BriefingScreen_Main) {
            return gv_briefing_BridgeMain;
        }
        else if (auto80F234F9_val == ge_BriefingScreen_Center) {
            return gv_briefing_BridgeCenter;
        }
        else if (auto80F234F9_val == ge_BriefingScreen_Left) {
            return gv_briefing_BridgeLeft;
        }
        else if (auto80F234F9_val == ge_BriefingScreen_Right) {
            return gv_briefing_BridgeRight;
        }
        else {
        }
    }
    else if (autoF8FAAF55_val == ge_RoomID_RoomChar) {
        auto60F94461_val = lp_briefingScreen;
        if (auto60F94461_val == ge_BriefingScreen_Main) {
            return gv_briefing_CharMain;
        }
        else if (auto60F94461_val == ge_BriefingScreen_Center) {
            return gv_briefing_CharCenter;
        }
        else if (auto60F94461_val == ge_BriefingScreen_Left) {
            return gv_briefing_CharLeft;
        }
        else if (auto60F94461_val == ge_BriefingScreen_Right) {
            return gv_briefing_CharRight;
        }
        else {
        }
    }
    else {
    }
    return null;
}

void gf_BriefingApplyCamera (int lp_room, int lp_camera, fixed lp_duration) {
    // Variable Declarations
    string lv_cameraName;
    camerainfo lv_cameraObject;

    // Automatic Variable Declarations
    int auto5CE83116_val;
    int auto84E074C0_val;
    int auto9705B3A7_val;
    int autoEE7794B3_val;

    // Variable Initialization
    lv_cameraName = "";

    // Implementation
    if ((lp_camera == ge_BriefingCamera_None)) {
        return ;
    }

    lv_cameraObject = null;
    auto5CE83116_val = lp_room;
    if (auto5CE83116_val == ge_RoomID_RoomMarSara) {
        auto84E074C0_val = lp_camera;
        if (auto84E074C0_val == ge_BriefingCamera_ScreenClose) {
            lv_cameraObject = CameraInfoFromId(78);
        }
        else if (auto84E074C0_val == ge_BriefingCamera_ScreenMedium) {
            lv_cameraObject = CameraInfoFromId(78);
        }
        else if (auto84E074C0_val == ge_BriefingCamera_ScreenFar) {
            lv_cameraObject = CameraInfoFromId(109);
        }
        else {
        }
    }
    else if (auto5CE83116_val == ge_RoomID_RoomBridge) {
        auto9705B3A7_val = lp_camera;
        if (auto9705B3A7_val == ge_BriefingCamera_ScreenClose) {
            lv_cameraObject = CameraInfoFromId(93);
        }
        else if (auto9705B3A7_val == ge_BriefingCamera_ScreenMedium) {
            lv_cameraObject = CameraInfoFromId(93);
        }
        else if (auto9705B3A7_val == ge_BriefingCamera_ScreenFar) {
            lv_cameraObject = CameraInfoFromId(87);
        }
        else {
        }
    }
    else if (auto5CE83116_val == ge_RoomID_RoomLab) {
        autoEE7794B3_val = lp_camera;
        if (autoEE7794B3_val == ge_BriefingCamera_ScreenClose) {
            lv_cameraObject = CameraInfoFromId(66);
        }
        else if (autoEE7794B3_val == ge_BriefingCamera_ScreenMedium) {
            lv_cameraObject = CameraInfoFromId(73);
        }
        else if (autoEE7794B3_val == ge_BriefingCamera_ScreenFar) {
            lv_cameraObject = CameraInfoFromId(73);
        }
        else {
        }
    }
    else {
    }
    if ((lv_cameraObject != null)) {
        CameraApplyInfo(1, lv_cameraObject, lp_duration, -1, 10, true);
        return ;
    }

    lv_cameraName = gf_BriefingCamera(lp_camera);
    CameraUseModel(1, gf_BriefingScreen(lp_room, ge_BriefingScreen_Main), lv_cameraName, (lp_duration * 1.0));
    if ((lp_camera == ge_BriefingCamera_Intro2)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, ge_BriefingScreen_Main)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

}

int gf_BriefingCreatePortrait (string lp_model, string lp_camera, int lp_screen, bool lp_attachToScreenNow) {
    // Variable Declarations
    int lv_width;
    int lv_height;
    int lv_channel;
    string lv_cameraString;

    // Automatic Variable Declarations
    int autoA2D26592_val;

    // Variable Initialization
    lv_cameraString = "";

    // Implementation
    autoA2D26592_val = lp_screen;
    if (autoA2D26592_val == ge_BriefingScreen_Center) {
        lv_width = 720;
        lv_height = 406;
        lv_channel = 1;
    }
    else if (autoA2D26592_val == ge_BriefingScreen_Left) {
        lv_width = 400;
        lv_height = 400;
        lv_channel = 2;
    }
    else if (autoA2D26592_val == ge_BriefingScreen_Right) {
        lv_width = 400;
        lv_height = 400;
        lv_channel = 3;
    }
    else {
        return 0;
    }
    lv_cameraString = lp_camera;
    PortraitCreate(0, 0, c_anchorCenter, lv_width, lv_height, lp_model, lv_cameraString, "Default", true, false);
    PortraitSetOffscreen(PortraitLastCreated(), true);
    if ((lp_attachToScreenNow == true)) {
        PortraitSetChannel(PortraitLastCreated(), lv_channel);
    }

    gv_briefingPortraitCount += 1;
    gv_briefingPortraits[gv_briefingPortraitCount] = PortraitLastCreated();
    return PortraitLastCreated();
}

point gf_BriefingActorAttachPoint (int lp_room, int lp_actor) {
    // Variable Declarations
    string lv_attachName;
    int lv_actualActorUsed;

    // Automatic Variable Declarations
    int auto37EE8C4A_val;
    int auto49F1FEFF_val;
    int auto5A6A9993_val;
    int auto7F30152E_val;

    // Variable Initialization
    lv_attachName = "";
    lv_actualActorUsed = ge_ActorID_ActorNone;

    // Implementation
    auto37EE8C4A_val = lp_room;
    if (auto37EE8C4A_val == ge_RoomID_RoomBridge) {
        auto49F1FEFF_val = lp_actor;
        if (auto49F1FEFF_val == ge_ActorID_ActorRaynor) {
            return PointFromId(96);
        }
        else if (auto49F1FEFF_val == ge_ActorID_ActorTychus) {
            return PointFromId(99);
        }
        else if (auto49F1FEFF_val == ge_ActorID_ActorTosh) {
            return PointFromId(100);
        }
        else if (auto49F1FEFF_val == ge_ActorID_ActorHorner) {
            return PointFromId(100);
        }
        else if (auto49F1FEFF_val == ge_ActorID_ActorHanson) {
            return PointFromId(100);
        }
        else {
        }
    }
    else if (auto37EE8C4A_val == ge_RoomID_RoomMarSara) {
        auto5A6A9993_val = lp_actor;
        if (auto5A6A9993_val == ge_ActorID_ActorRaynor) {
            return PointFromId(107);
        }
        else if (auto5A6A9993_val == ge_ActorID_ActorTychus) {
            return PointFromId(108);
        }
        else {
        }
    }
    else if (auto37EE8C4A_val == ge_RoomID_RoomLab) {
        auto7F30152E_val = lp_actor;
        if (auto7F30152E_val == ge_ActorID_ActorRaynor) {
            return PointFromId(95);
        }
        else {
        }
    }
    else if (auto37EE8C4A_val == ge_RoomID_RoomChar) {
        return PointFromId(790);
    }
    else {
    }
    lv_actualActorUsed = lp_actor;
    if ((lv_actualActorUsed == ge_ActorID_ActorTosh)) {
        lv_actualActorUsed = ge_ActorID_ActorHanson;
    }

    lv_attachName = ("Pos_" + gf_ActorStringID(lv_actualActorUsed));
    return UnitGetAttachmentPoint(gf_BriefingScreen(lp_room, ge_BriefingScreen_Main), lv_attachName);
}

void gf_BriefingAddActor (int lp_roomID, int lp_actorID) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_actorID == ge_ActorID_ActorNone)) {
        return ;
    }

    gf_ResetActorToLocation(lp_actorID, gf_BriefingActorAttachPoint(lp_roomID, lp_actorID));
    gf_ActorScenePrepare(lp_actorID, ge_ActorID_ActorNone, lp_roomID, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(lp_actorID));
}

void gf_BriefingRemoveAllActors () {
    // Automatic Variable Declarations
    // Implementation
    gf_ActorSceneClearAll();
}

void gf_BriefingDestoryAllPortraits () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoBAF5ECB9_ae;
    const int autoBAF5ECB9_ai = 1;

    // Variable Initialization

    // Implementation
    autoBAF5ECB9_ae = gv_briefingPortraitCount;
    lv_index = 1;
    for ( ; ( (autoBAF5ECB9_ai >= 0 && lv_index <= autoBAF5ECB9_ae) || (autoBAF5ECB9_ai < 0 && lv_index >= autoBAF5ECB9_ae) ) ; lv_index += autoBAF5ECB9_ai ) {
        PortraitDestroy(gv_briefingPortraits[lv_index]);
    }
    gv_briefingPortraitCount = 0;
}

void gf_BriefingPlayVideo (string lp_movie, int lp_roomID, int lp_screen, bool lp_transientAnim) {
    // Variable Declarations
    int lv_wipeSoundIndex;

    // Automatic Variable Declarations
    int autoF8AD0AE9_val;

    // Variable Initialization

    // Implementation
    TriggerStop(gt_BriefingPlayVideoTargetingCursorSound);
    gv_briefingMovieTexturePlaying = lp_movie;
    if ((lp_transientAnim == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_roomID, lp_screen)), gv_aNIMID_BRIEFINGVIDEOSWAP, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        lv_wipeSoundIndex = RandomInt(1, 3);
        autoF8AD0AE9_val = lv_wipeSoundIndex;
        if (autoF8AD0AE9_val == 1) {
            SoundPlay(SoundLink("UI_ScreenWipe", 0), PlayerGroupAll(), 100.0, 0.0);
        }
        else if (autoF8AD0AE9_val == 2) {
            SoundPlay(SoundLink("UI_ScreenWipe", 1), PlayerGroupAll(), 100.0, 0.0);
        }
        else if (autoF8AD0AE9_val == 3) {
            SoundPlay(SoundLink("UI_ScreenWipe", 2), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
        }
    }

    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_roomID, lp_screen));
    libNtve_gf_PlayMovieTextureOnUnitActor(gf_BriefingScreen(lp_roomID, lp_screen), lp_movie);
    libNtve_gf_SendActorMessageToUnit(gf_BriefingScreen(lp_roomID, lp_screen), "TextureVideoPlay video 30 Synced");
    gv_briefingVideoPlaying = lp_movie;
    TriggerExecute(gt_BriefingPlayVideoTargetingCursorSound, true, false);
}

void gf_BriefingStopVideo (int lp_roomID, int lp_screen) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_roomID, lp_screen));
}

void gf_BriefingTZeratulCreateScreen (string lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mission == "TZeratul04")) {
        PortraitCreate(0, 0, c_anchorCenter, 237, 360, "SMOvermindBriefingMenu", "", "Stand", false, false);
        GameSetLighting("ZeratulMissionSelectBorder", 0.0);
    }
    else {
        PortraitCreate(0, 0, c_anchorCenter, 237, 360, "SMZeratulBriefingBorder", "", "Stand", false, false);
    }
    gv_briefing_TZeratulPortraitZeratul = PortraitLastCreated();
    PortraitSetFullscreen(PortraitLastCreated(), true);
    PortraitSetBackgroundVisible(PortraitLastCreated(), false);
    PortraitSetBorderVisible(PortraitLastCreated(), false);
    PortraitWaitForLoad(PortraitLastCreated());
    PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), true, true);
    gf_GoToRoom(ge_RoomID_RoomVoid, false);
}

void gf_BriefingTZeratulClear () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_briefingTZeratulCrystalEffect != null)) {
        libNtve_gf_KillModel(gv_briefingTZeratulCrystalEffect);
        gv_briefingTZeratulCrystalEffect = null;
    }

    gf_ClearAnimationwithblendtime(gv_aNIMID_HIGHLIGHT, gv_labCrystal, 0.0);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    if ((gv_briefing_TZeratulPortraitZeratul != c_invalidPortraitId)) {
        PortraitDestroy(gv_briefing_TZeratulPortraitZeratul);
        gv_briefing_TZeratulPortraitZeratul = c_invalidPortraitId;
    }

}

trigger auto_gf_BriefingTZeratulVideoFadeIn_Trigger = null;

void gf_BriefingTZeratulVideoFadeIn () {
    if (auto_gf_BriefingTZeratulVideoFadeIn_Trigger == null) {
        auto_gf_BriefingTZeratulVideoFadeIn_Trigger = TriggerCreate("auto_gf_BriefingTZeratulVideoFadeIn_TriggerFunc");
    }

    TriggerExecute(auto_gf_BriefingTZeratulVideoFadeIn_Trigger, false, false);
}

bool auto_gf_BriefingTZeratulVideoFadeIn_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    ActorSend(ActorFromPortrait(gv_briefing_TZeratulPortraitZeratul), "AnimBracketStart Default Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

trigger auto_gf_BriefingTZeratulVideoFadeOut_Trigger = null;

void gf_BriefingTZeratulVideoFadeOut () {
    if (auto_gf_BriefingTZeratulVideoFadeOut_Trigger == null) {
        auto_gf_BriefingTZeratulVideoFadeOut_Trigger = TriggerCreate("auto_gf_BriefingTZeratulVideoFadeOut_TriggerFunc");
    }

    TriggerExecute(auto_gf_BriefingTZeratulVideoFadeOut_Trigger, false, false);
}

bool auto_gf_BriefingTZeratulVideoFadeOut_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    ActorSend(ActorFromPortrait(gv_briefing_TZeratulPortraitZeratul), "AnimBracketStop Default");
    return true;
}

void gf_BriefingTZeratulPlayVideo (string lp_movie, bool lp_transientAnim) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_transientAnim == true)) {
        ActorSend(ActorFromPortrait(gv_briefing_TZeratulPortraitZeratul), "AnimPlay BriefingVideoSwap Stand,Morph");
        Wait(0.125, c_timeReal);
    }

    ActorSend(ActorFromPortrait(gv_briefing_TZeratulPortraitZeratul), "TextureVideoStopAll");
    ActorSend(ActorFromPortrait(gv_briefing_TZeratulPortraitZeratul), libNtve_gf_ActorMsg1("TextureSelectById", (lp_movie)));
    gv_briefingVideoPlaying = lp_movie;
}

void gf_ABChoiceCreatePanel (string lp_userInstance_A, trigger lp_callback_A, string lp_userInstance_B, trigger lp_callback_B, trigger lp_callback_Replay, trigger lp_callback_Back) {
    // Variable Declarations
    int lv_panelA;
    int lv_panelB;
    const int lv_panelWidth = 650;
    const int lv_panelOffset = 50;
    int lv_replayFrame;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panelA = c_invalidDialogControlId;
    lv_panelB = c_invalidDialogControlId;
    lv_replayFrame = c_invalidDialogControlId;

    // Implementation
    if ((gv_aBChoicePanel != c_invalidDialogId)) {
        return ;
    }

    gv_aBChoiceButtonACallback = lp_callback_A;
    gv_aBChoiceButtonBCallback = lp_callback_B;
    gv_aBChoiceButtonBackCallback = lp_callback_Back;
    gv_aBChoiceButtonReplayCallback = lp_callback_Replay;
    DialogCreate(1, 1, c_anchorCenter, 0, 0, false);
    gv_aBChoicePanel = DialogLastCreated();
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeImage);
    gv_aBChoiceFrame = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1552, 392);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ab_frame_big.dds", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 0);
    gf_ABChoiceCreateSubPanel(ge_ABChoiceAB_A, lp_userInstance_A);
    gf_ABChoiceCreateSubPanel(ge_ABChoiceAB_B, lp_userInstance_B);
    DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeImage);
    lv_replayFrame = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 296, 92);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeHorizontalBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_a&b_frame_replaybutton.dds", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 16);
    DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeButton);
    gv_aBChoiceButtonReplay = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/7F550214"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 316, 80);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_generic_greenglow_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_button_generic_greenglow_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceReplayButtonText", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_replayFrame, c_anchorCenter, 0, 0);
}

void gf_ABChoiceCreateSubPanel (int lp_side, string lp_userInstance) {
    // Variable Declarations
    const int lv_panelWidth = 720;
    const int lv_panelHeight = 240;
    const int lv_panelOffsetX = 20;
    const int lv_panelOffsetY = 125;
    const int lv_buttonHeight = 100;
    int lv_text;
    int lv_textWidth;
    int lv_rewardsTitle;
    int lv_rewardsPanel;
    const int lv_labelYOffset = 0;
    int lv_label;
    int lv_icon;
    int lv_cOE;

    // Automatic Variable Declarations
    const int auto974CA661_ae = 5;
    int auto974CA661_var;
    const int auto50754062_ae = 5;
    int auto50754062_var;

    // Variable Initialization
    lv_text = c_invalidDialogControlId;
    lv_rewardsTitle = c_invalidDialogControlId;
    lv_rewardsPanel = c_invalidDialogControlId;
    lv_label = c_invalidDialogControlId;
    lv_icon = c_invalidDialogControlId;
    lv_cOE = 1;

    // Implementation
    if ((lp_side == ge_ABChoiceAB_A)) {
        lv_cOE = -1;
    }
    else {
        lv_cOE = 1;
    }
    lv_textWidth = (lv_panelWidth - 65);
    DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeLabel);
    lv_text = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, (lv_panelHeight - 30));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("TStory01ABChoice", lp_userInstance, "Description", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceDescription", PlayerGroupAll());
    if ((lp_side == ge_ABChoiceAB_A)) {
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_aBChoiceFrame, c_anchorTopLeft, 70, 70);
    }
    else {
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, gv_aBChoiceFrame, c_anchorTopRight, -70, 70);
    }
    DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeImage);
    lv_rewardsPanel = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, 130);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    if ((lp_side == ge_ABChoiceAB_A)) {
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, gv_aBChoiceFrame, c_anchorBottomLeft, 65, -50);
    }
    else {
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, gv_aBChoiceFrame, c_anchorBottomRight, -65, -50);
    }
    DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeImage);
    lv_rewardsTitle = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, 24);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, lv_rewardsPanel, c_anchorTop, 0, 0);
    DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeLabel);
    lv_label = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/ABD6DFC5"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceRewardsTitle", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, 24);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_rewardsTitle, c_anchorLeft, 0, 0);
    if (((lp_userInstance == "TTosh03A") || (lp_userInstance == "TTosh03B"))) {
        DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeLabel);
        lv_label = DialogControlLastCreated();
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 10, 60);
        if ((lp_side == ge_ABChoiceAB_A)) {
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_rewardsPanel, c_anchorLeft, 10, lv_labelYOffset);
        }
        else {
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_rewardsPanel, c_anchorLeft, 108, lv_labelYOffset);
        }
        gf_ABChoiceCreateIcon(UserDataGetGameLink("TStory01ABChoice", lp_userInstance, "Icon", 1), "Terr", lv_label, 10, (-1 * lv_labelYOffset), c_anchorLeft, c_anchorLeft);
        lv_icon = DialogControlLastCreated();
        DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeLabel);
        lv_label = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("TStory01ABChoice", lp_userInstance, "Reward", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceRewards", PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 90, 60);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_icon, c_anchorRight, 15, lv_labelYOffset);
        gf_ABChoiceCreateIcon(UserDataGetGameLink("TStory01ABChoice", lp_userInstance, "Abilities", 1), "Terr", lv_label, 0, (-1 * lv_labelYOffset), c_anchorLeft, c_anchorRight);
        lv_icon = DialogControlLastCreated();
        auto974CA661_var = 2;
        for ( ; auto974CA661_var <= auto974CA661_ae; auto974CA661_var += 1 ) {
            gf_ABChoiceCreateIcon(UserDataGetGameLink("TStory01ABChoice", lp_userInstance, "Abilities", auto974CA661_var), "Terr", lv_icon, 10, 0, c_anchorLeft, c_anchorRight);
            lv_icon = DialogControlLastCreated();
        }
    }
    else if (((lp_userInstance == "THanson03A") || (lp_userInstance == "THanson03B"))) {
        DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeLabel);
        lv_label = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("TStory01ABChoice", lp_userInstance, "Reward", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceResearchPoints", PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, 90);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_rewardsPanel, c_anchorTop, 0, 0);
    }
    else if (((lp_userInstance == "TValerian02A") || (lp_userInstance == "TValerian02B"))) {
        DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeLabel);
        lv_label = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("TStory01ABChoice", lp_userInstance, "Reward", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceRewards", PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 60);
        if ((lp_side == ge_ABChoiceAB_A)) {
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_rewardsPanel, c_anchorLeft, 10, lv_labelYOffset);
        }
        else {
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_rewardsPanel, c_anchorLeft, 168, lv_labelYOffset);
        }
        gf_ABChoiceCreateIcon(UserDataGetGameLink("TStory01ABChoice", lp_userInstance, "Abilities", 1), "Terr", lv_label, 10, (-1 * lv_labelYOffset), c_anchorLeft, c_anchorRight);
        lv_icon = DialogControlLastCreated();
        auto50754062_var = 2;
        for ( ; auto50754062_var <= auto50754062_ae; auto50754062_var += 1 ) {
            gf_ABChoiceCreateIcon(UserDataGetGameLink("TStory01ABChoice", lp_userInstance, "Abilities", auto50754062_var), "Terr", lv_icon, 10, 0, c_anchorLeft, c_anchorRight);
            lv_icon = DialogControlLastCreated();
        }
    }
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "TriggerDialogFrame/CampaignButton");
    if ((lp_side == ge_ABChoiceAB_A)) {
        gv_aBChoiceButtonA = DialogControlLastCreated();
        libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_ABChoice_AButton", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, gv_aBChoiceFrame, c_anchorTopLeft, 140, 56);
    }
    else {
        gv_aBChoiceButtonB = DialogControlLastCreated();
        libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_ABChoice_BButton", PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, gv_aBChoiceFrame, c_anchorTopRight, -140, 56);
    }
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextCase(UserDataGetText("TStory01ABChoice", lp_userInstance, "Action", 1), true), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 120);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceButtonText", PlayerGroupAll());
}

void gf_ABChoiceCreateIcon (string lp_button, string lp_race, int lp_relativeControl, int lp_offsetX, int lp_offsetY, int lp_anchor, int lp_relativeAnchor) {
    // Variable Declarations
    string lv_iconImage;
    text lv_tooltipText;
    int lv_border;
    int lv_icon;

    // Automatic Variable Declarations
    string autoD6729679_val;

    // Variable Initialization
    lv_iconImage = (CatalogFieldValueGet(c_gameCatalogButton, lp_button, "Icon", 1));
    TextExpressionSetToken("Param/Expression/47CC517A", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lp_button, "Name", 1)));
    TextExpressionSetToken("Param/Expression/47CC517A", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lp_button, "Tooltip", 1)));
    lv_tooltipText = TextExpressionAssemble("Param/Expression/47CC517A");
    lv_border = c_invalidDialogControlId;
    lv_icon = c_invalidDialogControlId;

    // Implementation
    if ((lp_button == null)) {
        return ;
    }

    DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeImage);
    lv_border = DialogControlLastCreated();
    autoD6729679_val = lp_race;
    if (autoD6729679_val == "Terr") {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_commandcard_terranframe_normal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    }
    else if (autoD6729679_val == "Zerg") {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_commandcard_zergframe_normal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    }
    else {
    }
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 76, 76);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), lp_anchor, lp_relativeControl, lp_relativeAnchor, lp_offsetX, lp_offsetY);
    DialogControlCreate(gv_aBChoicePanel, c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_iconImage, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 74, 74);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltipText, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_border, c_anchorCenter, 0, 0);
}

void gf_ABChoiceDestoryPanel () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_aBChoicePanel == c_invalidDialogId)) {
        return ;
    }

    DialogDestroy(gv_aBChoicePanel);
    gv_aBChoicePanel = c_invalidDialogId;
}

void gf_ABChoiceCreateAutoSave () {
    // Variable Declarations
    text lv_name;
    text lv_description;

    // Automatic Variable Declarations
    string auto1C15F23E_val;

    // Variable Initialization
    lv_description = StringToText("");

    // Implementation
    auto1C15F23E_val = gv_abChoiceCurrent;
    if (auto1C15F23E_val == "THanson03A") {
        lv_name = StringExternal("Param/Value/AB683C7D");
    }
    else if (auto1C15F23E_val == "TTosh03A") {
        lv_name = StringExternal("Param/Value/A32AB3EB");
    }
    else if (auto1C15F23E_val == "TValerian02A") {
        lv_name = StringExternal("Param/Value/861C0605");
    }
    else {
        return ;
    }
    libWoLC_gf_PrepareForStoryModeTransitionalSave();
    gf_TransitionalSave();
    GameSaveCreate(lv_name, StringToText(""), "", true);
}

void gf_DebriefingTValerian01Play2 () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gf_StoryState("Hanson02DebriefingDone") == false) && (libWoLC_gf_LastSuccessfulMission() == "THanson02")) {
        libWoLC_gf_SetStoryStateBoolean("Hanson02DebriefingDone", true);
        TriggerExecute(gt_DebriefingTHanson02_2, true, true);
        gf_ChangeRoom(ge_RoomID_RoomBridge, false);
        gf_TurnClickablesOnOff(gv_clickables, true);
    }

}

void gf_DebriefingPrepare (int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    libCamp_gf_HideStoryUI(false, true);
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceScriptedScene);
    gf_SetIdleState(ge_IdleState_Busy);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_DebriefingPreload();
    gf_GoToRoom(lp_room, false);
    gf_RoomScenePrepare(lp_room, ge_SceneType_Scene);
    if ((lp_room == ge_RoomID_RoomBridge)) {
        gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorBridgeBG1));
        gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorBridgeBG2));
    }

    SoundLengthQueryWait();
}

void gf_DebriefingCleanup (int lp_room) {
    // Automatic Variable Declarations
    // Implementation
    gf_StopAllTransmissionConversation();
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    libCamp_gf_HideStoryUI(true, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_RoomSceneClearAll();
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    if ((gv_returned == true)) {
        gf_ChangeRoom(lp_room, false);
        Wait(0.5, c_timeReal);
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        gf_TurnClickablesOnOff(gv_clickables, true);
    }

}

void gf_DebriefingPreload () {
    // Automatic Variable Declarations
    string auto6FDC4961_val;

    // Implementation
    auto6FDC4961_val = libWoLC_gf_LastMission();
    if (auto6FDC4961_val == "TTychus02") {
        ConversationDataPreloadLines("Scriptedsceneslab");
    }
    else {
        ConversationDataPreloadLines("Debriefs");
    }
}

void gf_ScriptSceneMercIntroDisplayUI (bool lp_withCamera) {
    // Automatic Variable Declarations
    // Implementation
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    gf_PauseNewItemInfo(true);
    gf_MercDisplay(gt_CantinaMercLeave);
    TriggerWaitForTrigger(gt_CantinaMercLeave, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
}

trigger gf_CurrentTVNews2 () {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_instance = CatalogFieldValueGet(c_gameCatalogMap, (libWoLC_gf_LastSuccessfulMission()), "UserReference", 1);

    // Implementation
    return gf_TVNewsTriggerCallback(UserDataInstanceFromReference(lv_instance));
}

trigger gf_TVNewsTriggerCallback (string lp_news) {
    // Variable Declarations
    string lv_triggerName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggerName = ("gt_" + UserDataGetString("TStory01TVNews", lp_news, "Callback", 1) + "_Func");

    // Implementation
    return TriggerFind(lv_triggerName);
}

trigger gf_TVNewsTriggerPreload (string lp_news) {
    // Variable Declarations
    string lv_triggerName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggerName = ("gt_" + UserDataGetString("TStory01TVNews", lp_news, "Preload", 1) + "_Func");

    // Implementation
    return TriggerFind(lv_triggerName);
}

void gf_TVNewsPreload (string lp_news) {
    // Variable Declarations
    trigger lv_preloadCallback;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_TVNewsPreloadGeneric(lp_news);
    if ((lp_news == null)) {
        lv_preloadCallback = gf_TVNewsTriggerPreload("TStory01");
    }
    else {
        lv_preloadCallback = gf_TVNewsTriggerPreload(lp_news);
    }
    if ((lv_preloadCallback == null)) {
        return ;
    }

    TriggerExecute(lv_preloadCallback, true, false);
}

void gf_TVNewsPreloadGeneric (string lp_news) {
    // Variable Declarations
    int lv_index;
    int lv_actor;
    int lv_room;

    // Automatic Variable Declarations
    int auto7AA30CD2_val;
    int auto9CBF4ED8_ae;
    const int auto9CBF4ED8_ai = 1;

    // Variable Initialization
    lv_actor = ge_ActorID_ActorNone;
    lv_room = ge_RoomID_RoomNone;

    // Implementation
    if (((lp_news == "TValerian01") || (lp_news == "TValerian02A") || (lp_news == "TValerian02B"))) {
        lv_room = ge_RoomID_RoomChar;
    }
    else if (((lp_news == null) || (lp_news == "TStory01") || (lp_news == "TRaynor01") || (lp_news == "TRaynor02"))) {
        lv_room = ge_RoomID_RoomMarSara;
    }
    else if (true) {
        lv_room = ge_RoomID_RoomCantina;
    }
    auto7AA30CD2_val = lv_room;
    if (auto7AA30CD2_val == ge_RoomID_RoomMarSara) {
        gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
        gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorAdjutant));
        if (((lp_news == "TRaynor01") || (lp_news == "TRaynor02"))) {
            gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
        }

    }
    else if (auto7AA30CD2_val == ge_RoomID_RoomCantina) {
        gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
        gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
        if ((lp_news == "TTosh02")) {
            gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTosh));
        }

    }
    else if (auto7AA30CD2_val == ge_RoomID_RoomChar) {
        gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
        gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    }
    else {
    }
    gf_PreloadRoomIfCondition(lv_room, true);
    auto9CBF4ED8_ae = gv_c_ACTOR_LAST;
    lv_index = gv_c_ACTOR_FIRST;
    for ( ; ( (auto9CBF4ED8_ai >= 0 && lv_index <= auto9CBF4ED8_ae) || (auto9CBF4ED8_ai < 0 && lv_index >= auto9CBF4ED8_ae) ) ; lv_index += auto9CBF4ED8_ai ) {
        lv_actor = gv_actors[lv_index].lv_actorID;
        if ((gf_ActorIsEnabledInRoom(lv_actor, lv_room) == true)) {
            gf_PreloadUnitStoryMap(gf_ActorUnit(lv_actor));
        }

    }
}

void gf_TVNewsMarSara2 (string lp_news, trigger lp_skippable) {
    // Automatic Variable Declarations
    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceTV);
    gf_SetIdleState(ge_IdleState_Busy);
    libCamp_gf_HideStoryUI(false, true);
    if ((gv_currentRoom != ge_RoomID_RoomMarSara)) {
        gf_ChangeRoom(ge_RoomID_RoomMarSara, false);
    }

    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_static");
    gf_RoomScenePrepare(ge_RoomID_RoomMarSara, ge_SceneType_TV);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.3);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_TVNewsPreload(lp_news);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(89));
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomMarSara, ge_SceneType_TV);
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), "Cover");
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    if (((lp_skippable == gt_TVNewsRaynor01Skippable) || (lp_skippable == gt_TVNewsRaynor02Skippable))) {
        gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(91));
        gf_ActorScenePrepare(ge_ActorID_ActorTychus, ge_ActorID_ActorNone, ge_RoomID_RoomMarSara, ge_SceneType_TV);
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), "Cover");
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
    }

    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    gv_tVNewsCurrentThread = lp_skippable;
    TriggerEnable(gt_TVNewsBack2, true);
    TriggerExecute(lp_skippable, true, true);
    TriggerEnable(gt_TVNewsBack2, false);
    gv_tVNewsCurrentThread = null;
    gf_TVNewsMarSaraStopAllThreads();
    gf_HideIntroTextBox(false);
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, "TextureSelectById video_static");
    gf_StopAllTransmissionConversation();
    libNtve_gf_StopAllVideoTexturesOnUnit(gv_marSaraTV);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 0, ""));
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), "AnimCancelActiveBlends ::Conversation");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(ge_ActorID_ActorTychus), "AnimCancelActiveBlends ::Conversation");
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    gf_ViewRoomCamera(ge_RoomID_RoomMarSara, PlayerGroupAll(), 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.3);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    if ((gv_debug_TVNewsOn == false)) {
        CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }

    libCamp_gf_HideStoryUI(true, true);
    gf_TurnMarSaraBarBackgroundSoundOnOff(true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
}

void gf_TVNewsMarSaraStopAllThreads () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(gt_TVNewsRaynor01Event02);
    TriggerStop(gt_TVNewsRaynor01Event05);
    TriggerStop(gt_TVNewsRaynor02Event03);
    TriggerStop(gt_TVNewsRaynor02Event05);
}

void gf_TVNewsCantina3 (string lp_news, trigger lp_skippable) {
    // Automatic Variable Declarations
    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceTV);
    gf_SetIdleState(ge_IdleState_Busy);
    libCamp_gf_HideStoryUI(false, true);
    if ((gv_currentRoom != ge_RoomID_RoomCantina)) {
        gf_ChangeRoom(ge_RoomID_RoomCantina, false);
    }

    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    gf_RoomScenePrepare(ge_RoomID_RoomCantina, ge_SceneType_TV);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.3);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_TVNewsPreload(lp_news);
    if ((lp_news == "TTychus05")) {
        gf_TurnAnimationPropertiesOnOffInstantly(gv_cantinaProps, "A", true);
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(342));
        gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", false);
        gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", false);
    }
    else {
        gf_TurnAnimationPropertiesOnOffInstantly(gv_cantinaProps, "A", false);
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(154));
        gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", true);
        gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", true);
    }
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomCantina, ge_SceneType_TV);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    if ((lp_news == "THorner03")) {
        gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(20));
        gf_ActorScenePrepare(ge_ActorID_ActorTychus, ge_ActorID_ActorNone, ge_RoomID_RoomCantina, ge_SceneType_TV);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
    }

    if ((lp_news == "TTosh02")) {
        gf_ResetActorToLocation(ge_ActorID_ActorTosh, PointFromId(164));
        gf_ActorScenePrepare(ge_ActorID_ActorTosh, ge_ActorID_ActorNone, ge_RoomID_RoomCantina, ge_SceneType_TV);
        gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTosh), "Cover", true);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTosh));
    }

    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    gv_tVNewsCurrentThread = lp_skippable;
    TriggerEnable(gt_TVNewsBack2, true);
    TriggerExecute(lp_skippable, true, true);
    TriggerEnable(gt_TVNewsBack2, false);
    gv_tVNewsCurrentThread = null;
    gf_HideIntroTextBox(false);
    gf_TVNewsCantinaStopAllThreads();
    CameraShakeStop(1);
    gf_StopAllTransmissionConversation();
    libNtve_gf_StopAllVideoTexturesOnUnit(gv_cantinaTV);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 0, ""));
    if ((lp_news == "TTychus05") && (gv_cantinaState == ge_CantinaStates_Normal)) {
        gf_TurnAnimationPropertiesOnOffInstantly(gv_cantinaProps, "A", false);
    }

    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    gf_ViewRoomCamera(ge_RoomID_RoomCantina, PlayerGroupAll(), 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.3);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    if ((gv_debug_TVNewsOn == false)) {
        CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }

    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
}

void gf_TVNewsCantinaStopAllThreads () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(gt_TVNewsHanson01Event01);
    TriggerStop(gt_TVNewsHanson03aEvent02);
    TriggerStop(gt_TVNewsHorner02Event02);
    TriggerStop(gt_TVNewsTosh02Event01);
    TriggerStop(gt_TVNewsTychus01Event04);
    TriggerStop(gt_TVNewsTychus05Event04);
    TriggerStop(gt_TVNewsHanson01Event03);
    TriggerStop(gt_TVNewsHanson02Event05);
    TriggerStop(gt_TVNewsHanson03aEvent06);
    TriggerStop(gt_TVNewsHanson03bEvent06);
    TriggerStop(gt_TVNewsTosh03aEvent05);
    TriggerStop(gt_TVNewsHorner01Event05);
    TriggerStop(gt_TVNewsHorner03Event08);
    TriggerStop(gt_TVNewsHorner05SEvent06);
    TriggerStop(gt_TVNewsZeratul01Event06);
    TriggerStop(gt_TVNewsZeratul03Event03);
}

void gf_TVNewsCantina4 (string lp_news, trigger lp_skippable) {
    // Automatic Variable Declarations
    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceTV);
    gf_SetIdleState(ge_IdleState_Busy);
    libCamp_gf_HideStoryUI(false, true);
    if ((gv_currentRoom != ge_RoomID_RoomChar)) {
        gf_ChangeRoom(ge_RoomID_RoomChar, false);
    }

    gf_RoomScenePrepare(ge_RoomID_RoomChar, ge_SceneType_TV);
    gf_TVNewsPreload(lp_news);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynorMarine, ge_ActorID_ActorNone, ge_RoomID_RoomChar, ge_SceneType_TV);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    gf_ActorScenePrepare(ge_ActorID_ActorTychus, ge_ActorID_ActorNone, ge_RoomID_RoomChar, ge_SceneType_TV);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_ConvoPositionActors(ge_RoomID_RoomChar, ge_ActorID_ActorRaynorMarine, ge_ActorID_ActorWarfield, ge_ActorID_ActorNone);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorWarfield));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorWarfieldAOD));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Main));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Center));
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Center));
    libNtve_gf_PlayMovieTextureOnUnitActor(gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Center), "video_static");
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    gv_tVNewsCurrentThread = lp_skippable;
    TriggerEnable(gt_TVNewsBack2, true);
    TriggerExecute(lp_skippable, true, true);
    TriggerEnable(gt_TVNewsBack2, false);
    gv_tVNewsCurrentThread = null;
    gf_HideIntroTextBox(false);
    CameraShakeStop(1);
    gf_BriefingStopVideo(ge_RoomID_RoomChar, ge_BriefingScreen_Center);
    gf_StopAllTransmissionConversation();
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    gf_PrepareRoomActors(ge_RoomID_RoomChar, true);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Center));
    gf_ViewRoomCamera(ge_RoomID_RoomChar, PlayerGroupAll(), 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    if ((gv_debug_TVNewsOn == false)) {
        CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }

    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
}

void gf_TVNewsSetWatched (string lp_news) {
    // Variable Declarations
    int lv_count;
    string lv_indexNews;

    // Automatic Variable Declarations
    string auto07D0EEB0_userType;
    int auto07D0EEB0_i;

    // Variable Initialization

    // Implementation
    UserDataSetInt("TStory01TVNews", lp_news, "IsWatched", 1, 1);
    auto07D0EEB0_userType = "TStory01TVNews";
    auto07D0EEB0_i = 1;
    for ( ; auto07D0EEB0_i <= UserDataInstanceCount(auto07D0EEB0_userType) ; auto07D0EEB0_i += 1 ) {
        lv_indexNews = UserDataInstance(auto07D0EEB0_userType, auto07D0EEB0_i);
        if ((UserDataGetInt("TStory01TVNews", lv_indexNews, "IsWatched", 1) > 0)) {
            lv_count += 1;
        }

    }
    libWoLC_gf_SetAchievementTermQuantityCampaign("TStory01_10", lv_count);
}

bool gf_TVNewsIsWatched (string lp_news) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TStory01TVNews", lp_news, "IsWatched", 1) > 0);
}

void gf_WaitForTimeToPlayNextTip (fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    Wait(lp_duration, c_timeReal);
    if (((gf_CurrentWorldMode() != ge_WorldMode_WorldModeGlobal) || (gf_CurrentIdleState() != ge_IdleState_Idle))) {
        gf_WaitForGlobalIdle();
        Wait(1.0, c_timeReal);
        gf_WaitForGlobalIdle();
    }

}

void gf_AddTip (string lp_convoState) {
    // Variable Declarations
    fixed lv_waitDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((ConversationDataStateGetValue(lp_convoState) != 0)) {
        return ;
    }

    if ((gv_tipStart == true)) {
        gv_tipStart = false;
        lv_waitDuration = gv_c_TIPINTERVALSTART;
    }
    else {
        lv_waitDuration = gv_c_TIPINTERVAL;
    }
    gf_WaitForTimeToPlayNextTip(lv_waitDuration);
    gf_SetIdleState(ge_IdleState_Busy);
    libCamp_gf_CreateTipFromConversationState(lp_convoState, libNtve_ge_TipType_NormalTip, PlayerGroupAll());
    ConversationDataStateSetValue(lp_convoState, 1);
    Wait(4.0, c_timeReal);
    gf_SetIdleState(ge_IdleState_Idle);
}

void gf_StartTipHint () {
    // Automatic Variable Declarations
    // Implementation
    if ((libWoLC_gf_LastMission() == "TRaynor01") && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == true)) {
        TriggerExecute(gt_TipAfterTRaynor01, true, false);
    }
    else if ((libWoLC_gf_LastMission() == "TRaynor02") && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == true)) {
        TriggerExecute(gt_TipAfterTRaynor02, true, false);
    }
    else if ((libWoLC_gf_LastMission() == "TRaynor03") && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == true)) {
        TriggerExecute(gt_TipAfterTRaynor03, true, false);
    }
    else if (((libWoLC_gf_LastMission() == "THanson01") || (libWoLC_gf_LastMission() == "TTychus01")) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == true)) {
        TriggerExecute(gt_TipAfterTHanson01orTTychus01, true, false);
    }
    else if ((libWoLC_gf_LastMission() == "TTychus02") && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == true)) {
        TriggerExecute(gt_TipLabCrystal, true, false);
    }
    else if ((libWoLC_gf_LastMission() == "TValerian01") && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == true)) {
        TriggerExecute(gt_TipAfterTValerian01, true, false);
    }
    TriggerExecute(gt_TipCantina, true, false);
    TriggerExecute(gt_TipLab, true, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheats
//--------------------------------------------------------------------------------------------------
bool gt_Cheats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_actionTypeName;
    string lv_unitTypeName;
    string lv_currentChatToken;
    int lv_currentTokenIndex;
    string lv_errorMessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_actionTypeName = "";
    lv_unitTypeName = "";
    lv_currentChatToken = "";
    lv_errorMessage = "";

    // Conditions
    if (testConds) {
        if (!((StringCase(StringWord(EventChatMessage(false), (ge_ConscriptionCheatToken_ConscriptionTokenIndex)), false) == "conscription"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_actionTypeName = StringWord(EventChatMessage(false), (ge_ConscriptionCheatToken_ActionTokenIndex));
    if ((lv_actionTypeName == null)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/83093A99"));
        return true;
    }

    lv_currentTokenIndex = ge_ConscriptionCheatToken_UnitTokenStartIndex;
    lv_currentChatToken = StringWord(EventChatMessage(false), lv_currentTokenIndex);
    while ((lv_currentChatToken != null)) {
        lv_currentChatToken = StringCase(lv_currentChatToken, false);
        lv_currentChatToken = (StringCase(StringSub(lv_currentChatToken, 1, 1), true) + StringSub(lv_currentChatToken, 2, StringLength(lv_currentChatToken)));
        lv_unitTypeName = (lv_unitTypeName + (lv_currentChatToken + " "));
        lv_currentTokenIndex = (lv_currentTokenIndex + 1);
        lv_currentChatToken = StringWord(EventChatMessage(false), lv_currentTokenIndex);
    }
    if (((lv_unitTypeName == null) || (StringEqual(lv_unitTypeName, "", c_stringNoCase) == true))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/570012E2"));
        return true;
    }

    lv_unitTypeName = StringSub(lv_unitTypeName, 1, StringLength(lv_unitTypeName));
    lv_errorMessage = gf_ExecuteConscriptionCheat(lv_actionTypeName, lv_unitTypeName);
    if ((StringEqual(lv_errorMessage, "", c_stringNoCase) != true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText(lv_errorMessage));
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("cheat applied successfully"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cheats_Init () {
    gt_Cheats = TriggerCreate("gt_Cheats_Func");
    TriggerAddEventChatMessage(gt_Cheats, c_playerAny, "onscription", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait For Skip Trig
//--------------------------------------------------------------------------------------------------
bool gt_WaitForSkipTrig_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(gv_waitForSkipTimeout, gv_waitForSkipTimeType);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaitForSkipTrig_Init () {
    gt_WaitForSkipTrig = TriggerCreate("gt_WaitForSkipTrig_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BackButton Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BackButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_BackButtonEscapeSkippable);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BackButtonClicked_Init () {
    gt_BackButtonClicked = TriggerCreate("gt_BackButtonClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BackButton Escape
//--------------------------------------------------------------------------------------------------
bool gt_BackButtonEscape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        TriggerExecute(gt_BackButtonEscapeSkippable, true, true);
        if ((gv_backButtonHidden == false)) {
            break;
        }

    }
    gf_BackButtonBack();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BackButtonEscape_Init () {
    gt_BackButtonEscape = TriggerCreate("gt_BackButtonEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BackButton Escape Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BackButtonEscapeSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    while (true) {
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BackButtonEscapeSkippable_Init () {
    gt_BackButtonEscapeSkippable = TriggerCreate("gt_BackButtonEscapeSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TBDWindowClose Clicked
//--------------------------------------------------------------------------------------------------
bool gt_TBDWindowCloseClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_tBDWindowButtonClose))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroy(gv_tBDWindowDialog);
    TriggerExecute(gv_tBDWindowExitCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBDWindowCloseClicked_Init () {
    gt_TBDWindowCloseClicked = TriggerCreate("gt_TBDWindowCloseClicked_Func");
    TriggerAddEventDialogControl(gt_TBDWindowCloseClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jukebox Clicked
//--------------------------------------------------------------------------------------------------
bool gt_JukeboxClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_jukeboxID = gv_tP_JukeboxID;
    SoundPlay(SoundLink("SetPiece_Jukebox_Select", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_sessionID += 1;
    gf_JukeboxNextTrack(lv_jukeboxID, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JukeboxClicked_Init () {
    gt_JukeboxClicked = TriggerCreate("gt_JukeboxClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jukebox Track Loop
//--------------------------------------------------------------------------------------------------
bool gt_JukeboxTrackLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;
    int lv_sessionID;
    int lv_trackCurrent;
    int lv_trackStarted;
    fixed lv_duration;
    fixed lv_volume;
    fixed lv_offset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jukeboxID = gv_tP_JukeboxID;
    lv_sessionID = gv_tP_JukeboxSessionIDLocal;
    lv_trackStarted = gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent;
    lv_trackCurrent = (gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent - 1);
    while (true) {
        lv_trackCurrent += 1;
        if (((lv_sessionID != gv_jukeboxes[lv_jukeboxID].lv_playback.lv_sessionID) || (lv_trackCurrent > gv_jukeboxes[lv_jukeboxID].lv_trackCount))) {
            return true;
        }

        gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent = lv_trackCurrent;
        TriggerDebugOutput(1, (StringExternal("Param/Value/899C0450") + IntToText(lv_trackCurrent)), false);
        TriggerDebugOutput(1, (StringExternal("Param/Value/0CA20F37") + IntToText(lv_trackStarted)), false);
        if ((lv_trackCurrent == gv_jukeboxes[lv_jukeboxID].lv_trackCount)) {
            if ((lv_trackCurrent != lv_trackStarted)) {
                gf_TurnClickableOnOff(gv_jukeboxes[lv_jukeboxID].lv_box, false);
                if ((gv_jukeboxes[lv_jukeboxID].lv_playback.lv_music != null)) {
                    SoundStop(gv_jukeboxes[lv_jukeboxID].lv_playback.lv_music, true);
                    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_music = null;
                }

                TriggerDebugOutput(1, (StringExternal("Param/Value/AB1AB48C")), false);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_jukeboxes[lv_jukeboxID].lv_box), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
                Wait(1.0, c_timeReal);
                gf_TurnClickableOnOff(gv_jukeboxes[lv_jukeboxID].lv_box, true);
            }
            else {
                Wait(1.0, c_timeReal);
            }
        }
        else {
            gf_JukeboxUpdateTrackInfo(lv_jukeboxID);
            TriggerDebugOutput(1, (StringExternal("Param/Value/0913E0DC") + libNtve_gf_ConvertBooleanToText(gv_jukeboxes[lv_jukeboxID].lv_startRandom) + StringExternal("Param/Value/8BCDDABD") + libNtve_gf_ConvertBooleanToText(gv_jukeboxes[lv_jukeboxID].lv_playback.lv_startedBefore)), false);
            if ((gv_jukeboxes[lv_jukeboxID].lv_startRandom == true) && (gv_jukeboxes[lv_jukeboxID].lv_playback.lv_startedBefore == false)) {
                lv_offset = RandomFixed(10.0, 60.0);
                gv_jukeboxes[lv_jukeboxID].lv_playback.lv_startedBefore = true;
                TriggerDebugOutput(1, (StringExternal("Param/Value/4062419E") + FixedToText(lv_offset, c_fixedPrecisionAny)), false);
            }
            else {
                lv_offset = 0.0;
            }
            if (((gv_jukeboxes[lv_jukeboxID].lv_playback.lv_muted == true) || (gv_terranUpTheNightPlaying == true))) {
                lv_volume = 0.0;
            }
            else {
                lv_volume = 100.0;
            }
            SoundPlay(gv_jukeboxes[lv_jukeboxID].lv_tracks[gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent], PlayerGroupAll(), lv_volume, lv_offset);
            gv_jukeboxes[lv_jukeboxID].lv_playback.lv_music = SoundLastPlayed();
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            TriggerDebugOutput(1, (StringExternal("Param/Value/D7DC7C30") + IntToText(lv_sessionID) + StringExternal("Param/Value/72B22E0C") + IntToText(gv_jukeboxes[lv_jukeboxID].lv_playback.lv_sessionID)), false);
            if ((lv_sessionID != gv_jukeboxes[lv_jukeboxID].lv_playback.lv_sessionID)) {
                return true;
            }

            TriggerDebugOutput(1, (StringExternal("Param/Value/64B78EC7")), false);
            gv_jukeboxes[lv_jukeboxID].lv_playback.lv_music = null;
            Wait(1.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JukeboxTrackLoop_Init () {
    gt_JukeboxTrackLoop = TriggerCreate("gt_JukeboxTrackLoop_Func");
    TriggerEnable(gt_JukeboxTrackLoop, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jukebox Track Animation
//--------------------------------------------------------------------------------------------------
bool gt_JukeboxTrackAnimation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jukeboxID = gv_tP_JukeboxID;
    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_nextTrackAnimationDone = false;
    if ((gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent == 1)) {
        if (((gv_jukeboxes[lv_jukeboxID].lv_startRandom == false) || (!((libWoLC_gf_LastMap() == "TRaynor01") || (libWoLC_gf_LastMapConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) || (libWoLC_gf_LastMapConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false))) || (gv_jukeboxes[lv_jukeboxID].lv_playback.lv_startedBefore == true))) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_jukeboxes[lv_jukeboxID].lv_box), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
            Wait(2.0, c_timeReal);
        }

        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_jukeboxes[lv_jukeboxID].lv_box), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    else if ((gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent == gv_jukeboxes[lv_jukeboxID].lv_trackCount)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_jukeboxes[lv_jukeboxID].lv_box), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
        Wait(1.0, c_timeReal);
    }
    else if ((true == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_jukeboxes[lv_jukeboxID].lv_box), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_nextTrackAnimationDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JukeboxTrackAnimation_Init () {
    gt_JukeboxTrackAnimation = TriggerCreate("gt_JukeboxTrackAnimation_Func");
    TriggerEnable(gt_JukeboxTrackAnimation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jukebox Track Comments
//--------------------------------------------------------------------------------------------------
bool gt_JukeboxTrackComments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jukeboxID = gv_tP_JukeboxID;
    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_nextTrackCommentsDone = false;
    if ((gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent == gv_jukeboxes[lv_jukeboxID].lv_trackCount)) {
        gf_PlayFidget(gv_jukeboxes[lv_jukeboxID].lv_fidgetSetTurnOff, ge_ActorID_ActorNone, ge_ActorID_ActorNone);
    }
    else {
        gf_PlayFidget(gv_jukeboxes[lv_jukeboxID].lv_fidgetSetTrack, ge_ActorID_ActorNone, ge_ActorID_ActorNone);
    }
    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_nextTrackCommentsDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JukeboxTrackComments_Init () {
    gt_JukeboxTrackComments = TriggerCreate("gt_JukeboxTrackComments_Func");
    TriggerEnable(gt_JukeboxTrackComments, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop Music Soundtrack
//--------------------------------------------------------------------------------------------------
bool gt_StopSoundtrackMultiple_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StopSoundtrackMultiple_Init () {
    gt_StopSoundtrackMultiple = TriggerCreate("gt_StopSoundtrackMultiple_Func");
    TriggerEnable(gt_StopSoundtrackMultiple, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Clicked
//--------------------------------------------------------------------------------------------------
bool gt_PinboardClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pb;
    int lv_pbIndex;
    int lv_item;
    int lv_itemIndex;
    unitgroup lv_itemGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pb = ge_Pinboard_PBNone;
    lv_item = ge_PinboardItem_PBItemNone;
    lv_itemGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pb = gf_GetPinboardFromUnit(EventUnit());
    if ((lv_pb == ge_Pinboard_PBNone)) {
        lv_item = gf_GetPinboardItemFromUnit(EventUnit());
        if ((lv_item == ge_PinboardItem_PBItemNone)) {
            return true;
        }

        lv_pb = gf_GetPinboardOfItem(lv_item);
    }

    if ((lv_pb == ge_Pinboard_PBNone)) {
        return true;
    }

    lv_pbIndex = (lv_pb);
    if (((UnitTestState(gv_pinboards[lv_pbIndex].lv_pinboard, c_unitStateHighlightable) == false) || (gv_pinboards[lv_pbIndex].lv_range == ge_PinboardCameraRange_Close))) {
        return true;
    }

    gv_pinboardCurrent = lv_pb;
    gv_pinboards[lv_pbIndex].lv_range = ge_PinboardCameraRange_Close;
    gf_HighlightPinboard(gv_pinboardCurrent, false, null);
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    TriggerExecute(gt_PinboardZoom, true, false);
    Wait(1.0, c_timeReal);
    gf_PreparePinboard(gv_pinboardCurrent);
    gf_StopFlashingUnit(gv_pinboards[lv_pbIndex].lv_pinboard);
    TriggerExecute(gt_PinboardItemClicked, true, true);
    TriggerExecute(gt_PinboardLeave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardClicked_Init () {
    gt_PinboardClicked = TriggerCreate("gt_PinboardClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Zoom
//--------------------------------------------------------------------------------------------------
bool gt_PinboardZoom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pbIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pbIndex = (gv_pinboardCurrent);
    gf_HotspotZoom(gf_RoomUnit(gv_pinboards[lv_pbIndex].lv_room), gv_pinboards[lv_pbIndex].lv_zoomCamera, gv_pinboards[lv_pbIndex].lv_zoomAnimation, gv_pinboards[lv_pbIndex].lv_zoomDuration);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardZoom_Init () {
    gt_PinboardZoom = TriggerCreate("gt_PinboardZoom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Leave
//--------------------------------------------------------------------------------------------------
bool gt_PinboardLeave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pbIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_GenericTransitionExit_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    lv_pbIndex = (gv_pinboardCurrent);
    gf_HotspotLeaveWithCamera(gv_pinboards[lv_pbIndex].lv_room, null, gv_pinboards[lv_pbIndex].lv_zoomBackCamera, gv_pinboards[lv_pbIndex].lv_zoomBackAnimation, gv_pinboards[lv_pbIndex].lv_zoomBackDuration);
    if ((gv_pinboards[lv_pbIndex].lv_room == ge_RoomID_RoomMarSara)) {
        gf_TurnMarSaraBarBackgroundSoundOnOff(true);
    }

    gv_pinboards[lv_pbIndex].lv_range = ge_PinboardCameraRange_Long;
    gf_PreparePinboard(gv_pinboardCurrent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardLeave_Init () {
    gt_PinboardLeave = TriggerCreate("gt_PinboardLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Clicked
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_item;
    int lv_pbIndex;
    int lv_itemIndex;
    unitgroup lv_itemGroup;
    string lv_convoState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item = ge_PinboardItem_PBItemNone;
    lv_itemGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_item = gf_GetPinboardItemFromUnit(EventUnit());
    if ((lv_item == ge_PinboardItem_PBItemNone)) {
        return true;
    }

    gv_pinboardCurrent = gf_GetPinboardOfItem(lv_item);
    gv_pinboardItemCurrent = lv_item;
    lv_pbIndex = (gv_pinboardCurrent);
    lv_itemIndex = (gv_pinboardItemCurrent);
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopFlashingUnit(gv_pinboardItems[lv_itemIndex].lv_item);
    lv_convoState = gf_HotspotConvoState(gv_pinboardItems[lv_itemIndex].lv_item);
    if ((lv_convoState != null)) {
        ConversationDataStateSetValue(lv_convoState, 1);
    }

    gf_StopAllTransmissionConversation();
    libCamp_gf_HideStoryUI(false, true);
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_PinboardZoom, true, false);
    Wait(1.0, c_timeReal);
    gf_PreparePinboard(gv_pinboardCurrent);
    gf_StopFlashingUnit(EventUnit());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboardItems[lv_itemIndex].lv_item), gv_aNIMID_ZOOM, "Fly Start", c_animFlagPlayForever, 0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboards[lv_pbIndex].lv_pinboard), gv_aNIMID_ZOOM, "Fly Start", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlay(gv_pinboardItems[lv_itemIndex].lv_activateSound, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.667, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboardItems[lv_itemIndex].lv_item), gv_aNIMID_ZOOM, "Fly", c_animFlagPlayForever, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboards[lv_pbIndex].lv_pinboard), gv_aNIMID_ZOOM, "Fly", c_animFlagPlayForever, c_animTimeDefault);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_Convo(gv_pinboardItems[(gv_pinboardItemCurrent)].lv_fidgetSet, ge_RoomID_RoomMarSara, ge_ActorID_ActorRaynor, PointFromId(89), ge_ActorID_ActorTychus, gv_marSaraTychusCameras, PointFromId(91), ge_ActorID_ActorNone, null, null, gt_PinboardItemClickedPreCallback, gt_PinboardItemClickedPostCallback, true, false, gt_PinboardItemClickedCamera, gt_PinboardItemClickedCameraChanged);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    TriggerExecute(gt_PinboardItemClickedCamera, true, false);
    gf_DisplayBackButton(gt_PinboardItemBack);
    TriggerEnable(gt_PinboardItemBack, true);
    TriggerExecute(gt_PinboardItemSkippable, true, true);
    gf_HideBackButton(false);
    gf_StopAllTransmissionConversation();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboardItems[lv_itemIndex].lv_item), gv_aNIMID_ZOOM, "Fly End", 0, 0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboards[lv_pbIndex].lv_pinboard), gv_aNIMID_ZOOM, "Fly End", 0, c_animTimeDefault);
    SoundPlay(gv_pinboardItems[lv_itemIndex].lv_activateSound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_PinboardLeave, true, true);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemClicked_Init () {
    gt_PinboardItemClicked = TriggerCreate("gt_PinboardItemClicked_Func");
    TriggerAddEventUnitClick(gt_PinboardItemClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MarSaraTychusClickedPreCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemClickedPreCallback_Init () {
    gt_PinboardItemClickedPreCallback = TriggerCreate("gt_PinboardItemClickedPreCallback_Func");
    TriggerEnable(gt_PinboardItemClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboardItems[(gf_GetCurrentPinboardItem())].lv_item), gv_aNIMID_ZOOM, "Fly", c_animFlagPlayForever, 0.0);
    TriggerExecute(gt_MarSaraTychusClickedPostCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemClickedPostCallback_Init () {
    gt_PinboardItemClickedPostCallback = TriggerCreate("gt_PinboardItemClickedPostCallback_Func");
    TriggerEnable(gt_PinboardItemClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemClickedCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(gv_currentRoom), "Zoom_04", "Fly 04", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(gv_currentRoom)), gv_aNIMID_ZOOM, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemClickedCamera_Init () {
    gt_PinboardItemClickedCamera = TriggerCreate("gt_PinboardItemClickedCamera_Func");
    TriggerEnable(gt_PinboardItemClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Clicked Camera Changed
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemClickedCameraChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentItem = ge_PinboardItem_PBItemNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentItem = gf_GetCurrentPinboardItem();
    if ((lv_currentItem == ge_PinboardItem_PBItemNone)) {
        return true;
    }

    if ((gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraNone) && (gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraCustom)) {
        gf_ClearAnimationwithblendtime(gv_aNIMID_ZOOM, gv_pinboardItems[(lv_currentItem)].lv_item, 0.0);
    }
    else {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboardItems[(lv_currentItem)].lv_item), gv_aNIMID_ZOOM, "Fly", c_animFlagPlayForever, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemClickedCameraChanged_Init () {
    gt_PinboardItemClickedCameraChanged = TriggerCreate("gt_PinboardItemClickedCameraChanged_Func");
    TriggerEnable(gt_PinboardItemClickedCameraChanged, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Skippable
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemID = c_timerWindowNone;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemSkippable_Init () {
    gt_PinboardItemSkippable = TriggerCreate("gt_PinboardItemSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Back
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemBack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_PinboardItemSkippable);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemBack_Init () {
    gt_PinboardItemBack = TriggerCreate("gt_PinboardItemBack_Func");
    TriggerEnable(gt_PinboardItemBack, false);
    TriggerAddEventMouseClicked(gt_PinboardItemBack, c_playerAny, c_mouseButtonNone, true);
    TriggerAddEventKeyPressed(gt_PinboardItemBack, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display New Items
//--------------------------------------------------------------------------------------------------
bool gt_DisplayNewItems_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_UpdateNewItems();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayNewItems_Init () {
    gt_DisplayNewItems = TriggerCreate("gt_DisplayNewItems_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Item Available
//--------------------------------------------------------------------------------------------------
bool gt_NewItemAvailable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_type;
    text lv_text;
    string lv_imagePortrait;
    string lv_modelFlash;
    fixed lv_duration;
    int lv_customData;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_type = ge_NewItemType_None;
    lv_text = StringToText("");

    // Actions
    if (!runActions) {
        return true;
    }

    lv_type = gv_tP_NEWITEMAVAILABLE_Type;
    lv_text = gv_tP_NEWITEMAVAILABLE_Text;
    lv_imagePortrait = gv_tP_NEWITEMAVAILABLE_ImagePortrait;
    lv_modelFlash = gv_tP_NEWITEMAVAILABLE_ModelFlash;
    lv_duration = gv_tP_NEWITEMAVAILABLE_Duratioin;
    lv_customData = gv_tP_NEWITEMAVAILABLE_CustomData;
    TriggerQueueEnter();
    gv_newItemsCount += 1;
    gv_newItems[gv_newItemsCount].lv_type = lv_type;
    gv_newItems[gv_newItemsCount].lv_text = lv_text;
    gv_newItems[gv_newItemsCount].lv_imagePortrait = lv_imagePortrait;
    gv_newItems[gv_newItemsCount].lv_modelFlash = lv_modelFlash;
    gv_newItems[gv_newItemsCount].lv_displayDuration = lv_duration;
    gv_newItems[gv_newItemsCount].lv_customData = lv_customData;
    gv_newItems[gv_newItemsCount].lv_dialog = c_invalidDialogId;
    gv_newItems[gv_newItemsCount].lv_label = c_invalidDialogControlId;
    gv_newItems[gv_newItemsCount].lv_flash = c_invalidPortraitId;
    gv_newItems[gv_newItemsCount].lv_beingRemoved = false;
    gf_UpdateNewItems();
    Wait(1.5, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewItemAvailable_Init () {
    gt_NewItemAvailable = TriggerCreate("gt_NewItemAvailable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create New Item
//--------------------------------------------------------------------------------------------------
bool gt_CreateNewItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newItemIndex;
    fixed lv_offset;
    string lv_model;

    // Automatic Variable Declarations
    int auto30B20644_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newItemIndex = gv_tP_CreateNewItem_NewItemIndex;
    lv_offset = gv_tP_CreateNewItem_Offset;
    if ((gv_newItems[lv_newItemIndex].lv_type == ge_NewItemType_None)) {
        return true;
    }

    libCamp_gf_CreateDialogInGrid(20.0, 1.0, c_anchorTopLeft, 0.0, 0.0, false);
    gv_newItems[lv_newItemIndex].lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeImage, c_anchorLeft, -0.2, 0.0, 1.0, 1.0, StringToText(""));
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_newItems[lv_newItemIndex].lv_imagePortrait, PlayerGroupAll());
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorLeft, 0.8, 0.0, 20.0, 2.0, gv_newItems[lv_newItemIndex].lv_text);
    gv_newItems[lv_newItemIndex].lv_label = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StoryModeNewItemTooltip", PlayerGroupAll());
    PortraitCreate(0, 0, c_anchorTopLeft, FixedToInt(gv_c_NEWITEMINFO_FLASHWIDTH), FixedToInt(gv_c_NEWITEMINFO_FLASHHEIGHT), gv_newItems[lv_newItemIndex].lv_modelFlash, "CameraPortrait", "Default", false, false);
    PortraitUseTransition(PortraitLastCreated(), false);
    gv_newItems[lv_newItemIndex].lv_flash = PortraitLastCreated();
    PortraitSetBackgroundVisible(PortraitLastCreated(), false);
    PortraitSetBorderVisible(PortraitLastCreated(), false);
    gf_MoveNewItem(lv_newItemIndex, lv_offset, 0.0);
    Wait(0.5, c_timeReal);
    auto30B20644_val = gv_newItems[lv_newItemIndex].lv_type;
    if (auto30B20644_val == ge_NewItemType_ResearchUnlock) {
        UserDataSetInt("CampaignPerk", UserDataInstance("CampaignPerk", gv_newItems[lv_newItemIndex].lv_customData), "IsNew", 1, 0);
    }
    else if (auto30B20644_val == ge_NewItemType_NewMercenary) {
    }
    else {
    }
    SoundPlay(SoundLink("TUINewRoomActorOnline", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PortraitSetAnim(gv_newItems[lv_newItemIndex].lv_flash, "Birth", "TriggerPortraitAnim", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    if ((gv_newItemInfoPaused == true)) {
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), false, false);
    }
    else {
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), true, false);
    }
    gf_WaitNewItemInfoDisplayDuration(lv_newItemIndex);
    gf_RemoveNewItem(lv_newItemIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateNewItem_Init () {
    gt_CreateNewItem = TriggerCreate("gt_CreateNewItem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move New Item
//--------------------------------------------------------------------------------------------------
bool gt_MoveNewItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newItemIndex;
    fixed lv_offsetTarget;
    fixed lv_duration;
    fixed lv_offsetOriginal;
    fixed lv_offset;
    fixed lv_incrementOffset;
    fixed lv_incrementTime;
    int lv_moveCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newItemIndex = gv_tP_MoveNewItem_NewItemIndex;
    lv_offsetTarget = gv_tP_MoveNewItem_OffsetY;
    lv_duration = gv_tP_MoveNewItem_Duration;
    if ((lv_duration <= 0.0)) {
        gf_MoveNewItemInstant(lv_newItemIndex, lv_offsetTarget);
        return true;
    }

    lv_incrementOffset = 0.15;
    lv_offsetOriginal = libCamp_gf_DialogOffsetYInGrid(gv_newItems[lv_newItemIndex].lv_dialog);
    if ((AbsF((lv_offsetTarget - lv_offsetOriginal)) <= lv_incrementOffset)) {
        gf_MoveNewItemInstant(lv_newItemIndex, lv_offsetTarget);
        return true;
    }

    if ((lv_offsetTarget < lv_offsetOriginal)) {
        lv_incrementOffset = (lv_incrementOffset * -1.0);
    }

    lv_offset = lv_offsetOriginal;
    while (true) {
        lv_offset += lv_incrementOffset;
        if ((lv_incrementOffset > 0.0) && (lv_offset >= lv_offsetTarget)) {
            break;
        }

        if ((lv_incrementOffset < 0.0) && (lv_offset <= lv_offsetTarget)) {
            break;
        }

        gf_MoveNewItemInstant(lv_newItemIndex, lv_offset);
        Wait(0.0625, c_timeReal);
    }
    gf_MoveNewItemInstant(lv_newItemIndex, lv_offsetTarget);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveNewItem_Init () {
    gt_MoveNewItem = TriggerCreate("gt_MoveNewItem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove New Item
//--------------------------------------------------------------------------------------------------
bool gt_RemoveNewItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newItemIndex;
    int lv_index;
    int lv_fadeTimes;
    fixed lv_interval;
    fixed lv_transparencyChange;

    // Automatic Variable Declarations
    int autoBB9F0C83_ae;
    const int autoBB9F0C83_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newItemIndex = gv_tP_NewItemBeingRemoved;
    if (((lv_newItemIndex <= 0) || (gv_newItems[lv_newItemIndex].lv_beingRemoved == true))) {
        return true;
    }

    gv_newItems[lv_newItemIndex].lv_beingRemoved = true;
    lv_fadeTimes = 30;
    lv_interval = (1.5 / IntToFixed(lv_fadeTimes));
    lv_transparencyChange = (100.0 / IntToFixed(lv_fadeTimes));
    libNtve_gf_PortraitSetAnim(gv_newItems[lv_newItemIndex].lv_flash, "Death", "TriggerPortraitAnim", c_animFlagPlayForever, c_animTimeDefault);
    autoBB9F0C83_ae = lv_fadeTimes;
    lv_index = 1;
    for ( ; ( (autoBB9F0C83_ai >= 0 && lv_index <= autoBB9F0C83_ae) || (autoBB9F0C83_ai < 0 && lv_index >= autoBB9F0C83_ae) ) ; lv_index += autoBB9F0C83_ai ) {
        DialogSetTransparency(gv_newItems[lv_newItemIndex].lv_dialog, (lv_transparencyChange * IntToFixed(lv_index)));
        Wait(lv_interval, c_timeReal);
    }
    gf_DestoryNewItem(lv_newItemIndex);
    gv_newItems[lv_newItemIndex].lv_beingRemoved = false;
    gf_UpdateNewItems();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveNewItem_Init () {
    gt_RemoveNewItem = TriggerCreate("gt_RemoveNewItem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Enabled Look At
//--------------------------------------------------------------------------------------------------
bool gt_DebugEnabledLookAt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lookAtEnabled = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/77BDD6A4"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugEnabledLookAt_Init () {
    gt_DebugEnabledLookAt = TriggerCreate("gt_DebugEnabledLookAt_Func");
    TriggerAddEventChatMessage(gt_DebugEnabledLookAt, 1, "ENABLELOOKAT", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Disabled Look At
//--------------------------------------------------------------------------------------------------
bool gt_DebugDisabledLookAt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lookAtEnabled = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/615132C4"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugDisabledLookAt_Init () {
    gt_DebugDisabledLookAt = TriggerCreate("gt_DebugDisabledLookAt_Func");
    TriggerAddEventChatMessage(gt_DebugDisabledLookAt, 1, "DISABLELOOKAT", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Query Dialog Dismissed
//--------------------------------------------------------------------------------------------------
bool gt_QueryDialogDismissed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_queryDialogResult = EventCustomDialogResult();
    gv_queryDialogClosed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueryDialogDismissed_Init () {
    gt_QueryDialogDismissed = TriggerCreate("gt_QueryDialogDismissed_Func");
    TriggerAddEventCustomDialogDismissed(gt_QueryDialogDismissed, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Init
//--------------------------------------------------------------------------------------------------
bool gt_MapInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugWindowOpen(true);
    libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(true, c_syncFrameTypeTextTag);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    GameSetTransitionMap("Campaign/TStory01.SC2Map");
    TriggerExecute(gt_Init00DebugCheckforcinematicsizesetting, true, false);
    TriggerExecute(gt_Init01StoryData, true, true);
    TriggerExecute(gt_Init02World, true, false);
    TriggerExecute(gt_Init03UI, true, false);
    TriggerExecute(gt_Init04Environment, true, false);
    TriggerExecute(gt_Init05Sounds, true, false);
    TriggerExecute(gt_Init06Intro, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInit_Init () {
    gt_MapInit = TriggerCreate("gt_MapInit_Func");
    TriggerAddEventMapInit(gt_MapInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 00 - Debug - Check for cinematic size setting
//--------------------------------------------------------------------------------------------------
bool gt_Init00DebugCheckforcinematicsizesetting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("DebugCinematic", 1);
    gv_cinematicDebugValue = BankValueGetAsInt(BankLastCreated(), "DebugCinematicShow", "Value");
    gv_cinematicDebugPlaylist[1] = gt_Scene01RaynorIntro;
    gv_cinematicDebugPlaylist[2] = null;
    gv_cinematicDebugPlaylist[3] = gt_Scene03ZeratulWarning;
    gv_cinematicDebugPlaylist[4] = gt_Scene04TychusIntro;
    gv_cinematicDebugPlaylist[5] = gt_Scene05EscapefromMarSara;
    gv_cinematicDebugPlaylist[6] = gt_Scene06ValerianIntro;
    gv_cinematicDebugPlaylist[7] = gt_Scene07BarFight;
    gv_cinematicDebugPlaylist[8] = gt_Scene08HansonEndA;
    gv_cinematicDebugPlaylist[9] = gt_Scene09ToshEndA;
    gv_cinematicDebugPlaylist[10] = gt_Scene10RaynorsDream;
    gv_cinematicDebugPlaylist[11] = gt_Scene11CharBattlefieldIntro;
    gv_cinematicDebugPlaylist[12] = gt_Scene12HornerEnd;
    gv_cinematicDebugPlaylist[13] = gt_Scene13HansonEndB;
    gv_cinematicDebugPlaylist[14] = gt_Scene14ToshEndB;
    gv_cinematicDebugPlaylist[15] = gt_Scene15KerriganIntro;
    gv_cinematicDebugPlaylist[16] = gt_Scene16CharIntro;
    gv_cinematicDebugPlaylist[17] = gt_Scene17CharBattlefieldEnd;
    if ((gv_cinematicDebugValue > 0)) {
        ConsoleCommand("resourcesnapshot", true, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init00DebugCheckforcinematicsizesetting_Init () {
    gt_Init00DebugCheckforcinematicsizesetting = TriggerCreate("gt_Init00DebugCheckforcinematicsizesetting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Story Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01StoryData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/AC401AF6"), false);
    TriggerExecute(gt_Init01AData, true, true);
    if ((libWoLC_gf_StoryState("IsStoryTransitionSave") == false) && (gv_isTransitionalLoad == false)) {
        TriggerExecute(gt_Init01CDerivedStates, true, false);
    }
    else {
        libWoLC_gf_SetStoryStateBoolean("IsStoryTransitionSave", false);
        TriggerExecute(gt_Init01CDerivedStatesTransitionalLoad, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01StoryData_Init () {
    gt_Init01StoryData = TriggerCreate("gt_Init01StoryData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01A - Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01AData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/CF302ED4"), false);
    gf_RegisterRoomStates();
    libWoLC_gf_ULoadCampaignData("TStory01");
    ConversationDataStateSetValue("Credits", libWoLC_gf_CreditsAvailable());
    libWoLC_gf_RegisterPersistentUserType("TStory01TransitionData");
    gf_TransitionalLoad();
    TriggerDebugOutput(1, StringExternal("Param/Value/82FE4BD6"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01AData_Init () {
    gt_Init01AData = TriggerCreate("gt_Init01AData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01C - Derived States
//--------------------------------------------------------------------------------------------------
bool gt_Init01CDerivedStates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_artifactCount;
    int lv_levelOld;
    int lv_levelNew;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/0BDD7A96"), false);
    gv_currentLocation = ge_RoomLocation_RoomLocationOthers;
    if ((libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Completed) == true)) {
        gv_currentLocation = ge_RoomLocation_RoomLocationOthers;
    }
    else if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == true)) {
        gv_currentLocation = ge_RoomLocation_RoomLocationChar;
    }
    else if ((libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed) == true)) {
        gv_currentLocation = ge_RoomLocation_RoomLocationHyperion;
    }
    else if ((true == true)) {
        gv_currentLocation = ge_RoomLocation_RoomLocationMarSara;
    }
    if ((libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_EnableRoomLocation(true, ge_RoomLocation_RoomLocationMarSara);
    }
    else {
        gf_EnableRoomLocation(false, ge_RoomLocation_RoomLocationMarSara);
    }
    if ((libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_EnableRoomLocation(true, ge_RoomLocation_RoomLocationHyperion);
    }
    else {
        gf_EnableRoomLocation(false, ge_RoomLocation_RoomLocationHyperion);
    }
    if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_EnableRoomLocation(true, ge_RoomLocation_RoomLocationChar);
    }
    else {
        gf_EnableRoomLocation(false, ge_RoomLocation_RoomLocationChar);
    }
    if ((libWoLC_gf_StoryState("ConscriptionOpened") == false) && (gf_RoomIsEnabled(ge_RoomID_RoomConscription) == true)) {
        gv_conscriptionOpenedNew = true;
        libWoLC_gf_SetStoryStateBoolean("ConscriptionOpened", true);
    }

    if ((libWoLC_gf_StoryState("ArmoryOpened") == false) && (gf_RoomIsEnabled(ge_RoomID_RoomArmory) == true)) {
        gv_armoryOpenedNew = true;
        libWoLC_gf_SetStoryStateBoolean("ArmoryOpened", true);
    }

    if ((libWoLC_gf_StoryState("CantinaOpened") == false) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
        gv_cantinaOpenedNew = true;
        libWoLC_gf_SetStoryStateBoolean("CantinaOpened", true);
    }

    if ((libWoLC_gf_StoryState("LabOpened") == false) && (gf_RoomIsEnabled(ge_RoomID_RoomLab) == true)) {
        gv_labOpenedNew = true;
        libWoLC_gf_SetStoryStateBoolean("LabOpened", true);
    }

    lv_artifactCount = 0;
    if ((libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed) == true)) {
        lv_artifactCount += 1;
    }

    if ((libWoLC_gf_MissionStatusCheck("TTychus01", libWoLC_ge_MissionStatus_Completed) == true)) {
        lv_artifactCount += 1;
    }

    if ((libWoLC_gf_MissionStatusCheck("TTychus02", libWoLC_ge_MissionStatus_Completed) == true)) {
        lv_artifactCount += 1;
    }

    if ((libWoLC_gf_MissionStatusCheck("TTychus04", libWoLC_ge_MissionStatus_Completed) == true)) {
        lv_artifactCount += 1;
    }

    if ((libWoLC_gf_MissionStatusCheck("TTychus05", libWoLC_ge_MissionStatus_Completed) == true)) {
        lv_artifactCount = 0;
    }

    if ((lv_artifactCount != libWoLC_gf_StoryStateInteger("LabArtifactCount"))) {
        ConversationDataStateSetValue("Hotspots|LabArtifact", 0);
        libWoLC_gf_SetStoryStateInteger("LabArtifactCount", lv_artifactCount);
    }

    if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (libWoLC_gf_MissionArmyCategoryUnlocked(libWoLC_gf_LastMission()) != null)) {
        ConversationDataStateSetValue("Hotspots|ArmoryTechConsole", 0);
    }

    ConversationDataStateSetValue("Hotspots|MarSaraBriefcase", 0);
    ConversationDataStateSetValue("Hotspots|BridgeStarmap", 0);
    ConversationDataStateSetValue("Hotspots|CharConsole", 0);
    if (((libWoLC_gf_MissionStatusCheck("TZeratul01", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul02", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul03", libWoLC_ge_MissionStatus_Available) == true) || (libWoLC_gf_MissionStatusCheck("TZeratul04", libWoLC_ge_MissionStatus_Available) == true))) {
        ConversationDataStateSetValue("Hotspots|LabIhanCrystal", 0);
    }

    if ((ConversationDataCanRun("Valerian", true) == true)) {
        ConversationDataStateSetValue("Hotspots|BridgeCommunicator", 0);
    }

    if ((libWoLC_gf_LastSuccessfulMission() == "TTychus05")) {
        gv_cantinaState = ge_CantinaStates_Broken;
    }
    else {
        gv_cantinaState = ge_CantinaStates_Normal;
    }
    TriggerExecute(gt_Init01CDerivedStatesTrophies, true, false);
    TriggerExecute(gt_Init01CDerivedStatesResearch, true, false);
    TriggerExecute(gt_Init01CDerivedStatesMerc, true, false);
    TriggerExecute(gt_Init01CDerivedStatesNews, true, false);
    TriggerDebugOutput(1, StringExternal("Param/Value/B52D277B"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01CDerivedStates_Init () {
    gt_Init01CDerivedStates = TriggerCreate("gt_Init01CDerivedStates_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01C - Derived States Trophies
//--------------------------------------------------------------------------------------------------
bool gt_Init01CDerivedStatesTrophies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) > 4)) {
        ConversationDataStateSetValue("Hotspots|CantinaTrophyClaw", 1);
    }

    if ((libWoLC_gf_MissionStatusCheck("THanson03A", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_LastSuccessfulMission() != "THanson03A")) {
        ConversationDataStateSetValue("Hotspots|CantinaTrophyHansonA", 1);
    }

    if ((libWoLC_gf_MissionStatusCheck("THanson03B", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_LastSuccessfulMission() != "THanson03B")) {
        ConversationDataStateSetValue("Hotspots|CantinaTrophyHansonB", 1);
    }

    if ((libWoLC_gf_MissionStatusCheck("TTosh03A", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_LastSuccessfulMission() != "TTosh03A")) {
        ConversationDataStateSetValue("Hotspots|CantinaTrophyToshA", 1);
    }

    if ((libWoLC_gf_MissionStatusCheck("TTosh03B", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_LastSuccessfulMission() != "TTosh03B")) {
        ConversationDataStateSetValue("Hotspots|CantinaTrophyToshB", 1);
    }

    if ((libWoLC_gf_MissionStatusCheck("THorner04", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_LastSuccessfulMission() != "THorner04")) {
        ConversationDataStateSetValue("Hotspots|CantinaTrophyHorner", 1);
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("Banshee", c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_MissionArmyCategoryUnlocked(libWoLC_gf_LastSuccessfulMission()) == "Banshee")) {
        ConversationDataStateSetValue("Hotspots|ArmoryBanshee", 1);
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("Firebat", c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_MissionArmyCategoryUnlocked(libWoLC_gf_LastSuccessfulMission()) == "Firebat")) {
        ConversationDataStateSetValue("Hotspots|ArmoryFirebat", 1);
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("Ghost", c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_MissionArmyCategoryUnlocked(libWoLC_gf_LastSuccessfulMission()) == "Ghost")) {
        ConversationDataStateSetValue("Hotspots|ArmoryGhostRifle", 1);
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("Marauder", c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_MissionArmyCategoryUnlocked(libWoLC_gf_LastSuccessfulMission()) == "Marauder")) {
        ConversationDataStateSetValue("Hotspots|ArmoryMarauder", 1);
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("Medivac", c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_MissionArmyCategoryUnlocked(libWoLC_gf_LastSuccessfulMission()) == "Medivac")) {
        ConversationDataStateSetValue("Hotspots|ArmoryMedivac", 1);
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("SiegeTank", c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_MissionArmyCategoryUnlocked(libWoLC_gf_LastSuccessfulMission()) == "SiegeTank")) {
        ConversationDataStateSetValue("Hotspots|ArmorySiegeTank", 1);
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("Spectre", c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_MissionArmyCategoryUnlocked(libWoLC_gf_LastSuccessfulMission()) == "Spectre")) {
        ConversationDataStateSetValue("Hotspots|ArmorySpectreCrates", 1);
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("Vulture", c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_MissionArmyCategoryUnlocked(libWoLC_gf_LastSuccessfulMission()) == "Vulture")) {
        ConversationDataStateSetValue("Hotspots|ArmorySpiderMine", 1);
    }

    if ((libWoLC_gf_ArmyCategoryStateCheck("VikingFighter", c_armyCategoryStateUnlocked) == true) && (libWoLC_gf_MissionArmyCategoryUnlocked(libWoLC_gf_LastSuccessfulMission()) == "VikingFighter")) {
        ConversationDataStateSetValue("Hotspots|ArmoryViking", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01CDerivedStatesTrophies_Init () {
    gt_Init01CDerivedStatesTrophies = TriggerCreate("gt_Init01CDerivedStatesTrophies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01C - Derived States Research
//--------------------------------------------------------------------------------------------------
bool gt_Init01CDerivedStatesResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) < 5)) {
        return true;
    }

    gv_researchUnlockedProt = libWoLC_gf_LabHasNewProtossResearch();
    gv_researchUnlockedZerg = libWoLC_gf_LabHasNewZergResearch();
    if (((gv_researchUnlockedProt == true) || (gv_researchUnlockedZerg == true))) {
        ConversationDataStateSetValue("LabResearchUnlocked|Any", 1);
    }
    else {
        ConversationDataStateSetValue("LabResearchUnlocked|Any", 0);
    }
    if ((gv_researchUnlockedProt == true)) {
        ConversationDataStateSetValue("Hotspots|LabConsole", 0);
        ConversationDataStateSetValue("Hotspots|LabTubeProtoss", 0);
    }
    else {
        ConversationDataStateSetValue("Hotspots|LabTubeProtoss", 1);
    }
    if ((gv_researchUnlockedZerg == true)) {
        ConversationDataStateSetValue("Hotspots|LabConsole", 0);
        ConversationDataStateSetValue("Hotspots|LabTubeZerg", 0);
    }
    else {
        ConversationDataStateSetValue("Hotspots|LabTubeZerg", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01CDerivedStatesResearch_Init () {
    gt_Init01CDerivedStatesResearch = TriggerCreate("gt_Init01CDerivedStatesResearch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01C - Derived States Merc
//--------------------------------------------------------------------------------------------------
bool gt_Init01CDerivedStatesMerc_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_NumberOfMissions(libWoLC_ge_MissionCountOptions_Completed) >= 4) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false) && (libWoLC_gf_MissionArmyCategoryUnlocked2(libWoLC_gf_LastMission()) != null)) {
        gv_mercUnlocked = true;
        ConversationDataStateSetValue("Hotspots|CantinaMercLaptop", 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01CDerivedStatesMerc_Init () {
    gt_Init01CDerivedStatesMerc = TriggerCreate("gt_Init01CDerivedStatesMerc_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01C - Derived States News
//--------------------------------------------------------------------------------------------------
bool gt_Init01CDerivedStatesNews_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == false) || (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == false) || (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == true))) {
        return true;
    }

    if ((gf_CurrentTVNews2() != null)) {
        if (((libWoLC_gf_LastMission() == "TRaynor01") || (libWoLC_gf_LastMission() == "TRaynor02"))) {
            ConversationDataStateSetValue("Hotspots|MarSaraTV", 0);
        }
        else {
            ConversationDataStateSetValue("Hotspots|CantinaTV", 0);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01CDerivedStatesNews_Init () {
    gt_Init01CDerivedStatesNews = TriggerCreate("gt_Init01CDerivedStatesNews_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01C - Derived States (Transitional Load)
//--------------------------------------------------------------------------------------------------
bool gt_Init01CDerivedStatesTransitionalLoad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/40029CEE"), false);
    if ((libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_EnableRoomLocation(true, ge_RoomLocation_RoomLocationMarSara);
    }
    else {
        gf_EnableRoomLocation(false, ge_RoomLocation_RoomLocationMarSara);
    }
    if ((libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_EnableRoomLocation(true, ge_RoomLocation_RoomLocationHyperion);
    }
    else {
        gf_EnableRoomLocation(false, ge_RoomLocation_RoomLocationHyperion);
    }
    if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_EnableRoomLocation(true, ge_RoomLocation_RoomLocationChar);
    }
    else {
        gf_EnableRoomLocation(false, ge_RoomLocation_RoomLocationChar);
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/8C70679F"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01CDerivedStatesTransitionalLoad_Init () {
    gt_Init01CDerivedStatesTransitionalLoad = TriggerCreate("gt_Init01CDerivedStatesTransitionalLoad_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 World
//--------------------------------------------------------------------------------------------------
bool gt_Init02World_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF4F4AF39_g;
    int autoF4F4AF39_u;
    unit autoF4F4AF39_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF4F4AF39_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoF4F4AF39_u = UnitGroupCount(autoF4F4AF39_g, c_unitCountAll);
    for (;; autoF4F4AF39_u -= 1) {
        autoF4F4AF39_var = UnitGroupUnitFromEnd(autoF4F4AF39_g, autoF4F4AF39_u);
        if (autoF4F4AF39_var == null) { break; }
        UnitSetState(autoF4F4AF39_var, c_unitStateHighlightable, false);
        UnitSetState(autoF4F4AF39_var, c_unitStateCursorable, false);
    }
    TriggerExecute(gt_Init02AActors, true, false);
    TriggerExecute(gt_Init02BRooms, true, false);
    TriggerExecute(gt_Init02CCameras, true, false);
    TriggerExecute(gt_Init02DHotspots, true, false);
    TriggerExecute(gt_Init02EStarmap, true, false);
    TriggerExecute(gt_Init02FScenes, true, false);
    TriggerExecute(gt_Init02GBriefingABChoice, true, false);
    TriggerExecute(gt_Init02HDebriefing, true, false);
    TriggerExecute(gt_Init02ITVNews, true, false);
    if ((gv_cinematicDebugValue == 0)) {
        TriggerExecute(gt_Init02JPreloading, true, false);
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_ResetClickablesLockCount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02World_Init () {
    gt_Init02World = TriggerCreate("gt_Init02World_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02A - Actors
//--------------------------------------------------------------------------------------------------
bool gt_Init02AActors_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_InitActors();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02AActors_Init () {
    gt_Init02AActors = TriggerCreate("gt_Init02AActors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02B - Rooms
//--------------------------------------------------------------------------------------------------
bool gt_Init02BRooms_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_armoryRoom = UnitFromId(9);
    gv_armoryRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, 0, 0), 0);
    if ((gf_RoomIsEnabled(ge_RoomID_RoomArmory) == true)) {
        gf_Init02BRoomsArmoryTechUnits();
        gf_Init02BRoomsArmoryWindowPlanets(libWoLC_gf_LastSuccessfulMission());
    }

    gv_bridgeRoom = UnitFromId(1);
    gv_bridgeRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(2), UnitFilter(0, 0, 0, 0), 0);
    gv_bridgeNose = UnitFromId(150);
    UnitGroupRemove(gv_bridgeRoomUnits, gv_bridgeNose);
    libNtve_gf_ShowHideUnit(gv_bridgeNose, false);
    gv_conscriptionRoom = UnitFromId(15);
    gv_conscriptionRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(13), UnitFilter(0, 0, 0, 0), 0);
    gv_cantinaRoom = UnitFromId(659);
    gv_cantinaRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(3), UnitFilter(0, 0, 0, 0), 0);
    gv_charRoom = UnitFromId(213);
    gv_charRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, 0, 0), 0);
    gv_corridorRoom = UnitFromId(126);
    gv_corridorRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(7), UnitFilter(0, 0, 0, 0), 0);
    gv_galaxyRoom = UnitFromId(5);
    gv_galaxyRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(8), UnitFilter(0, 0, 0, 0), 0);
    gv_labRoom = UnitFromId(200);
    gv_labRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(5), UnitFilter(0, 0, 0, 0), 0);
    if ((gf_RoomIsEnabled(ge_RoomID_RoomLab) == true)) {
        TriggerExecute(gt_Init02BRoomsLabResearchSamples, true, false);
    }

    gf_InitMarSaraBarUnits();
    gv_flagshipRoom = UnitFromId(50);
    gv_flagshipRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(10), UnitFilter(0, 0, 0, 0), 0);
    gv_observatoryRoom = UnitFromId(57);
    gv_observatoryRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(11), UnitFilter(0, 0, 0, 0), 0);
    gv_voidRoom = UnitFromId(43);
    gv_voidRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(9), UnitFilter(0, 0, 0, 0), 0);
    gf_Init02BRoomsArmoryWindowPlanets2();
    if ((gf_RoomIsEnabled(ge_RoomID_RoomMarSara) == true)) {
        ActorTextureGroupApplyGlobal("marsarabar");
    }
    else if ((gf_RoomIsEnabled(ge_RoomID_RoomBridge) == true)) {
        ActorTextureGroupApplyGlobal("bridge");
    }
    else if ((gf_RoomIsEnabled(ge_RoomID_RoomChar) == true)) {
        ActorTextureGroupApplyGlobal("battlefield");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02BRooms_Init () {
    gt_Init02BRooms = TriggerCreate("gt_Init02BRooms_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02B - Rooms (Lab Research Samples)
//--------------------------------------------------------------------------------------------------
bool gt_Init02BRoomsLabResearchSamples_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_loc;
    int lv_indexCurrent;
    int lv_index;
    string lv_tube;

    // Automatic Variable Declarations
    const int auto9C636442_ae = 5;
    const int auto9C636442_ai = 1;
    const int auto8EE7D76F_ae = 5;
    const int auto8EE7D76F_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loc = UnitGetPosition(gf_RoomUnit(ge_RoomID_RoomLab));
    if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") > 0) && (libWoLC_gf_RewardTotalEarned("ProtossResearch") < 5)) {
        lv_indexCurrent = 0;
        lv_tube = "SMHyperionMedLabProtossCryotube0HS";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") >= 5) && (libWoLC_gf_RewardTotalEarned("ProtossResearch") < 10)) {
        lv_indexCurrent = 1;
        lv_tube = "SMHyperionMedLabProtossCryotube1HS";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") >= 10) && (libWoLC_gf_RewardTotalEarned("ProtossResearch") < 15)) {
        lv_indexCurrent = 2;
        lv_tube = "SMHyperionMedLabProtossCryotube2HS";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") >= 15) && (libWoLC_gf_RewardTotalEarned("ProtossResearch") < 20)) {
        lv_indexCurrent = 3;
        lv_tube = "SMHyperionMedLabProtossCryotube3HS";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") >= 20) && (libWoLC_gf_RewardTotalEarned("ProtossResearch") < 25)) {
        lv_indexCurrent = 4;
        lv_tube = "SMHyperionMedLabProtossCryotube4HS";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") >= 25)) {
        lv_indexCurrent = 5;
        lv_tube = "SMHyperionMedLabProtossCryotube5HS";
    }
    else if (true) {
        lv_indexCurrent = -1;
    }
    lv_index = 0;
    for ( ; ( (auto9C636442_ai >= 0 && lv_index <= auto9C636442_ae) || (auto9C636442_ai < 0 && lv_index >= auto9C636442_ae) ) ; lv_index += auto9C636442_ai ) {
        if ((lv_index != lv_indexCurrent)) {
            if ((gv_labTubeSamples[1][lv_index] != null)) {
                UnitRemove(gv_labTubeSamples[1][lv_index]);
                gv_labTubeSamples[1][lv_index] = null;
            }

        }
        else {
            if ((gv_labTubeSamples[1][lv_index] == null)) {
                libNtve_gf_CreateUnitsAtPoint2(1, lv_tube, 0, 0, lv_loc);
                gv_labTubeSamples[1][lv_index] = UnitLastCreated();
                UnitGroupAdd(gv_labRoomUnits, UnitLastCreated());
                libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
            }

        }
    }
    if ((libWoLC_gf_RewardTotalEarned("ZergResearch") > 0) && (libWoLC_gf_RewardTotalEarned("ZergResearch") < 5)) {
        lv_indexCurrent = 0;
        lv_tube = "SMHyperionMedLabZergCryotube0HS";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ZergResearch") >= 5) && (libWoLC_gf_RewardTotalEarned("ZergResearch") < 10)) {
        lv_indexCurrent = 1;
        lv_tube = "SMHyperionMedLabZergCryotube1HS";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ZergResearch") >= 10) && (libWoLC_gf_RewardTotalEarned("ZergResearch") < 15)) {
        lv_indexCurrent = 2;
        lv_tube = "SMHyperionMedLabZergCryotube2HS";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ZergResearch") >= 15) && (libWoLC_gf_RewardTotalEarned("ZergResearch") < 20)) {
        lv_indexCurrent = 3;
        lv_tube = "SMHyperionMedLabZergCryotube3HS";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ZergResearch") >= 20) && (libWoLC_gf_RewardTotalEarned("ZergResearch") < 25)) {
        lv_indexCurrent = 4;
        lv_tube = "SMHyperionMedLabZergCryotube4HS";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ZergResearch") >= 25)) {
        lv_indexCurrent = 5;
        lv_tube = "SMHyperionMedLabZergCryotube5HS";
    }
    else if (true) {
        lv_indexCurrent = -1;
    }
    lv_index = 0;
    for ( ; ( (auto8EE7D76F_ai >= 0 && lv_index <= auto8EE7D76F_ae) || (auto8EE7D76F_ai < 0 && lv_index >= auto8EE7D76F_ae) ) ; lv_index += auto8EE7D76F_ai ) {
        if ((lv_index != lv_indexCurrent)) {
            if ((gv_labTubeSamples[2][lv_index] != null)) {
                UnitRemove(gv_labTubeSamples[2][lv_index]);
                gv_labTubeSamples[2][lv_index] = null;
            }

        }
        else {
            if ((gv_labTubeSamples[2][lv_index] == null)) {
                libNtve_gf_CreateUnitsAtPoint2(1, lv_tube, 0, 0, lv_loc);
                gv_labTubeSamples[2][lv_index] = UnitLastCreated();
                UnitGroupAdd(gv_labRoomUnits, UnitLastCreated());
                libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
            }

        }
    }
    if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") > 0)) {
        gf_AddClickable(gv_clickables, gv_labTubeProtoss, ge_RoomID_RoomLab, ge_ClickableCursorType_Look);
    }

    if ((libWoLC_gf_RewardTotalEarned("ZergResearch") > 0)) {
        gf_AddClickable(gv_clickables, gv_labTubeZerg, ge_RoomID_RoomLab, ge_ClickableCursorType_Look);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02BRoomsLabResearchSamples_Init () {
    gt_Init02BRoomsLabResearchSamples = TriggerCreate("gt_Init02BRoomsLabResearchSamples_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02C - Cameras
//--------------------------------------------------------------------------------------------------
bool gt_Init02CCameras_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_armorySwannCameras = UnitFromId(140);
    gv_bridgeHornerCameras = UnitFromId(396);
    gv_bridgeTychusCameras = UnitFromId(397);
    gv_bridgeHansonCameras = UnitFromId(49);
    gv_bridgeToshCameras = UnitFromId(53);
    gv_cantinaToshCameras = UnitFromId(137);
    gv_cantinaTychusCameras = UnitFromId(405);
    gv_cantinaYbarraCameras = UnitFromId(72);
    gv_labAdjutantCameras = UnitFromId(74);
    gv_labHansonCameras = UnitFromId(98);
    gv_labCowinCameras = UnitFromId(106);
    gv_marSaraTychusCameras = UnitFromId(242);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02CCameras_Init () {
    gt_Init02CCameras = TriggerCreate("gt_Init02CCameras_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02D - Hotspots
//--------------------------------------------------------------------------------------------------
bool gt_Init02DHotspots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_armoryConsole = UnitFromId(25);
    gv_armorySpaceLightning = UnitFromId(1018);
    gf_AddClickable(gv_clickables, gv_armoryConsole, ge_RoomID_RoomArmory, ge_ClickableCursorType_Activate);
    gf_AddClickable(gv_clickables, gv_armoryTechBanshee1, ge_RoomID_RoomArmory, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_armoryTechDropship, ge_RoomID_RoomArmory, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_armoryTechFirebat, ge_RoomID_RoomArmory, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_armoryTechGhostRifle, ge_RoomID_RoomArmory, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_armoryTechMarauder, ge_RoomID_RoomArmory, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_armoryTechTank, ge_RoomID_RoomArmory, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_armoryTechViking, ge_RoomID_RoomArmory, ge_ClickableCursorType_Look);
    UnitGroupAdd(gv_clickables, gv_armoryTechViking);
    gf_AddClickable(gv_clickables, gv_armoryTechSpectreCrates, ge_RoomID_RoomArmory, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_armoryTechSpiderMines, ge_RoomID_RoomArmory, ge_ClickableCursorType_Look);
    gv_bridgeMissionArchieves = UnitFromId(90);
    gv_bridgeCommunicator = UnitFromId(159);
    gv_bridgeDoor = UnitFromId(4);
    gv_bridgeStarmap = UnitFromId(118);
    gv_bridgeStarmapHolomap = UnitFromId(591);
    gv_bridgeWindow = UnitFromId(34);
    gf_AddClickable(gv_clickables, gv_bridgeMissionArchieves, ge_RoomID_RoomBridge, ge_ClickableCursorType_Activate);
    if ((gf_ActorWithConversation(ge_ActorID_ActorValerian) == true)) {
        gf_AddClickable(gv_clickables, gv_bridgeCommunicator, ge_RoomID_RoomBridge, ge_ClickableCursorType_Activate);
    }

    if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_AddClickable(gv_clickables, gv_bridgeStarmap, ge_RoomID_RoomBridge, ge_ClickableCursorType_Activate);
    }

    gv_cantinaArcade = UnitFromId(145);
    gv_cantinaBadge = UnitFromId(389);
    gv_cantinaDoor = UnitFromId(395);
    gv_cantinaJukebox = UnitFromId(157);
    gv_cantinaMercLabtop = UnitFromId(494);
    gv_cantinaProps = UnitFromId(201);
    gv_cantinaTV = UnitFromId(161);
    gv_cantinaTrophyFrame = UnitFromId(398);
    gv_cantinaTrophyHydraClaw = UnitFromId(483);
    gv_cantinaTrophyHansonA = UnitFromId(268);
    gv_cantinaTrophyHansonB = UnitFromId(292);
    gv_cantinaTrophyHorner = UnitFromId(265);
    gv_cantinaTrophyToshA = UnitFromId(293);
    gv_cantinaTrophyToshB = UnitFromId(266);
    gf_AddClickable(gv_clickables, gv_cantinaArcade, ge_RoomID_RoomCantina, ge_ClickableCursorType_Activate);
    gf_AddClickable(gv_clickables, gv_cantinaBadge, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaJukebox, ge_RoomID_RoomCantina, ge_ClickableCursorType_Activate);
    gf_AddClickable(gv_clickables, gv_cantinaMercLabtop, ge_RoomID_RoomCantina, ge_ClickableCursorType_Activate);
    gf_AddClickable(gv_clickables, gv_cantinaPoster1, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaPoster2, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaPoster3, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaPoster4, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaPoster5, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaTV, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaTrophyHydraClaw, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_cantinaTrophiesClickables, gv_cantinaTrophyHydraClaw, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_cantinaTrophiesClickables, gv_cantinaTrophyHansonA, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaTrophyHansonA, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_cantinaTrophiesClickables, gv_cantinaTrophyHansonB, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaTrophyHansonB, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_cantinaTrophiesClickables, gv_cantinaTrophyHorner, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaTrophyHorner, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_cantinaTrophiesClickables, gv_cantinaTrophyToshA, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaTrophyToshA, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_cantinaTrophiesClickables, gv_cantinaTrophyToshB, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gf_AddClickable(gv_clickables, gv_cantinaTrophyToshB, ge_RoomID_RoomCantina, ge_ClickableCursorType_Look);
    gv_charArtifact = UnitFromId(340);
    gv_charConsole = UnitFromId(341);
    gv_charRadio = UnitFromId(500);
    gv_charSet2 = UnitFromId(217);
    gv_charSet3 = UnitFromId(388);
    gv_charBansheeA = UnitFromId(1022);
    gv_charBansheeB = UnitFromId(1008);
    gv_charMutaA = UnitFromId(1021);
    gv_charMutaB = UnitFromId(1009);
    gv_charViking = UnitFromId(1007);
    gv_charGatlingGun = UnitFromId(1024);
    gv_charMarineA = UnitFromId(1012);
    gv_charMarineB = UnitFromId(1023);
    if ((libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Available) == true)) {
        gf_AddClickable(gv_clickables, gv_charArtifact, ge_RoomID_RoomChar, ge_ClickableCursorType_Look);
    }

    gf_AddClickable(gv_clickables, gv_charConsole, ge_RoomID_RoomChar, ge_ClickableCursorType_Activate);
    gv_labArtifact1 = UnitFromId(368);
    gv_labArtifact2 = UnitFromId(370);
    gv_labArtifact3 = UnitFromId(371);
    gv_labArtifact4 = UnitFromId(372);
    gv_labArtifactField = UnitFromId(202);
    gv_labConsole = UnitFromId(203);
    gv_labCrystal = UnitFromId(204);
    gv_labTubeProtoss = UnitFromId(982);
    gv_labTubeZerg = UnitFromId(983);
    gv_labDoor = UnitFromId(205);
    gv_labStageLight = UnitFromId(519);
    if ((ConversationDataCanRun("LabFidgetsArtifact", true) == true)) {
        gv_labArtifactsClickable = true;
    }

    if ((gv_labArtifactsClickable == true)) {
        gf_AddClickable(gv_clickables, gv_labArtifactField, ge_RoomID_RoomLab, ge_ClickableCursorType_Look);
        UnitGroupAdd(gv_labArtifacts, gv_labArtifactField);
        gf_AddClickable(gv_clickables, gv_labArtifact1, ge_RoomID_RoomLab, ge_ClickableCursorType_Look);
        UnitGroupAdd(gv_labArtifacts, gv_labArtifact1);
        gf_AddClickable(gv_clickables, gv_labArtifact2, ge_RoomID_RoomLab, ge_ClickableCursorType_Look);
        UnitGroupAdd(gv_labArtifacts, gv_labArtifact2);
        gf_AddClickable(gv_clickables, gv_labArtifact3, ge_RoomID_RoomLab, ge_ClickableCursorType_Look);
        UnitGroupAdd(gv_labArtifacts, gv_labArtifact3);
        gf_AddClickable(gv_clickables, gv_labArtifact4, ge_RoomID_RoomLab, ge_ClickableCursorType_Look);
        UnitGroupAdd(gv_labArtifacts, gv_labArtifact4);
    }

    gf_AddClickable(gv_clickables, gv_labConsole, ge_RoomID_RoomLab, ge_ClickableCursorType_Activate);
    gf_AddClickable(gv_clickables, gv_labCrystal, ge_RoomID_RoomLab, ge_ClickableCursorType_Activate);
    if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") > 0)) {
        gf_AddClickable(gv_clickables, gv_labTubeProtoss, ge_RoomID_RoomLab, ge_ClickableCursorType_Look);
    }

    if ((libWoLC_gf_RewardTotalEarned("ZergResearch") > 0)) {
        gf_AddClickable(gv_clickables, gv_labTubeZerg, ge_RoomID_RoomLab, ge_ClickableCursorType_Look);
    }

    gf_InitMarSaraBarHotspots();
    gv_observatoryPainting = UnitFromId(521);
    gv_observatoryProp = UnitFromId(179);
    gv_observatorySet2 = UnitFromId(185);
    gf_AddClickable(gv_clickables, gv_observatoryPainting, ge_RoomID_RoomObservatory, ge_ClickableCursorType_Look);
    TriggerExecute(gt_Init02DHotspotsPinboard, true, false);
    gf_TurnClickablesOnOff(gv_clickables, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02DHotspots_Init () {
    gt_Init02DHotspots = TriggerCreate("gt_Init02DHotspots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02D - Hotspots (Pinboard)
//--------------------------------------------------------------------------------------------------
bool gt_Init02DHotspotsPinboard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_highlightSound;

    // Automatic Variable Declarations
    string autoC073E18B_val;
    string autoD6664925_val;

    // Variable Initialization
    lv_highlightSound = SoundLink("EditorDefaultSound", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    autoC073E18B_val = libWoLC_gf_LastSuccessfulMission();
    if (autoC073E18B_val == null) {
        lv_highlightSound = SoundLink("SMMarSaraBarCorkboardBackgroundHighlight", -1);
    }
    else if (autoC073E18B_val == "TRaynor01") {
        lv_highlightSound = SoundLink("SMMarSaraBarCorkboardBackgroundStage2Highlight", -1);
    }
    else if (autoC073E18B_val == "TRaynor02") {
        lv_highlightSound = SoundLink("SMMarSaraBarCorkboardBackgroundStage3Highlight", -1);
    }
    else {
        lv_highlightSound = SoundLink("SMMarSaraBarCorkboardBackgroundHighlight", -1);
    }
    gf_AddPinboard(ge_Pinboard_PBMarSara, "MarSaraFidgetspinboardgeneric", gv_marSaraPinboard, ge_RoomID_RoomMarSara, "Zoom_04", "Fly 04", 1.833, "Zoom_04_Back", "Fly 04", 1.833, lv_highlightSound);
    gf_AddPinboardItem(ge_PinboardItem_PBItem01Armyphoto, "MarSaraFidgetsArmyphoto", null, SoundLink("SetPiece_Corkboard_Poster", c_soundIndexAny));
    gf_AddPinboardItem(ge_PinboardItem_PBItem02WantedPoster, "MarSaraFidgetswantedposter", UnitFromId(231), SoundLink("SetPiece_Corkboard_NewsPrint", c_soundIndexAny));
    gf_AddPinboardItem(ge_PinboardItem_PBItem03Fightforfreedomposter, "MarSaraFidgetsFreedomposter", UnitFromId(328), SoundLink("SetPiece_Corkboard_Poster", c_soundIndexAny));
    gf_AddPinboardItem(ge_PinboardItem_PBItem04Localrebelsavescolonistsnewspaperclipping, "MarSaraFidgetsLocalhero2", UnitFromId(21), SoundLink("SetPiece_Corkboard_NewsPrint", c_soundIndexAny));
    gf_AddPinboardItem(ge_PinboardItem_PBItem05VikingPolaroid, "MarSaraFidgetsvikingphoto2", UnitFromId(234), SoundLink("SetPiece_Corkboard_Poster", c_soundIndexAny));
    gf_AddPinboardItem(ge_PinboardItem_PBItem06Evolutionofrevolution, "MarSaraFidgetsEvolutionofrevolution2", UnitFromId(235), SoundLink("SetPiece_Corkboard_NewsPrint", c_soundIndexAny));
    gf_AddPinboardItem(ge_PinboardItem_PBItem07HeavensDevil, "MarSaraFidgetsHeavensDevils", UnitFromId(331), SoundLink("SetPiece_Corkboard_CardStock", c_soundIndexAny));
    gf_AddPinboardItem(ge_PinboardItem_PBItem08Hydrahunt, "MarSaraFidgetsHydrahunt", UnitFromId(351), SoundLink("SetPiece_Corkboard_CardStock", c_soundIndexAny));
    gf_AddPinboardItem(ge_PinboardItem_PBItem09KarriganPhoto, "MarSaraFidgetsKerriganPhoto", UnitFromId(856), SoundLink("SetPiece_Corkboard_CardStock", c_soundIndexAny));
    autoD6664925_val = libWoLC_gf_LastSuccessfulMission();
    if (autoD6664925_val == null) {
        gf_AddPinboardItemToPinboard(ge_Pinboard_PBMarSara, ge_PinboardItem_PBItem03Fightforfreedomposter);
        gf_AddPinboardItemToPinboard(ge_Pinboard_PBMarSara, ge_PinboardItem_PBItem04Localrebelsavescolonistsnewspaperclipping);
    }
    else if (autoD6664925_val == "TRaynor01") {
        gf_AddPinboardItemToPinboard(ge_Pinboard_PBMarSara, ge_PinboardItem_PBItem04Localrebelsavescolonistsnewspaperclipping);
        gf_AddPinboardItemToPinboard(ge_Pinboard_PBMarSara, ge_PinboardItem_PBItem05VikingPolaroid);
        gf_AddClickable(gv_clickables, gv_pinboardItems[(ge_PinboardItem_PBItem05VikingPolaroid)].lv_item, ge_RoomID_RoomMarSara, ge_ClickableCursorType_Look);
        gf_AddPinboardItemToPinboard(ge_Pinboard_PBMarSara, ge_PinboardItem_PBItem09KarriganPhoto);
        gf_AddClickable(gv_clickables, gv_pinboardItems[(ge_PinboardItem_PBItem09KarriganPhoto)].lv_item, ge_RoomID_RoomMarSara, ge_ClickableCursorType_Look);
    }
    else if (autoD6664925_val == "TRaynor02") {
        gf_AddPinboardItemToPinboard(ge_Pinboard_PBMarSara, ge_PinboardItem_PBItem03Fightforfreedomposter);
        gf_AddClickable(gv_clickables, gv_pinboardItems[(ge_PinboardItem_PBItem03Fightforfreedomposter)].lv_item, ge_RoomID_RoomMarSara, ge_ClickableCursorType_Look);
        gf_AddPinboardItemToPinboard(ge_Pinboard_PBMarSara, ge_PinboardItem_PBItem04Localrebelsavescolonistsnewspaperclipping);
        gf_AddPinboardItemToPinboard(ge_Pinboard_PBMarSara, ge_PinboardItem_PBItem05VikingPolaroid);
        gf_AddPinboardItemToPinboard(ge_Pinboard_PBMarSara, ge_PinboardItem_PBItem08Hydrahunt);
        gf_AddClickable(gv_clickables, gv_pinboardItems[(ge_PinboardItem_PBItem08Hydrahunt)].lv_item, ge_RoomID_RoomMarSara, ge_ClickableCursorType_Look);
        gf_AddPinboardItemToPinboard(ge_Pinboard_PBMarSara, ge_PinboardItem_PBItem09KarriganPhoto);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02DHotspotsPinboard_Init () {
    gt_Init02DHotspotsPinboard = TriggerCreate("gt_Init02DHotspotsPinboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02E - Starmap
//--------------------------------------------------------------------------------------------------
bool gt_Init02EStarmap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02EStarmap_Init () {
    gt_Init02EStarmap = TriggerCreate("gt_Init02EStarmap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02F - Scenes
//--------------------------------------------------------------------------------------------------
bool gt_Init02FScenes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sceneIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SceneInitData();
    if ((GameIsTestMap(true) == true)) {
        return true;
    }

    libWoLC_gf_RegisterSceneCallback("SceneTerran01RaynorIntro", gt_Scene01RaynorIntro);
    libWoLC_gf_RegisterSceneCallback("SceneTerran03ZeratulsWarning", gt_Scene03ZeratulWarning);
    libWoLC_gf_RegisterSceneCallback("SceneTerran04TychusIntro", gt_Scene04TychusIntro);
    libWoLC_gf_RegisterSceneCallback("SceneTerran05HornerBridgeIntro", gt_Scene05EscapefromMarSara);
    libWoLC_gf_RegisterSceneCallback("SceneTerran06ValerianIntro", gt_Scene06ValerianIntro);
    libWoLC_gf_RegisterSceneCallback("SceneTerran07BarFight", gt_Scene07BarFight);
    libWoLC_gf_RegisterSceneCallback("SceneTerran08HansonEndA", gt_Scene08HansonEndA);
    libWoLC_gf_RegisterSceneCallback("SceneTerran09ToshEndA", gt_Scene09ToshEndA);
    libWoLC_gf_RegisterSceneCallback("SceneTerran10RaynorsDream", gt_Scene10RaynorsDream);
    libWoLC_gf_RegisterSceneCallback("SceneTerran11CharBatltefield", gt_Scene11CharBattlefieldIntro);
    libWoLC_gf_RegisterSceneCallback("SceneTerran12HornerVictory", gt_Scene12HornerEnd);
    libWoLC_gf_RegisterSceneCallback("SceneTerran13HansonEndB", gt_Scene13HansonEndB);
    libWoLC_gf_RegisterSceneCallback("SceneTerran14ToshEndB", gt_Scene14ToshEndB);
    libWoLC_gf_RegisterSceneCallback("SceneTerran15KerriganIntro", gt_Scene15KerriganIntro);
    libWoLC_gf_RegisterSceneCallback("SceneTerran16CharIntro", gt_Scene16CharIntro);
    libWoLC_gf_RegisterSceneCallback("SceneTerran17CharBattlefieldEnd", gt_Scene17CharBattlefieldEnd);
    libWoLC_gf_RegisterSceneCallback("ScenePreRenderedBetterMarine", gt_Rendered02BetterMarine);
    libWoLC_gf_RegisterSceneCallback("ScenePreRenderedEnd", gt_Rendered04End);
    libWoLC_gf_RegisterSceneCallback("ScenePreRenderedOldRivals", gt_Rendered01OldRivals);
    libWoLC_gf_RegisterSceneCallback("ScenePreRenderedTheDream", gt_Rendered03TheDream);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02FScenes_Init () {
    gt_Init02FScenes = TriggerCreate("gt_Init02FScenes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02G - Briefing & ABChoice
//--------------------------------------------------------------------------------------------------
bool gt_Init02GBriefingABChoice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_briefing_MarSaraMain = UnitFromId(6);
    gv_briefing_MarSaraCenter = UnitFromId(7);
    gv_briefing_MarSaraLeft = UnitFromId(10);
    gv_briefing_MarSaraRight = UnitFromId(14);
    UnitGroupRemove(gv_marSaraRoomUnits, gv_briefing_MarSaraMain);
    UnitGroupRemove(gv_marSaraRoomUnits, gv_briefing_MarSaraCenter);
    UnitGroupRemove(gv_marSaraRoomUnits, gv_briefing_MarSaraLeft);
    UnitGroupRemove(gv_marSaraRoomUnits, gv_briefing_MarSaraRight);
    gv_briefing_BridgeMain = UnitFromId(334);
    gv_briefing_BridgeCenter = UnitFromId(338);
    gv_briefing_BridgeLeft = UnitFromId(336);
    gv_briefing_BridgeRight = UnitFromId(337);
    UnitGroupRemove(gv_bridgeRoomUnits, gv_briefing_BridgeMain);
    UnitGroupRemove(gv_bridgeRoomUnits, gv_briefing_BridgeCenter);
    UnitGroupRemove(gv_bridgeRoomUnits, gv_briefing_BridgeLeft);
    UnitGroupRemove(gv_bridgeRoomUnits, gv_briefing_BridgeRight);
    gv_briefing_CharMain = UnitFromId(561);
    gv_briefing_CharCenter = UnitFromId(559);
    gv_briefing_CharLeft = UnitFromId(560);
    gv_briefing_CharRight = UnitFromId(562);
    UnitGroupRemove(gv_charRoomUnits, gv_briefing_CharMain);
    UnitGroupRemove(gv_charRoomUnits, gv_briefing_CharCenter);
    UnitGroupRemove(gv_charRoomUnits, gv_briefing_CharLeft);
    UnitGroupRemove(gv_charRoomUnits, gv_briefing_CharRight);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02GBriefingABChoice_Init () {
    gt_Init02GBriefingABChoice = TriggerCreate("gt_Init02GBriefingABChoice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02H - Debriefing
//--------------------------------------------------------------------------------------------------
bool gt_Init02HDebriefing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02HDebriefing_Init () {
    gt_Init02HDebriefing = TriggerCreate("gt_Init02HDebriefing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02I - TVNews
//--------------------------------------------------------------------------------------------------
bool gt_Init02ITVNews_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWoLC_gf_RegisterPersistentUserType("TStory01TVNews");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02ITVNews_Init () {
    gt_Init02ITVNews = TriggerCreate("gt_Init02ITVNews_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02J - Preloading
//--------------------------------------------------------------------------------------------------
bool gt_Init02JPreloading_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_roomIndex;
    int lv_sceneIndex;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoF1DA09B7_g;
    int autoF1DA09B7_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Completed) == false)) {
        if (((libWoLC_gf_LastSuccessfulMission() != "TTychus04") || (libWoLC_gf_StoryScenePlayed("SceneTerran06ValerianIntro") == true))) {
            gf_ReloadLocations();
        }

    }

    gf_ScenePreloadInit();
    autoF1DA09B7_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoF1DA09B7_u = UnitGroupCount(autoF1DA09B7_g, c_unitCountAll);
    for (;; autoF1DA09B7_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoF1DA09B7_g, autoF1DA09B7_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02JPreloading_Init () {
    gt_Init02JPreloading = TriggerCreate("gt_Init02JPreloading_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 UI
//--------------------------------------------------------------------------------------------------
bool gt_Init03UI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowButtons, false);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowPings, false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03UI_Init () {
    gt_Init03UI = TriggerCreate("gt_Init03UI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init04Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    GameTimeOfDaySet("08:00:00");
    GameTimeOfDayPause(true);
    VisRevealArea(1, RegionEntireMap(), 0.0, false);
    CameraLockInput(1, true);
    CameraUseHeightSmoothing(1, false);
    CameraSetVerticalFieldOfView(1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Environment_Init () {
    gt_Init04Environment = TriggerCreate("gt_Init04Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Sounds
//--------------------------------------------------------------------------------------------------
bool gt_Init05Sounds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    gf_TurnMarSaraBarBackgroundSoundOnOff(false);
    gf_TurnLabBackgroundSoundOnOff(false);
    if ((gf_RoomIsEnabled(ge_RoomID_RoomMarSara) == true) && (libWoLC_gf_MissionStatusCheck("TRaynor01", libWoLC_ge_MissionStatus_Completed) == true)) {
        TriggerExecute(gt_MarSaraJukeboxInit, true, false);
    }

    if ((gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
        TriggerExecute(gt_CantinaJukeboxInit, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Sounds_Init () {
    gt_Init05Sounds = TriggerCreate("gt_Init05Sounds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Intro
//--------------------------------------------------------------------------------------------------
bool gt_Init06Intro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_isTransitionalLoad == true)) {
        TriggerExecute(gt_ReturnGeneric2, true, true);
        return true;
    }

    if ((GameIsTestMap(true) == true)) {
        TriggerExecute(gt_DebugAutomatedTesting, true, false);
        return true;
    }

    if ((libWoLC_gf_LastMap() == null)) {
        gf_DisplayMissionDebriefing(null);
        return true;
    }

    if ((libWoLC_gf_LastMap() == "TArcade")) {
        TriggerExecute(gt_ReturnToCantinaArcade, true, false);
        return true;
    }

    if ((libWoLC_gf_WC_CampaignMapTypeCheck(libWoLC_gf_LastMap(), c_mapKindMission) == false)) {
        TriggerExecute(gt_ReturnGeneric, true, false);
        return true;
    }

    if (((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == true) || (libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Completed) == true))) {
        TriggerExecute(gt_ReturnToBattleReport, true, false);
        return true;
    }

    if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == false)) {
        TriggerExecute(gt_ReturnGeneric, true, false);
        return true;
    }

    gf_DisplayMissionDebriefing(libWoLC_gf_LastMission());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Intro_Init () {
    gt_Init06Intro = TriggerCreate("gt_Init06Intro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Armory
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToArmory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWoLC_gf_SetStoryStateBoolean("ArmoryIntroDone", true);
    libWoLC_gf_SetStoryStateBoolean("ArmoryVisited", true);
    gf_GoToRoom(ge_RoomID_RoomArmory, false);
    gf_EnterRoom(ge_RoomID_RoomArmory, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToArmory_Init () {
    gt_ReturnToArmory = TriggerCreate("gt_ReturnToArmory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Bridge
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToBridge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(ge_RoomID_RoomBridge, false);
    gf_EnterRoom(ge_RoomID_RoomBridge, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToBridge_Init () {
    gt_ReturnToBridge = TriggerCreate("gt_ReturnToBridge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Cantina
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToCantina_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWoLC_gf_SetStoryStateBoolean("CantinaIntroDone", true);
    libWoLC_gf_SetStoryStateBoolean("CantinaVisited", true);
    gf_GoToRoom(ge_RoomID_RoomCantina, false);
    gf_EnterRoom(ge_RoomID_RoomCantina, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToCantina_Init () {
    gt_ReturnToCantina = TriggerCreate("gt_ReturnToCantina_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Cantina Arcade
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToCantinaArcade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gf_GoToRoom(ge_RoomID_RoomCantina, false);
    gf_EnterRoom(ge_RoomID_RoomCantina, false);
    gf_DisplayBackButton(gt_CantinaArcadeLeave);
    libNtve_gf_DisplayScreenButton((ge_ScreenButtonID_ButtonPlay), StringExternal("Param/Value/067BD733"), 240, 80, c_anchorBottomRight, 320, 70, gt_CantinaArcadePlay);
    gf_FromatBackPlayButton(libNtve_gf_ScreenButton((ge_ScreenButtonID_ButtonPlay)));
    DialogSetPositionRelative(libNtve_gf_ScreenButtonDialog((ge_ScreenButtonID_ButtonPlay)), c_anchorRight, libNtve_gf_ScreenButtonDialog((ge_ScreenButtonID_ButtonBack)), c_anchorLeft, 20, 0);
    gf_DisplayRoomChangePanel();
    gf_ReturnFlahsing();
    libCamp_gf_HideStoryUI(false, false);
    gf_HotspotZoom(gv_cantinaRoom, "Zoom_07", "Fly 07", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gv_cantinaRoom), gv_aNIMID_ZOOM, 100.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToCantinaArcade_Init () {
    gt_ReturnToCantinaArcade = TriggerCreate("gt_ReturnToCantinaArcade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Char
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToChar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(ge_RoomID_RoomChar, false);
    gf_EnterRoom(ge_RoomID_RoomChar, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToChar_Init () {
    gt_ReturnToChar = TriggerCreate("gt_ReturnToChar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Conscription
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToConscription_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(ge_RoomID_RoomConscription, false);
    gf_EnterRoom(ge_RoomID_RoomConscription, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToConscription_Init () {
    gt_ReturnToConscription = TriggerCreate("gt_ReturnToConscription_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Lab
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToLab_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWoLC_gf_SetStoryStateBoolean("LabIntroDone", true);
    libWoLC_gf_SetStoryStateBoolean("LabVisited", true);
    gf_GoToRoom(ge_RoomID_RoomLab, false);
    gf_EnterRoom(ge_RoomID_RoomLab, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToLab_Init () {
    gt_ReturnToLab = TriggerCreate("gt_ReturnToLab_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To MarSara
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToMarSara_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(ge_RoomID_RoomMarSara, false);
    gf_EnterRoom(ge_RoomID_RoomMarSara, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToMarSara_Init () {
    gt_ReturnToMarSara = TriggerCreate("gt_ReturnToMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Mission Archieves
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToBattleReport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    gf_HotspotZoom(gv_bridgeRoom, "BattleReport", "Fly", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomBridge)), gv_aNIMID_ZOOM, 100.0);
    gf_PauseNewItemInfo(true);
    gf_DisplayRoomChangePanel();
    libCamp_gf_HideStoryUI(false, false);
    gv_missionArchivesOn = true;
    if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == true) && (libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Completed) == false)) {
        gf_GoToRoom(ge_RoomID_RoomChar, false);
    }

    gf_GoToRoom(ge_RoomID_RoomMissionArchieves, false);
    if ((libWoLC_gf_MissionStatusCheck("TValerian01", libWoLC_ge_MissionStatus_Completed) == true)) {
        libWCUI_gf_DisplayArchives(gt_CharRoomUILeaveUI, gt_BridgeMissionArchivesSceneFinish);
    }
    else {
        libWCUI_gf_DisplayArchives(gt_BridgeMissionArchivesLeave, gt_BridgeMissionArchivesSceneFinish);
        gf_ReturnFlahsing();
    }
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ReturnFlahsing();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToBattleReport_Init () {
    gt_ReturnToBattleReport = TriggerCreate("gt_ReturnToBattleReport_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Observatory
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToObservatory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(ge_RoomID_RoomObservatory, false);
    gf_EnterRoom(ge_RoomID_RoomObservatory, false);
    libNtve_gf_DisplayScreenButton((ge_ScreenButtonID_ButtonHyperion), StringExternal("Param/Value/3745925A"), 300, 60, c_anchorBottomRight, 60, 70, gt_ReturnToObservatoryBackToBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToObservatory_Init () {
    gt_ReturnToObservatory = TriggerCreate("gt_ReturnToObservatory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To Observatory (Back To Bridge)
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToObservatoryBackToBridge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonHyperion));
    TriggerExecute(gt_DebriefingTTychus04_2, true, true);
    libCamp_gf_HideRoomChangePanel(true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToObservatoryBackToBridge_Init () {
    gt_ReturnToObservatoryBackToBridge = TriggerCreate("gt_ReturnToObservatoryBackToBridge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return (Generic)
//--------------------------------------------------------------------------------------------------
bool gt_ReturnGeneric_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_room;

    // Automatic Variable Declarations
    string auto31FF7788_val;
    int auto391AC1EA_val;

    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if ((libWoLC_gf_LastSuccessfulMission() == null)) {
        gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
        gf_StopAllTransmissionConversation();
        gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
        gf_SetIdleState(ge_IdleState_Busy);
        gf_TravelPanelDisplay(gt_MarSaraBriefcaseLeave);
        return true;
    }

    auto31FF7788_val = libWoLC_gf_LastMission();
    if (auto31FF7788_val == null) {
        return true;
    }
    else if (auto31FF7788_val == "TRaynor01") {
        lv_room = ge_RoomID_RoomMarSara;
    }
    else if (auto31FF7788_val == "TRaynor02") {
        lv_room = ge_RoomID_RoomMarSara;
    }
    else if (auto31FF7788_val == "TRaynor03") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true)) {
            lv_room = ge_RoomID_RoomBridge;
        }
        else {
            lv_room = ge_RoomID_RoomMarSara;
        }
    }
    else if (auto31FF7788_val == "TValerian01") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true)) {
            lv_room = ge_RoomID_RoomChar;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "TValerian02A") {
        lv_room = ge_RoomID_RoomChar;
    }
    else if (auto31FF7788_val == "TValerian02B") {
        lv_room = ge_RoomID_RoomChar;
    }
    else if (auto31FF7788_val == "TValerian03") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true)) {
            lv_room = ge_RoomID_RoomBridge;
        }
        else {
            lv_room = ge_RoomID_RoomChar;
        }
    }
    else if (auto31FF7788_val == "THanson01") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "THanson02") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "THanson03A") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "THanson03B") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "THorner01") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "THorner02") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomLab) == true)) {
            lv_room = ge_RoomID_RoomLab;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "THorner03") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "THorner04") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "THorner05S") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "TTychus01") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "TTychus02") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomLab) == true)) {
            lv_room = ge_RoomID_RoomLab;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "TTychus03") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "TTychus04") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "TTychus05") {
        lv_room = ge_RoomID_RoomBridge;
    }
    else if (auto31FF7788_val == "TTosh01") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "TTosh02") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "TTosh03A") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "TTosh03B") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomBridge;
        }
    }
    else if (auto31FF7788_val == "TZeratul01") {
        lv_room = ge_RoomID_RoomLab;
    }
    else if (auto31FF7788_val == "TZeratul02") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomLab;
        }
    }
    else if (auto31FF7788_val == "TZeratul03") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomLab;
        }
    }
    else if (auto31FF7788_val == "TZeratul04") {
        if ((libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true)) {
            lv_room = ge_RoomID_RoomCantina;
        }
        else {
            lv_room = ge_RoomID_RoomLab;
        }
    }
    else {
    }
    if ((gv_returned == false)) {
        gf_ReturnTimestamp();
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/DE8C56DB") + gf_RoomName(lv_room)), false);
    auto391AC1EA_val = lv_room;
    if (auto391AC1EA_val == ge_RoomID_RoomConscription) {
        TriggerExecute(gt_ReturnToConscription, true, true);
    }
    else if (auto391AC1EA_val == ge_RoomID_RoomArmory) {
        TriggerExecute(gt_ReturnToArmory, true, true);
    }
    else if (auto391AC1EA_val == ge_RoomID_RoomBridge) {
        TriggerExecute(gt_ReturnToBridge, true, true);
    }
    else if (auto391AC1EA_val == ge_RoomID_RoomCantina) {
        TriggerExecute(gt_ReturnToCantina, true, true);
    }
    else if (auto391AC1EA_val == ge_RoomID_RoomChar) {
        TriggerExecute(gt_ReturnToChar, true, true);
    }
    else if (auto391AC1EA_val == ge_RoomID_RoomLab) {
        TriggerExecute(gt_ReturnToLab, true, true);
    }
    else if (auto391AC1EA_val == ge_RoomID_RoomMarSara) {
        TriggerExecute(gt_ReturnToMarSara, true, true);
    }
    else if (auto391AC1EA_val == ge_RoomID_RoomObservatory) {
        TriggerExecute(gt_ReturnToObservatory, true, true);
    }
    else {
    }
    gf_ReturnFlahsing();
    Wait(0.2, c_timeReal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((libWoLC_gf_MissionStatusCheck("TTychus02", libWoLC_ge_MissionStatus_Completed) == true)) {
        libWoLC_gf_CampaignAwardAchievement("IhanCrystal");
    }

    if ((gv_returned == false)) {
        gf_StartTipHint();
    }

    Wait(0.5, c_timeReal);
    libCamp_gf_HideStoryUI(true, true);
    gf_DisplayRoomChangePanel();
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_ReturnNewItemInfo();
    if ((lv_room == ge_RoomID_RoomObservatory)) {
        libCamp_gf_HideRoomChangePanel(false);
    }

    if ((lv_room == ge_RoomID_RoomBridge)) {
        TriggerExecute(gt_DebriefingLabCantinaOpened, true, false);
        TriggerExecute(gt_DebriefingCommunicatorUnlocked, true, false);
    }

    if ((gv_returned == false)) {
        gv_returned = true;
    }

    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnGeneric_Init () {
    gt_ReturnGeneric = TriggerCreate("gt_ReturnGeneric_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return (Transitional Load)
//--------------------------------------------------------------------------------------------------
bool gt_ReturnGeneric2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_room;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/544F0CE0"), false);
    gf_TurnClickablesOnOff(gv_clickables, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/C710CD1E") + gf_RoomName(gv_currentRoom)), false);
    lv_room = gv_currentRoom;
    gv_currentRoom = ge_RoomID_RoomNone;
    gf_GoToRoom(lv_room, false);
    gf_EnterRoom(lv_room, false);
    if ((gv_abChoiceCurrent != null)) {
        TriggerExecute(gt_ReturnABChoice, true, false);
        return true;
    }

    gf_ReturnFlahsing();
    Wait(0.2, c_timeReal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_StartTipHint();
    Wait(0.5, c_timeReal);
    libCamp_gf_HideStoryUI(true, true);
    gf_DisplayRoomChangePanel();
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_ReturnNewItemInfo();
    gv_returned = true;
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnGeneric2_Init () {
    gt_ReturnGeneric2 = TriggerCreate("gt_ReturnGeneric2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return (AB Choice)
//--------------------------------------------------------------------------------------------------
bool gt_ReturnABChoice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto2564F5F7_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, true);
    gv_aBChoiceSaved2 = true;
    gv_aBChoiceSaved = true;
    auto2564F5F7_val = gv_abChoiceCurrent;
    if (auto2564F5F7_val == "THanson03A") {
        gf_GoToRoom(ge_RoomID_RoomBridge, false);
        gf_MissionLaunchWithBriefing("THanson03A", gv_abChoiceDifficulty);
    }
    else if (auto2564F5F7_val == "TTosh03A") {
        gf_GoToRoom(ge_RoomID_RoomBridge, false);
        gf_MissionLaunchWithBriefing("TTosh03A", gv_abChoiceDifficulty);
    }
    else if (auto2564F5F7_val == "TValerian02A") {
        gf_GoToRoom(ge_RoomID_RoomChar, false);
        gf_MissionLaunchWithBriefing("TValerian02A", gv_abChoiceDifficulty);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnABChoice_Init () {
    gt_ReturnABChoice = TriggerCreate("gt_ReturnABChoice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Quits Storymode
//--------------------------------------------------------------------------------------------------
bool gt_PlayerQuitsStorymode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_aBChoicePanel != c_invalidDialogId)) {
        DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    libCamp_gf_HideStoryUI(false, false);
    gf_GoToRoom(ge_RoomID_RoomVoid, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerQuitsStorymode_Init () {
    gt_PlayerQuitsStorymode = TriggerCreate("gt_PlayerQuitsStorymode_Func");
    TriggerAddEventGameMenuItemSelected(gt_PlayerQuitsStorymode, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Story Save
//--------------------------------------------------------------------------------------------------
bool gt_StorySave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TransitionalSave();
    libWoLC_gf_SetStoryStateBoolean("IsStoryTransitionSave", true);
    libWoLC_gf_PrepareForStoryModeTransitionalSave();
    libWoLC_gf_SetStoryStateBoolean("IsStoryTransitionSave", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorySave_Init () {
    gt_StorySave = TriggerCreate("gt_StorySave_Func");
    TriggerAddEventSaveGame(gt_StorySave);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End of Time
//--------------------------------------------------------------------------------------------------
bool gt_EndofTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWoLC_gf_PrepareForStoryMode(c_gameOverVictory, PlayerDifficulty(1));
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndofTime_Init () {
    gt_EndofTime = TriggerCreate("gt_EndofTime_Func");
    TriggerAddEventTimeElapsed(gt_EndofTime, 32767.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Debug
//--------------------------------------------------------------------------------------------------
bool gt_EnableDebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_isForDebug = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDebug_Init () {
    gt_EnableDebug = TriggerCreate("gt_EnableDebug_Func");
    TriggerAddEventChatMessage(gt_EnableDebug, 1, "enabledebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Debug
//--------------------------------------------------------------------------------------------------
bool gt_DisableDebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_isForDebug = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableDebug_Init () {
    gt_DisableDebug = TriggerCreate("gt_DisableDebug_Func");
    TriggerAddEventChatMessage(gt_DisableDebug, 1, "disabledebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Automated Testing
//--------------------------------------------------------------------------------------------------
bool gt_DebugAutomatedTesting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4777B56B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsTestMap(true) == false)) {
        return true;
    }

    BankLoad("DebugCinematic", 1);
    BankValueSetFromInt(BankLastCreated(), "DebugCinematicShow", "Value", 0);
    BankSave(BankLastCreated());
    if ((gv_cinematicDebugValue == 0)) {
        TriggerExecute(gt_Scene06ValerianIntro, true, true);
        Wait(0.2, c_timeGame);
        TriggerExecute(gt_Animatic12HornerEnd, true, true);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(ge_RoomID_RoomArmory, false);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(ge_RoomID_RoomBridge, false);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(ge_RoomID_RoomCantina, false);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(ge_RoomID_RoomChar, false);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(ge_RoomID_RoomLab, false);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(ge_RoomID_RoomMarSara, false);
        Wait(1.0, c_timeGame);
        gf_GoToRoom(ge_RoomID_RoomGalaxy, false);
        Wait(1.0, c_timeGame);
        gf_GoToRoom(ge_RoomID_RoomBridge, false);
        Wait(1.0, c_timeGame);
        ConsoleCommand("exit", true, true);
    }
    else {
        if ((gv_cinematicDebugValue <= 17)) {
            TriggerExecute(gv_cinematicDebugPlaylist[gv_cinematicDebugValue], true, true);
            ConsoleCommand("resourcesnapshot", true, true);
            Wait(0.2, c_timeGame);
            ConsoleCommand("exit", true, true);
            return true;
        }
        else {
            CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
            auto4777B56B_val = gv_cinematicDebugValue;
            if (auto4777B56B_val == 20) {
                gf_ChangeRoom(ge_RoomID_RoomMarSara, false);
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[ge_ActorID_ActorTychus].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorAdjutant));
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
                PerfTestStart(StringExternal("Param/Value/C52B9B2D"));
            }
            else if (auto4777B56B_val == 21) {
                gf_ChangeRoom(ge_RoomID_RoomBridge, false);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHall));
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[ge_ActorID_ActorTychus].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[ge_ActorID_ActorStetmann].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorStetmann));
                PerfTestStart(StringExternal("Param/Value/657DE8C0"));
            }
            else if (auto4777B56B_val == 22) {
                gf_ChangeRoom(ge_RoomID_RoomArmory, false);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorSwann));
                PerfTestStart(StringExternal("Param/Value/BF15A5E2"));
            }
            else if (auto4777B56B_val == 23) {
                gf_ChangeRoom(ge_RoomID_RoomCantina, false);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorCooperBarTender));
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHillMercContact));
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[ge_ActorID_ActorTosh].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTosh));
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[ge_ActorID_ActorTychus].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
                PerfTestStart(StringExternal("Param/Value/60DB1198"));
            }
            else if (auto4777B56B_val == 24) {
                gf_ChangeRoom(ge_RoomID_RoomLab, false);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorStetmann));
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[ge_ActorID_ActorHanson].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHanson));
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[ge_ActorID_ActorAdjutantConfederate].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate));
                PerfTestStart(StringExternal("Param/Value/F2D8EFC3"));
            }
            else if (auto4777B56B_val == 25) {
                gf_ChangeRoom(ge_RoomID_RoomChar, false);
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[ge_ActorID_ActorRaynorMarine].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[ge_ActorID_ActorTychus].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
                gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorWarfield));
                PerfTestStart(StringExternal("Param/Value/883DC614"));
            }
            else {
            }
            Wait(20.0, c_timeGame);
            PerfTestStop();
            ConsoleCommand("resourcesnapshot", true, true);
            Wait(0.2, c_timeGame);
            ConsoleCommand("exit", true, true);
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugAutomatedTesting_Init () {
    gt_DebugAutomatedTesting = TriggerCreate("gt_DebugAutomatedTesting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Up the Night
//--------------------------------------------------------------------------------------------------
bool gt_TerranUptheNight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_terranUpTheNightPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_terranUpTheNightPlaying = true;
    if ((gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_muted == false) && (gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_music != null)) {
        gf_FadeJukeboxVolumeOverTime(gv_marSaraJukeboxID);
    }

    if ((gv_jukeboxes[gv_cantinaJukeboxID].lv_playback.lv_muted == false) && (gv_jukeboxes[gv_cantinaJukeboxID].lv_playback.lv_music != null)) {
        gf_FadeJukeboxVolumeOverTime(gv_cantinaJukeboxID);
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "EasterEggMusic_TerranUpTheNight", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait("EasterEggMusic_TerranUpTheNight");
    gv_terranUpTheNightPlaying = false;
    if ((gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_muted == false) && (gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_music != null)) {
        SoundSetVolume(gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_music, 100.0);
    }

    if ((gv_jukeboxes[gv_cantinaJukeboxID].lv_playback.lv_muted == false) && (gv_jukeboxes[gv_cantinaJukeboxID].lv_playback.lv_music != null)) {
        SoundSetVolume(gv_jukeboxes[gv_cantinaJukeboxID].lv_playback.lv_music, 100.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranUptheNight_Init () {
    gt_TerranUptheNight = TriggerCreate("gt_TerranUptheNight_Func");
    TriggerAddEventChatMessage(gt_TerranUptheNight, c_playerAny, "OverEngineeredCodPiece", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugSceneCreateDialog
//--------------------------------------------------------------------------------------------------
bool gt_DebugSceneCreateDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexScene;

    // Automatic Variable Declarations
    int auto93787BF0_ai;
    int auto93787BF0_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(700, 1150, c_anchorCenter, -390, -600, true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    gv_debugSceneDialog = DialogLastCreated();
    auto93787BF0_ai = 1;
    auto93787BF0_ae = UserDataInstanceCount("Scenes")+1;
    while (auto93787BF0_ai < auto93787BF0_ae) {
        lv_indexScene = UserDataInstance("Scenes", auto93787BF0_ai);
        gf_DebugSceneAddButton(600, 45, 50, gv_debugSceneRowY, libWoLC_gf_StorySceneName(lv_indexScene), libWoLC_gf_StorySceneCallback(lv_indexScene), StringToText(""));
        gv_debugSceneRowY = (gv_debugSceneRowY + 48);
        auto93787BF0_ai = auto93787BF0_ai+1;
    }
    gf_DebugSceneAddButton(250, 50, 225, gv_debugSceneRowY, StringExternal("Param/Value/0653CCF1"), gt_DebugSceneExit, StringToText(""));
    gv_debugSceneExitButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugScenePanelCloseButton", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSceneCreateDialog_Init () {
    gt_DebugSceneCreateDialog = TriggerCreate("gt_DebugSceneCreateDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugSceneClicked
//--------------------------------------------------------------------------------------------------
bool gt_DebugSceneClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_roomSaved;

    // Automatic Variable Declarations
    int auto507E261E_ae;
    const int auto507E261E_ai = 1;

    // Variable Initialization
    lv_roomSaved = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_debugSceneExitButton)) {
        TriggerExecute(gt_DebugSceneExit, true, false);
        return true;
    }

    auto507E261E_ae = gv_debugSceneCount;
    lv_index = 1;
    for ( ; ( (auto507E261E_ai >= 0 && lv_index <= auto507E261E_ae) || (auto507E261E_ai < 0 && lv_index >= auto507E261E_ae) ) ; lv_index += auto507E261E_ai ) {
        if ((EventDialogControl() == gv_debugSceneButtons[lv_index])) {
            lv_roomSaved = gv_currentRoom;
            DialogSetVisible(gv_debugSceneDialog, PlayerGroupAll(), false);
            CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
            TriggerEnable(gt_DebugScenePerformanceTestGetFPS, true);
            PerfTestStart(gv_debugSceneLabels[lv_index]);
            TriggerExecute(gv_debugSceneCallbacks[lv_index], true, true);
            PerfTestStop();
            TriggerEnable(gt_DebugScenePerformanceTestGetFPS, false);
            CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
            DialogSetVisible(gv_debugSceneDialog, PlayerGroupAll(), true);
            gf_ChangeRoom(lv_roomSaved, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSceneClicked_Init () {
    gt_DebugSceneClicked = TriggerCreate("gt_DebugSceneClicked_Func");
    TriggerAddEventDialogControl(gt_DebugSceneClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugSceneExit
//--------------------------------------------------------------------------------------------------
bool gt_DebugSceneExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_debugSceneDialog, PlayerGroupAll(), false);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSceneExit_Init () {
    gt_DebugSceneExit = TriggerCreate("gt_DebugSceneExit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug SCENE
//--------------------------------------------------------------------------------------------------
bool gt_DebugSCENE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_TurnClickablesOnOff(gv_clickables, false);
    TriggerExecute(gt_DebugSceneCreateDialog, true, false);
    DialogSetVisible(gv_debugSceneDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSCENE_Init () {
    gt_DebugSCENE = TriggerCreate("gt_DebugSCENE_Func");
    TriggerAddEventCheatUsed(gt_DebugSCENE, c_playerAny, c_gameCheatScene);
    TriggerAddEventChatMessage(gt_DebugSCENE, 1, "-scene", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Scene Performance Test Get FPS
//--------------------------------------------------------------------------------------------------
bool gt_DebugScenePerformanceTestGetFPS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PerfTestGetFPS();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugScenePerformanceTestGetFPS_Init () {
    gt_DebugScenePerformanceTestGetFPS = TriggerCreate("gt_DebugScenePerformanceTestGetFPS_Func");
    TriggerEnable(gt_DebugScenePerformanceTestGetFPS, false);
    TriggerAddEventTimePeriodic(gt_DebugScenePerformanceTestGetFPS, 0.06, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoomCheat Button Response
//--------------------------------------------------------------------------------------------------
bool gt_RoomCheatButtonResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_room;

    // Automatic Variable Declarations
    int auto8421548E_val;

    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;

    // Conditions
    if (testConds) {
        if (!((gv_roomCheatDialog != c_invalidDialogId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_room = ge_RoomID_RoomNone;
    auto8421548E_val = EventDialogControl();
    if (auto8421548E_val == gv_roomCheatButtonMarSara) {
        lv_room = ge_RoomID_RoomMarSara;
    }
    else if (auto8421548E_val == gv_roomCheatButtonBridge) {
        lv_room = ge_RoomID_RoomBridge;
    }
    else if (auto8421548E_val == gv_roomCheatButtonArmory) {
        lv_room = ge_RoomID_RoomArmory;
    }
    else if (auto8421548E_val == gv_roomCheatButtonCantina) {
        lv_room = ge_RoomID_RoomCantina;
    }
    else if (auto8421548E_val == gv_roomCheatButtonLab) {
        lv_room = ge_RoomID_RoomLab;
    }
    else if (auto8421548E_val == gv_roomCheatButtonChar) {
        lv_room = ge_RoomID_RoomChar;
    }
    else if (auto8421548E_val == gv_roomCheatButtonObservatory) {
        lv_room = ge_RoomID_RoomObservatory;
    }
    else {
    }
    DialogSetVisible(gv_roomCheatDialog, PlayerGroupAll(), false);
    if ((lv_room == ge_RoomID_RoomNone)) {
        return true;
    }

    gf_ChangeRoom(lv_room, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoomCheatButtonResponse_Init () {
    gt_RoomCheatButtonResponse = TriggerCreate("gt_RoomCheatButtonResponse_Func");
    TriggerAddEventDialogControl(gt_RoomCheatButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug ROOM
//--------------------------------------------------------------------------------------------------
bool gt_DebugROOM_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayRoomCheatDialog(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugROOM_Init () {
    gt_DebugROOM = TriggerCreate("gt_DebugROOM_Func");
    TriggerAddEventChatMessage(gt_DebugROOM, 1, "ROOM", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug ROOM CHEAT
//--------------------------------------------------------------------------------------------------
bool gt_DebugROOMCHEAT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayRoomCheatDialog(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugROOMCHEAT_Init () {
    gt_DebugROOMCHEAT = TriggerCreate("gt_DebugROOMCHEAT_Func");
    TriggerAddEventChatMessage(gt_DebugROOMCHEAT, 1, "ROOMCHEAT", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug TESTCAMERA
//--------------------------------------------------------------------------------------------------
bool gt_DebugTESTCAMERA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_cameraName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cameraName = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_marSaraTychusCameras), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    CameraUseModel(1, gv_marSaraTychusCameras, "Pan to Character Medium", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugTESTCAMERA_Init () {
    gt_DebugTESTCAMERA = TriggerCreate("gt_DebugTESTCAMERA_Func");
    TriggerAddEventChatMessage(gt_DebugTESTCAMERA, 1, "TESTCAM", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug GAMECAMERA
//--------------------------------------------------------------------------------------------------
bool gt_DebugGAMECAMERA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraLockInput(1, false);
    CameraApplyInfo(1, CameraInfoDefault(), 0.0, -1, 10, false);
    gv_debugStoryModeEnabled = false;
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugGAMECAMERA_Init () {
    gt_DebugGAMECAMERA = TriggerCreate("gt_DebugGAMECAMERA_Func");
    TriggerAddEventChatMessage(gt_DebugGAMECAMERA, 1, "GAMECAMERA", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug GLOBALVIEW
//--------------------------------------------------------------------------------------------------
bool gt_DebugGLOBALVIEW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(1, CameraInfoFromId(65), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugGLOBALVIEW_Init () {
    gt_DebugGLOBALVIEW = TriggerCreate("gt_DebugGLOBALVIEW_Func");
    TriggerAddEventChatMessage(gt_DebugGLOBALVIEW, 1, "GLOBALVIEW", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug UNLOCKCAMERA
//--------------------------------------------------------------------------------------------------
bool gt_DebugUNLOCKCAMERA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup autoB89CC9F3_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("debugcamera 1", true, true);
    autoB89CC9F3_g = PlayerGroupAll();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoB89CC9F3_g, lv_p);
        if (lv_p < 0) { break; }
        libNtve_gf_StoryMode(PlayerGroupSingle(lv_p), false);
        CameraLockInput(lv_p, false);
        CameraApplyInfo(lv_p, CameraInfoFromId(65), 0.0, -1, 10, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugUNLOCKCAMERA_Init () {
    gt_DebugUNLOCKCAMERA = TriggerCreate("gt_DebugUNLOCKCAMERA_Func");
    TriggerAddEventChatMessage(gt_DebugUNLOCKCAMERA, 1, "UNLOCKCAMERA", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoomCamera Button Response
//--------------------------------------------------------------------------------------------------
bool gt_RoomCameraButtonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8F455333_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8F455333_val = EventDialogControl();
    if (auto8F455333_val == gv_roomCameraButtonMarSara) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(ge_RoomID_RoomMarSara, true);
        gf_ViewRoomCamera(ge_RoomID_RoomMarSara, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonBridge) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
        gf_ViewRoomCamera(ge_RoomID_RoomBridge, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonConscription) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(ge_RoomID_RoomConscription, true);
        gf_ViewRoomCamera(ge_RoomID_RoomConscription, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonArmory) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(ge_RoomID_RoomArmory, true);
        gf_ViewRoomCamera(ge_RoomID_RoomArmory, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonCantina) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(ge_RoomID_RoomCantina, true);
        gf_ViewRoomCamera(ge_RoomID_RoomCantina, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonLab) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(ge_RoomID_RoomLab, true);
        gf_ViewRoomCamera(ge_RoomID_RoomLab, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonChar) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(ge_RoomID_RoomChar, true);
        gf_ViewRoomCamera(ge_RoomID_RoomChar, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonCancel) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoomCameraButtonResponse_Init () {
    gt_RoomCameraButtonResponse = TriggerCreate("gt_RoomCameraButtonResponse_Func");
    TriggerAddEventDialogControl(gt_RoomCameraButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug ROOM CAMERA
//--------------------------------------------------------------------------------------------------
bool gt_DebugROOMCAMERA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayRoomCameraDialog(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugROOMCAMERA_Init () {
    gt_DebugROOMCAMERA = TriggerCreate("gt_DebugROOMCAMERA_Func");
    TriggerAddEventChatMessage(gt_DebugROOMCAMERA, 1, "ROOMCAMERA", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Briefing
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Briefing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_Debug_CreateBriefingDialog();
    gv_debug_BriefingCheating = true;
    DialogSetVisible(gv_debug_BriefingDialog, PlayerGroupAll(), true);
    gf_BriefingPreload(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Briefing_Init () {
    gt_Debug_Briefing = TriggerCreate("gt_Debug_Briefing_Func");
    TriggerAddEventChatMessage(gt_Debug_Briefing, 1, "BRIEFING", true);
    TriggerAddEventChatMessage(gt_Debug_Briefing, 1, "-briefing", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_BriefingDialogMissionButtonResponse
//--------------------------------------------------------------------------------------------------
bool gt_Debug_BriefingDialogMissionButtonResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    string lv_map;
    int lv_room;

    // Automatic Variable Declarations
    int auto948A4385_ae;
    const int auto948A4385_ai = 1;

    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_room = gv_currentRoom;
    lv_map = null;
    auto948A4385_ae = gv_debug_BriefingMissioniButtonCount;
    lv_index = 0;
    for ( ; ( (auto948A4385_ai >= 0 && lv_index <= auto948A4385_ae) || (auto948A4385_ai < 0 && lv_index >= auto948A4385_ae) ) ; lv_index += auto948A4385_ai ) {
        if ((gv_debug_BriefingMissioniButton[lv_index] == EventDialogControl())) {
            lv_map = (DataTableGetString(true, ("DEBUG_Briefing_Button_" + IntToString(lv_index))));
            break;
        }

    }
    if ((lv_map == null)) {
        return true;
    }

    if ((gf_MissionBriefingCallback(lv_map) == null)) {
        return true;
    }

    DialogSetVisible(gv_debug_BriefingDialog, PlayerGroupAll(), false);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    TriggerExecute(gf_MissionBriefingPreload(lv_map), true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gf_MissionBriefingCallback(lv_map), true, true);
    gf_GoToRoom(lv_room, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    DialogSetVisible(gv_debug_BriefingDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_BriefingDialogMissionButtonResponse_Init () {
    gt_Debug_BriefingDialogMissionButtonResponse = TriggerCreate("gt_Debug_BriefingDialogMissionButtonResponse_Func");
    TriggerAddEventDialogControl(gt_Debug_BriefingDialogMissionButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_BriefingDialogClose
//--------------------------------------------------------------------------------------------------
bool gt_Debug_BriefingDialogClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_debug_BriefingButtonClose))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debug_BriefingDialog == c_invalidDialogId)) {
        return true;
    }

    DialogSetVisible(gv_debug_BriefingDialog, PlayerGroupAll(), false);
    gv_debug_BriefingCheating = false;
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_BriefingDialogClose_Init () {
    gt_Debug_BriefingDialogClose = TriggerCreate("gt_Debug_BriefingDialogClose_Func");
    TriggerAddEventDialogControl(gt_Debug_BriefingDialogClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_TVNews
//--------------------------------------------------------------------------------------------------
bool gt_Debug_TVNews_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_MissionStatusCheck("TRaynor01", libWoLC_ge_MissionStatus_Completed) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C4957911"));
        return true;
    }

    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_TurnClickablesOnOff(gv_clickables, false);
    gv_debug_TVNewsOn = true;
    gf_Debug_CreateTVNewsDialog();
    DialogSetVisible(gv_debug_TVNewsDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_TVNews_Init () {
    gt_Debug_TVNews = TriggerCreate("gt_Debug_TVNews_Func");
    TriggerAddEventCheatUsed(gt_Debug_TVNews, c_playerAny, c_gameCheatTV);
    TriggerAddEventChatMessage(gt_Debug_TVNews, 1, "-tv", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_TVNewsDialogMissionButtonResponse
//--------------------------------------------------------------------------------------------------
bool gt_Debug_TVNewsDialogMissionButtonResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    string lv_newsName;
    string lv_news;
    int lv_room;

    // Automatic Variable Declarations
    int auto092D8583_ae;
    const int auto092D8583_ai = 1;

    // Variable Initialization
    lv_newsName = "";
    lv_room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_room = gv_currentRoom;
    auto092D8583_ae = gv_debug_TVNewsMissioniButtonCount;
    lv_index = 0;
    for ( ; ( (auto092D8583_ai >= 0 && lv_index <= auto092D8583_ae) || (auto092D8583_ai < 0 && lv_index >= auto092D8583_ae) ) ; lv_index += auto092D8583_ai ) {
        if ((gv_debug_TVNewsMissioniButton[lv_index] == EventDialogControl())) {
            lv_newsName = DataTableGetString(true, ("DEBUG_TVNews_Button_" + IntToString(lv_index)));
            lv_news = lv_newsName;
            break;
        }

    }
    if ((lv_news == null)) {
        return true;
    }

    if ((gf_TVNewsTriggerCallback(lv_news) == null)) {
        return true;
    }

    DialogSetVisible(gv_debug_TVNewsDialog, PlayerGroupAll(), false);
    TriggerExecute(gf_TVNewsTriggerCallback(lv_news), true, true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ChangeRoom(lv_room, false);
    DialogSetVisible(gv_debug_TVNewsDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_TVNewsDialogMissionButtonResponse_Init () {
    gt_Debug_TVNewsDialogMissionButtonResponse = TriggerCreate("gt_Debug_TVNewsDialogMissionButtonResponse_Func");
    TriggerAddEventDialogControl(gt_Debug_TVNewsDialogMissionButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_TVNewsDialogClose
//--------------------------------------------------------------------------------------------------
bool gt_Debug_TVNewsDialogClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_debug_TVNewsButtonClose))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debug_TVNewsDialog == c_invalidDialogId)) {
        return true;
    }

    DialogSetVisible(gv_debug_TVNewsDialog, PlayerGroupAll(), false);
    gv_debug_TVNewsOn = false;
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_TVNewsDialogClose_Init () {
    gt_Debug_TVNewsDialogClose = TriggerCreate("gt_Debug_TVNewsDialogClose_Func");
    TriggerAddEventDialogControl(gt_Debug_TVNewsDialogClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug ABChoice
//--------------------------------------------------------------------------------------------------
bool gt_DebugABChoice_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_oldRoom;

    // Automatic Variable Declarations
    string auto4314B998_val;
    string auto4089DBAB_val;

    // Variable Initialization
    lv_oldRoom = ge_RoomID_RoomNone;

    // Conditions
    if (testConds) {
        if (!((StringEqual(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_oldRoom = gv_currentRoom;
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, true);
    auto4314B998_val = StringWord(EventChatMessage(false), 2);
    if (auto4314B998_val == "hanson") {
        gf_GoToRoom(ge_RoomID_RoomBridge, false);
    }
    else if (auto4314B998_val == "tosh") {
        gf_GoToRoom(ge_RoomID_RoomBridge, false);
    }
    else if (auto4314B998_val == "valerian") {
        gf_GoToRoom(ge_RoomID_RoomChar, false);
    }
    else {
    }
    auto4089DBAB_val = StringWord(EventChatMessage(false), 2);
    if (auto4089DBAB_val == "hanson") {
        TriggerExecute(gt_ABChoiceTHanson03, true, true);
    }
    else if (auto4089DBAB_val == "tosh") {
        TriggerExecute(gt_ABChoiceTTosh03, true, true);
    }
    else if (auto4089DBAB_val == "valerian") {
        TriggerExecute(gt_ABChoiceTValerian02, true, true);
    }
    else {
    }
    gf_ChangeRoom(lv_oldRoom, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    libCamp_gf_HideStoryUI(true, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugABChoice_Init () {
    gt_DebugABChoice = TriggerCreate("gt_DebugABChoice_Func");
    TriggerAddEventChatMessage(gt_DebugABChoice, 1, "-ab", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Merc Intro
//--------------------------------------------------------------------------------------------------
bool gt_DebugMercIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_HideStoryUI(false, true);
    TriggerExecute(gt_ScriptSceneMercIntro, true, true);
    libCamp_gf_HideStoryUI(true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugMercIntro_Init () {
    gt_DebugMercIntro = TriggerCreate("gt_DebugMercIntro_Func");
    TriggerAddEventChatMessage(gt_DebugMercIntro, 1, "merc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Lab Intro
//--------------------------------------------------------------------------------------------------
bool gt_DebugLabIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_HideStoryUI(false, true);
    TriggerExecute(gt_ScriptSceneLabIntro, true, true);
    libCamp_gf_HideStoryUI(true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugLabIntro_Init () {
    gt_DebugLabIntro = TriggerCreate("gt_DebugLabIntro_Func");
    TriggerAddEventChatMessage(gt_DebugLabIntro, 1, "lab", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Armory Intro
//--------------------------------------------------------------------------------------------------
bool gt_DebugArmoryIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_HideStoryUI(false, true);
    TriggerExecute(gt_ScriptSceneArmoryIntro, true, true);
    libCamp_gf_HideStoryUI(true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugArmoryIntro_Init () {
    gt_DebugArmoryIntro = TriggerCreate("gt_DebugArmoryIntro_Func");
    TriggerAddEventChatMessage(gt_DebugArmoryIntro, 1, "armory", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blizzcon Screen Wait
//--------------------------------------------------------------------------------------------------
bool gt_BlizzconScreenWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    while (true) {
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlizzconScreenWait_Init () {
    gt_BlizzconScreenWait = TriggerCreate("gt_BlizzconScreenWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Output Sets
//--------------------------------------------------------------------------------------------------
bool gt_DebugOutputSets_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugSetTypeFile(2, "StorySets.txt");
    gf_DebugOutputSetUnitsSingle(ge_RoomID_RoomArmory);
    gf_DebugOutputSetUnitsSingle(ge_RoomID_RoomBridge);
    gf_DebugOutputSetUnitsSingle(ge_RoomID_RoomCantina);
    gf_DebugOutputSetUnitsSingle(ge_RoomID_RoomChar);
    gf_DebugOutputSetUnitsSingle(ge_RoomID_RoomCorridor);
    gf_DebugOutputSetUnitsSingle(ge_RoomID_RoomFlagship);
    gf_DebugOutputSetUnitsSingle(ge_RoomID_RoomLab);
    gf_DebugOutputSetUnitsSingle(ge_RoomID_RoomMarSara);
    gf_DebugOutputSetUnitsSingle(ge_RoomID_RoomObservatory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugOutputSets_Init () {
    gt_DebugOutputSets = TriggerCreate("gt_DebugOutputSets_Func");
    TriggerAddEventChatMessage(gt_DebugOutputSets, 1, "autosets", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug CINEMATICMODE
//--------------------------------------------------------------------------------------------------
bool gt_DebugCINEMATICMODE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugCinematicModeEnabled == true)) {
        gv_debugCinematicModeEnabled = false;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.2);
    }
    else {
        gv_debugCinematicModeEnabled = true;
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCINEMATICMODE_Init () {
    gt_DebugCINEMATICMODE = TriggerCreate("gt_DebugCINEMATICMODE_Func");
    TriggerAddEventChatMessage(gt_DebugCINEMATICMODE, 1, "CINEMATICMODE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug SHOWALL
//--------------------------------------------------------------------------------------------------
bool gt_DebugSHOWALL_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoAA1C258C_g;
    int autoAA1C258C_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA1C258C_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoAA1C258C_u = UnitGroupCount(autoAA1C258C_g, c_unitCountAll);
    for (;; autoAA1C258C_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoAA1C258C_g, autoAA1C258C_u);
        if (lv_u == null) { break; }
        libNtve_gf_ShowHideUnit(lv_u, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSHOWALL_Init () {
    gt_DebugSHOWALL = TriggerCreate("gt_DebugSHOWALL_Func");
    TriggerAddEventChatMessage(gt_DebugSHOWALL, 1, "SHOWALL", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug DOOR
//--------------------------------------------------------------------------------------------------
bool gt_DebugDOOR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayRoomChangePanel();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugDOOR_Init () {
    gt_DebugDOOR = TriggerCreate("gt_DebugDOOR_Func");
    TriggerAddEventChatMessage(gt_DebugDOOR, 1, "DOOR", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug IDLETIMES
//--------------------------------------------------------------------------------------------------
bool gt_DebugIDLETIMES_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_idleFidgetStartTime = StringToFixed(StringWord(EventChatMessage(false), 2));
    gv_idleFidgetRepeatTime = StringToFixed(StringWord(EventChatMessage(false), 3));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/A1191FC4") + FixedToText(gv_idleFidgetStartTime, 1) + StringExternal("Param/Value/48AD46C5") + FixedToText(gv_idleFidgetRepeatTime, 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugIDLETIMES_Init () {
    gt_DebugIDLETIMES = TriggerCreate("gt_DebugIDLETIMES_Func");
    TriggerAddEventChatMessage(gt_DebugIDLETIMES, 1, "IDLETIMES", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Credits
//--------------------------------------------------------------------------------------------------
bool gt_DebugCredits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/B60C206F") + IntToText(PlayerGetPropertyInt(1, c_playerPropCredits))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCredits_Init () {
    gt_DebugCredits = TriggerCreate("gt_DebugCredits_Func");
    TriggerAddEventChatMessage(gt_DebugCredits, 1, "MYCREDITS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Door Animation
//--------------------------------------------------------------------------------------------------
bool gt_DebugDoorAnimation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cantinaDoor), c_animNameDefault, "Highlight Start", c_animFlagPlayForever, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gv_cantinaDoor), c_animNameDefault, 100.0);
    Wait(1.0, c_timeGame);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gv_cantinaDoor, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugDoorAnimation_Init () {
    gt_DebugDoorAnimation = TriggerCreate("gt_DebugDoorAnimation_Func");
    TriggerAddEventChatMessage(gt_DebugDoorAnimation, 1, "-dooropen", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Pause Music
//--------------------------------------------------------------------------------------------------
bool gt_DebugPauseMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugPauseMusic_Init () {
    gt_DebugPauseMusic = TriggerCreate("gt_DebugPauseMusic_Func");
    TriggerAddEventChatMessage(gt_DebugPauseMusic, 1, "-pm", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Attachment Location
//--------------------------------------------------------------------------------------------------
bool gt_DebugAttachmentLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_loc;
    string lv_roomname;
    int lv_room;
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roomname = "";
    lv_room = ge_RoomID_RoomMarSara;
    lv_name = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringWord(EventChatMessage(false), 1) == EventChatMessage(true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_roomname = StringWord(EventChatMessage(false), 2);
    lv_name = StringWord(EventChatMessage(false), 3);
    if ((StringContains(lv_roomname, "Armory", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = ge_RoomID_RoomArmory;
    }
    else if ((StringContains(lv_roomname, "Bridge", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = ge_RoomID_RoomBridge;
    }
    else if ((StringContains(lv_roomname, "Cantina", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = ge_RoomID_RoomCantina;
    }
    else if ((StringContains(lv_roomname, "Char", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = ge_RoomID_RoomChar;
    }
    else if ((StringContains(lv_roomname, "Lab", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = ge_RoomID_RoomLab;
    }
    else if ((StringContains(lv_roomname, "MarSara", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = ge_RoomID_RoomMarSara;
    }
    else if ((true == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F9F016D2"));
        return true;
    }
    lv_loc = UnitGetAttachmentPoint(gf_RoomUnit(lv_room), lv_name);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/ADF09654") + FixedToText(PointGetX(lv_loc), c_fixedPrecisionAny) + StringExternal("Param/Value/4BAB04B3") + FixedToText(PointGetY(lv_loc), c_fixedPrecisionAny)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/DADFB189") + FixedToText(PointGetFacing(lv_loc), c_fixedPrecisionAny)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugAttachmentLocation_Init () {
    gt_DebugAttachmentLocation = TriggerCreate("gt_DebugAttachmentLocation_Func");
    TriggerAddEventChatMessage(gt_DebugAttachmentLocation, 1, "attachinfo", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Hide Unclickables
//--------------------------------------------------------------------------------------------------
bool gt_DebugHideUnclickables_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2DDF8996_g;
    int auto2DDF8996_u;
    unit auto2DDF8996_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2DDF8996_g = gv_visibleUnits;
    auto2DDF8996_u = UnitGroupCount(auto2DDF8996_g, c_unitCountAll);
    for (;; auto2DDF8996_u -= 1) {
        auto2DDF8996_var = UnitGroupUnitFromEnd(auto2DDF8996_g, auto2DDF8996_u);
        if (auto2DDF8996_var == null) { break; }
        if ((UnitGroupHasUnit(gv_clickables, auto2DDF8996_var) == false)) {
            gf_RemoveVisibleUnit(false, auto2DDF8996_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugHideUnclickables_Init () {
    gt_DebugHideUnclickables = TriggerCreate("gt_DebugHideUnclickables_Func");
    TriggerAddEventChatMessage(gt_DebugHideUnclickables, 1, "hideunclick", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Story State
//--------------------------------------------------------------------------------------------------
bool gt_DebugStoryState_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gv_bridgeRoom, "Table", "Fly", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStoryState_Init () {
    gt_DebugStoryState = TriggerCreate("gt_DebugStoryState_Func");
    TriggerAddEventChatMessage(gt_DebugStoryState, 1, "-fly", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Click Turn On
//--------------------------------------------------------------------------------------------------
bool gt_DebugClickTurnOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DebugClick, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugClickTurnOn_Init () {
    gt_DebugClickTurnOn = TriggerCreate("gt_DebugClickTurnOn_Func");
    TriggerAddEventChatMessage(gt_DebugClickTurnOn, 1, "debugclick", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Click
//--------------------------------------------------------------------------------------------------
bool gt_DebugClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/13B728CD") + UnitTypeGetName(UnitGetType(EventUnit()))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugClick_Init () {
    gt_DebugClick = TriggerCreate("gt_DebugClick_Func");
    TriggerEnable(gt_DebugClick, false);
    TriggerAddEventUnitClick(gt_DebugClick, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Starmap
//--------------------------------------------------------------------------------------------------
bool gt_DebugStarmap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeStarmapClicked, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStarmap_Init () {
    gt_DebugStarmap = TriggerCreate("gt_DebugStarmap_Func");
    TriggerAddEventChatMessage(gt_DebugStarmap, 1, "starmap", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Close Starmap
//--------------------------------------------------------------------------------------------------
bool gt_DebugCloseStarmap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed) == false)) {
        gv_travelPanel_LeaveCallback = gt_MarSaraBriefcaseLeave;
    }

    TriggerExecute(gt_TravelPanelLeave, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCloseStarmap_Init () {
    gt_DebugCloseStarmap = TriggerCreate("gt_DebugCloseStarmap_Func");
    TriggerAddEventChatMessage(gt_DebugCloseStarmap, 1, "closestarmap", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Mission Archieves
//--------------------------------------------------------------------------------------------------
bool gt_DebugMissionArchieves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeMissionArchivesClicked, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugMissionArchieves_Init () {
    gt_DebugMissionArchieves = TriggerCreate("gt_DebugMissionArchieves_Func");
    TriggerAddEventChatMessage(gt_DebugMissionArchieves, 1, "battle", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Show Actor
//--------------------------------------------------------------------------------------------------
bool gt_DebugShowActor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoD1085B2B_ae;
    const int autoD1085B2B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD1085B2B_ae = gv_c_ACTOR_LAST;
    lv_index = gv_c_ACTOR_FIRST;
    for ( ; ( (autoD1085B2B_ai >= 0 && lv_index <= autoD1085B2B_ae) || (autoD1085B2B_ai < 0 && lv_index >= autoD1085B2B_ae) ) ; lv_index += autoD1085B2B_ai ) {
        if ((gf_ActorIsEnabledInRoom(gv_actors[lv_index].lv_actorID, gv_currentRoom) == true)) {
            gf_RemoveVisibleUnit(true, gf_ActorUnit(gv_actors[lv_index].lv_actorID));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugShowActor_Init () {
    gt_DebugShowActor = TriggerCreate("gt_DebugShowActor_Func");
    TriggerAddEventChatMessage(gt_DebugShowActor, 1, "showactor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Hide Actor
//--------------------------------------------------------------------------------------------------
bool gt_DebugHideActor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoE56D2B54_ae;
    const int autoE56D2B54_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE56D2B54_ae = gv_c_ACTOR_LAST;
    lv_index = gv_c_ACTOR_FIRST;
    for ( ; ( (autoE56D2B54_ai >= 0 && lv_index <= autoE56D2B54_ae) || (autoE56D2B54_ai < 0 && lv_index >= autoE56D2B54_ae) ) ; lv_index += autoE56D2B54_ai ) {
        gf_RemoveVisibleUnit(false, gf_ActorUnit(gv_actors[lv_index].lv_actorID));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugHideActor_Init () {
    gt_DebugHideActor = TriggerCreate("gt_DebugHideActor_Func");
    TriggerAddEventChatMessage(gt_DebugHideActor, 1, "hideactor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Room Preload States
//--------------------------------------------------------------------------------------------------
bool gt_DebugRoomPreloadStates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_room;
    text lv_output;

    // Automatic Variable Declarations
    int autoA7B11003_ae;
    const int autoA7B11003_ai = 1;

    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;
    lv_output = StringToText("");

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7B11003_ae = gv_c_ROOM_LAST;
    lv_index = gv_c_ROOM_FIRST;
    for ( ; ( (autoA7B11003_ai >= 0 && lv_index <= autoA7B11003_ae) || (autoA7B11003_ai < 0 && lv_index >= autoA7B11003_ae) ) ; lv_index += autoA7B11003_ai ) {
        lv_room = gf_RoomFromIndex(lv_index);
        lv_output = (gf_RoomName(lv_room) + StringExternal("Param/Value/7C9331BF"));
        if ((gv_roomPreloaded[lv_index] == true)) {
            lv_output = (lv_output + StringExternal("Param/Value/246AD0CA"));
        }
        else {
            lv_output = (lv_output + StringExternal("Param/Value/20202EDF"));
        }
        if ((gf_RoomIsEnabled(lv_room) == true)) {
            lv_output = (lv_output + StringExternal("Param/Value/8BD1EF7F"));
        }
        else {
            lv_output = (lv_output + StringExternal("Param/Value/0FD9E264"));
        }
        TriggerDebugOutput(1, lv_output, true);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugRoomPreloadStates_Init () {
    gt_DebugRoomPreloadStates = TriggerCreate("gt_DebugRoomPreloadStates_Func");
    TriggerAddEventChatMessage(gt_DebugRoomPreloadStates, 1, "roompreload", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Size
//--------------------------------------------------------------------------------------------------
bool gt_DebugSize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringWord(EventChatMessage(false), 1) == EventChatMessage(true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugDialogForSizePos == c_invalidDialogId)) {
        DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
        gv_debugDialogForSizePos = DialogLastCreated();
        DialogSetImage(gv_debugDialogForSizePos, "Assets\\Textures\\yellow.dds");
        DialogSetTransparency(DialogLastCreated(), (100.0 - (IntToFixed(100) / (255.0 * 100.0))));
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }

    DialogSetSize(gv_debugDialogForSizePos, StringToInt(StringWord(EventChatMessage(false), 2)), StringToInt(StringWord(EventChatMessage(false), 3)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSize_Init () {
    gt_DebugSize = TriggerCreate("gt_DebugSize_Func");
    TriggerAddEventChatMessage(gt_DebugSize, 1, "-size", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Pos
//--------------------------------------------------------------------------------------------------
bool gt_DebugPos_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 1) == EventChatMessage(true)))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugDialogForSizePos == c_invalidDialogId)) {
        DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
        gv_debugDialogForSizePos = DialogLastCreated();
        DialogSetImage(gv_debugDialogForSizePos, "Assets\\Textures\\yellow.dds");
        DialogSetTransparency(DialogLastCreated(), (100.0 - (IntToFixed(100) / (255.0 * 100.0))));
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }

    DialogSetPosition(gv_debugDialogForSizePos, c_anchorTopLeft, StringToInt(StringWord(EventChatMessage(false), 2)), StringToInt(StringWord(EventChatMessage(false), 3)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugPos_Init () {
    gt_DebugPos = TriggerCreate("gt_DebugPos_Func");
    TriggerAddEventChatMessage(gt_DebugPos, 1, "-pos", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug BG Unit Picked
//--------------------------------------------------------------------------------------------------
bool gt_DebugBGUnitPicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    text lv_msg;

    // Automatic Variable Declarations
    const int auto645E7BED_ae = 3;
    const int auto645E7BED_ai = 1;

    // Variable Initialization
    lv_msg = StringToText("");

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    for ( ; ( (auto645E7BED_ai >= 0 && lv_index <= auto645E7BED_ae) || (auto645E7BED_ai < 0 && lv_index >= auto645E7BED_ae) ) ; lv_index += auto645E7BED_ai ) {
        lv_msg = (StringExternal("Param/Value/FDDC74F7") + IntToText(lv_index) + StringExternal("Param/Value/602B1650"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lv_msg);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugBGUnitPicked_Init () {
    gt_DebugBGUnitPicked = TriggerCreate("gt_DebugBGUnitPicked_Func");
    TriggerAddEventChatMessage(gt_DebugBGUnitPicked, 1, "ArmoryBG", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Tosh Portrait
//--------------------------------------------------------------------------------------------------
bool gt_DebugToshPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitCreate(0, 0, c_anchorCenter, 450, 450, "ToshPortrait", "Dflt", "", true, true);
    PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), true, false);
    Wait(4.0, c_timeReal);
    PortraitDestroy(PortraitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugToshPortrait_Init () {
    gt_DebugToshPortrait = TriggerCreate("gt_DebugToshPortrait_Func");
    TriggerAddEventChatMessage(gt_DebugToshPortrait, 1, "-tosh", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Tosh Portrait 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugToshPortrait2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitCreate(0, 0, c_anchorCenter, 450, 450, "HansonPortrait", "Dflt", "", true, true);
    PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), true, false);
    Wait(4.0, c_timeReal);
    PortraitDestroy(PortraitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugToshPortrait2_Init () {
    gt_DebugToshPortrait2 = TriggerCreate("gt_DebugToshPortrait2_Func");
    TriggerAddEventChatMessage(gt_DebugToshPortrait2, 1, "-hanson", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Stop Transmission
//--------------------------------------------------------------------------------------------------
bool gt_DebugStopTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StopAllTransmissionConversation();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStopTransmission_Init () {
    gt_DebugStopTransmission = TriggerCreate("gt_DebugStopTransmission_Func");
    TriggerAddEventChatMessage(gt_DebugStopTransmission, 1, "-sc", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Zeratul Planet Panel
//--------------------------------------------------------------------------------------------------
bool gt_DebugZeratulPlanetPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringEqual(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TravelPanelZeratulDisplay(gt_LabCrystalLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugZeratulPlanetPanel_Init () {
    gt_DebugZeratulPlanetPanel = TriggerCreate("gt_DebugZeratulPlanetPanel_Func");
    TriggerAddEventChatMessage(gt_DebugZeratulPlanetPanel, 1, "ZPLANETPANEL", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Temp
//--------------------------------------------------------------------------------------------------
bool gt_DebugTemp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, FixedToText(UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorRaynorMarine)), c_fixedPrecisionAny));
    }
    else {
        UnitSetFacing(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), StringToFixed(StringWord(EventChatMessage(false), 2)), 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugTemp_Init () {
    gt_DebugTemp = TriggerCreate("gt_DebugTemp_Func");
    TriggerAddEventChatMessage(gt_DebugTemp, 1, "-s", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Actor Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ActorClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_actor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_actor = ge_ActorID_ActorNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_actor = gf_ActorID(gf_HotspotClicked());
    if ((gv_currentRoom == ge_RoomID_RoomArmory) && (lv_actor == ge_ActorID_ActorSwann) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_ArmorySwannClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomBridge) && (lv_actor == ge_ActorID_ActorHorner) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_BridgeHornerClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomBridge) && (lv_actor == ge_ActorID_ActorTychus) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_BridgeTychusClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomBridge) && (lv_actor == ge_ActorID_ActorHanson) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_BridgeHansonClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomBridge) && (lv_actor == ge_ActorID_ActorTosh) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_BridgeToshClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomCantina) && (lv_actor == ge_ActorID_ActorTychus) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_CantinaTychusClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomCantina) && (lv_actor == ge_ActorID_ActorTosh) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_CantinaToshClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomChar) && (lv_actor == ge_ActorID_ActorWarfield) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_CharWarfieldClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomChar) && (lv_actor == ge_ActorID_ActorWarfieldAOD) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_CharWarfieldClickedAOD, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomChar) && (lv_actor == ge_ActorID_ActorTychus) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_CharTychusClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomLab) && (lv_actor == ge_ActorID_ActorHanson) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_LabHansonClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomMarSara) && (lv_actor == ge_ActorID_ActorTychus) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_MarSaraTychusClicked, true, false);
    }
    else if ((gv_currentRoom == ge_RoomID_RoomObservatory) && (lv_actor == ge_ActorID_ActorValerian) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_ObservatoryValerianClicked, true, false);
    }
    else if ((lv_actor != ge_ActorID_ActorNone)) {
        gf_PlayGossip(lv_actor);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActorClicked_Init () {
    gt_ActorClicked = TriggerCreate("gt_ActorClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Armory
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomArmory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomArmory, true);
    FogSetEnabled(false);
    GameSetLighting("SMHyperionArmory", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_armorySpaceLightning), c_animNameDefault, gv_armorySpaceLightningAnim, c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomArmory));
    gf_PrepareRoomActors(ge_RoomID_RoomArmory, true);
    gf_RemoveVisibleUnit(false, gv_armorySimulator);
    gf_RemoveVisibleUnit(false, gv_armoryCrane);
    gf_RemoveVisibleUnit(false, gv_armoryDoor);
    libCamp_gf_ChangeAmbience("HyperionArmoryAmbience");
    SoundSetReverb("Reverb_HyperionArmory", 0.0, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomArmory_Init () {
    gt_PrepareRoomArmory = TriggerCreate("gt_PrepareRoomArmory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Bridge
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomBridge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    FogSetEnabled(false);
    GameSetLighting("SMHyperionBridge", 0.0);
    GameSetBackground(c_backgroundFixed, null, 5.0);
    GameSetBackground(c_backgroundTerrain, null, 5.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomBridge));
    gf_PrepareRoomActors(ge_RoomID_RoomBridge, true);
    ActorTextureGroupApplyGlobal("bridge");
    gf_BridgeActorAnimation(true, true, true);
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitFromId(1029)), "Cover");
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitFromId(1025)), "Cover");
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitFromId(1026)), "Cover");
    libCamp_gf_ChangeAmbience("HyperionBridgeAmbienceLoop");
    SoundSetReverb("Reverb_HyperionBridge", 0.0, true, false);
    gf_CreateBridgeBackgroundSound();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomBridge_Init () {
    gt_PrepareRoomBridge = TriggerCreate("gt_PrepareRoomBridge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Cantina
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomCantina_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_actorIndex;

    // Automatic Variable Declarations
    int autoE773C494_ae;
    const int autoE773C494_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomCantina, true);
    FogSetEnabled(false);
    GameSetLighting("SMHyperionCantina", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomCantina));
    gf_PrepareRoomActors(ge_RoomID_RoomCantina, true);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTosh), "Cover", true);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorHillMercContact), "Cover", true);
    ActorTextureGroupApplyGlobal("cantina");
    if ((gv_cantinaState == ge_CantinaStates_Broken)) {
        gf_TurnAnimationPropertiesOnOffInstantly(gv_cantinaProps, "A", true);
    }
    else {
        gf_TurnAnimationPropertiesOnOffInstantly(gv_cantinaProps, "A", false);
    }
    if ((gf_RaynorCantinaHome2() == true)) {
        gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", false);
        gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", false);
    }
    else {
        gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", true);
        gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", true);
    }
    if ((gf_RaynorCantinaHome2() == true) && (gv_cantinaState == ge_CantinaStates_Normal)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cantinaProps), c_animNameDefault, "Stand Cover B", c_animFlagPlayForever, 0.0);
    }
    else {
        gf_ClearAnimationwithblendtime(c_animNameDefault, gv_cantinaProps, 0.0);
    }
    gf_PrepareRoomCantinaTrophiesVisibilityLogic();
    gf_PrepareRoomCantinaPostersVisibilityLogic();
    autoE773C494_ae = gv_c_ACTOR_LAST;
    lv_actorIndex = gv_c_ACTOR_FIRST;
    for ( ; ( (autoE773C494_ai >= 0 && lv_actorIndex <= autoE773C494_ae) || (autoE773C494_ai < 0 && lv_actorIndex >= autoE773C494_ae) ) ; lv_actorIndex += autoE773C494_ai ) {
        if ((gf_ActorIsEnabledInRoom(gv_actors[lv_actorIndex].lv_actorID, ge_RoomID_RoomCantina) == true) && (gv_actors[lv_actorIndex].lv_cantinaBGType != ge_ActorCantinaBGType_None) && (gv_actors[lv_actorIndex].lv_cantinaBGLocID > 0) && (gv_cantinaBGLocs[gv_actors[lv_actorIndex].lv_cantinaBGLocID].lv_sitDown == true)) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(gv_actors[lv_actorIndex].lv_actorID), "Cover", true);
        }

    }
    gf_CreateCantinaBackgroundSound();
    libCamp_gf_ChangeAmbience("Ambience_HyperionCantina");
    SoundSetReverb("Reverb_HyperionCantina", 0.0, true, false);
    gf_MuteJukebox(false, gv_cantinaJukeboxID);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomCantina_Init () {
    gt_PrepareRoomCantina = TriggerCreate("gt_PrepareRoomCantina_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Char
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomChar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomChar, true);
    FogSetEnabled(true);
    FogSetColor(Color(67.84, 40.00, 27.84));
    FogSetFallOff(0.096);
    FogSetDensity(0.017);
    FogSetStartHeight(-5.904);
    GameSetLighting("SMCharBattlefield", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomChar));
    gf_PrepareCharSkybox(false);
    gf_PrepareRoomActors(ge_RoomID_RoomChar, true);
    gf_PrepareRoomCharArtifactLogic();
    UnitTypeAnimationLoad("SMViking", "Assets\\StoryModeCharacters\\Terran\\SM_Viking_CharAnims\\SM_Viking_CharAnims.m3a");
    UnitTypeAnimationLoad("SMMutalisk", "Assets\\StoryModeCharacters\\Zerg\\SM_Mutalisk_CharAnims\\SM_Mutalisk_CharAnims.m3a");
    UnitTypeAnimationLoad("SMBanshee", "Assets\\StoryModeCharacters\\Terran\\SM_Banshee_CharAnims\\SM_Banshee_CharAnims.m3a");
    UnitTypeAnimationLoad("SMMarine03", "Assets\\StoryModeCharacters\\Terran\\SM_Marine03_CharAnims\\SM_Marine03_CharAnims.m3a");
    gf_TurnAnimationPropertiesOnOff(gv_charBansheeA, "A", true, 0.0);
    gf_TurnAnimationPropertiesOnOff(gv_charBansheeB, "B", true, 0.0);
    gf_TurnAnimationPropertiesOnOff(gv_charMarineA, "A", true, 0.0);
    gf_TurnAnimationPropertiesOnOff(gv_charMarineB, "B", true, 0.0);
    gf_TurnAnimationPropertiesOnOff(gv_charMutaA, "A", true, 0.0);
    gf_TurnAnimationPropertiesOnOff(gv_charMutaB, "B", true, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_charViking, "AnimBaselineStart");
    libNtve_gf_SendActorMessageToUnit(gv_charBansheeA, "AnimBaselineStart");
    libNtve_gf_SendActorMessageToUnit(gv_charBansheeB, "AnimBaselineStart");
    libNtve_gf_SendActorMessageToUnit(gv_charMutaA, "AnimBaselineStart");
    libNtve_gf_SendActorMessageToUnit(gv_charMutaB, "AnimBaselineStart");
    libNtve_gf_SendActorMessageToUnit(gv_charMarineA, "AnimBaselineStart");
    libNtve_gf_SendActorMessageToUnit(gv_charMarineB, "AnimBaselineStart");
    ActorTextureGroupApplyGlobal("battlefield");
    TriggerExecute(gt_CharArtifactAnimation, true, false);
    gf_CharActorAnimation(true, true, true);
    libCamp_gf_ChangeAmbience("Ambience_CharSet");
    SoundSetReverb("Reverb_CharBattlefield", 0.0, true, false);
    gf_CreateCharBackgroundSounds();
    TriggerExecute(gt_TVNewsCharAsyncPreload, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomChar_Init () {
    gt_PrepareRoomChar = TriggerCreate("gt_PrepareRoomChar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Char Artifact Animation
//--------------------------------------------------------------------------------------------------
bool gt_CharArtifactAnimation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CharArtifactOpen, true);
    if ((libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Available) == false)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charArtifact), c_animNameDefault, "Stand A", c_animFlagPlayForever, 0.0);
    }
    else {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charArtifact), c_animNameDefault, "Stand B", c_animFlagPlayForever, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharArtifactAnimation_Init () {
    gt_CharArtifactAnimation = TriggerCreate("gt_CharArtifactAnimation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Conscription
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomConscription_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomConscription, true);
    FogSetEnabled(false);
    GameSetLighting("SMHyperionArmory", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_armorySpaceLightning), c_animNameDefault, gv_armorySpaceLightningAnim, c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomConscription));
    gf_PrepareRoomActors(ge_RoomID_RoomConscription, true);
    libCamp_gf_ChangeAmbience("HyperionArmoryAmbience");
    SoundSetReverb("Reverb_HyperionArmory", 0.0, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomConscription_Init () {
    gt_PrepareRoomConscription = TriggerCreate("gt_PrepareRoomConscription_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Corridor
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomCorridor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomCorridor, true);
    FogSetEnabled(false);
    GameSetLighting("SMHyperionCorridor", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomCorridor));
    gf_PrepareRoomActors(ge_RoomID_RoomCorridor, true);
    libCamp_gf_ChangeAmbience(null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomCorridor_Init () {
    gt_PrepareRoomCorridor = TriggerCreate("gt_PrepareRoomCorridor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Flagship
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomFlagship_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomFlagship, true);
    FogSetEnabled(false);
    GameSetLighting("SMValerianFlagshipCorridors", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomFlagship));
    gf_PrepareRoomActors(ge_RoomID_RoomFlagship, true);
    libCamp_gf_ChangeAmbience(null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomFlagship_Init () {
    gt_PrepareRoomFlagship = TriggerCreate("gt_PrepareRoomFlagship_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Galaxy
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomGalaxy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomGalaxy, true);
    GameSetLighting("Starmap", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    UISetWorldVisible(PlayerGroupAll(), false);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomGalaxy));
    gf_PrepareRoomActors(ge_RoomID_RoomGalaxy, true);
    libCamp_gf_ChangeAmbience("StarMapAmbienceLoop");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomGalaxy_Init () {
    gt_PrepareRoomGalaxy = TriggerCreate("gt_PrepareRoomGalaxy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Lab
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomLab_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomLab, true);
    FogSetEnabled(false);
    GameSetLighting("SMHyperionLab", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomLab));
    gf_PrepareRoomActors(ge_RoomID_RoomLab, true);
    gf_PrepareRoomLabCrystalAtrifactVisibilityLogic();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_labArtifact1), c_animNameDefault, "Stand", 0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_labArtifact2), c_animNameDefault, "Stand", 0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_labArtifact3), c_animNameDefault, "Stand", 0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_labArtifact4), c_animNameDefault, "Stand", 0, 0.0);
    gf_LabActorAnimation(true, true, true);
    libCamp_gf_ChangeAmbience("Ambience_HyperionLaboratory");
    SoundSetReverb("Reverb_HyperionLaboratory", 0.0, true, false);
    gf_TurnLabBackgroundSoundOnOff(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomLab_Init () {
    gt_PrepareRoomLab = TriggerCreate("gt_PrepareRoomLab_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Lab Research
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomLabResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomLabResearch, true);
    GameSetLighting("TerranTechPurchase", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    UISetWorldVisible(PlayerGroupAll(), false);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomLabResearch));
    gf_PrepareRoomActors(ge_RoomID_RoomLabResearch, true);
    gf_TurnLabBackgroundSoundOnOff(true);
    libCamp_gf_ChangeAmbience("Ambience_HyperionLaboratory");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomLabResearch_Init () {
    gt_PrepareRoomLabResearch = TriggerCreate("gt_PrepareRoomLabResearch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room MarSara
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomMarSara_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomMarSara, true);
    FogSetEnabled(false);
    GameSetLighting("StoryModeMarSaraBar", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomMarSara));
    gf_PrepareRoomActors(ge_RoomID_RoomMarSara, true);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", true);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorTychus), "Cover", true);
    ActorTextureGroupApplyGlobal("marsarabar");
    gf_PreparePinboard(ge_Pinboard_PBMarSara);
    libCamp_gf_ChangeAmbience("Ambience_MarSaraBarV1");
    SoundSetReverb("Reverb_MarSaraBar", 0.0, true, false);
    gf_TurnMarSaraBarBackgroundSoundOnOff(true);
    gf_MuteJukebox(false, gv_marSaraJukeboxID);
    TriggerExecute(gt_TVNewsBarAsyncPreload, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomMarSara_Init () {
    gt_PrepareRoomMarSara = TriggerCreate("gt_PrepareRoomMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Observatory
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomObservatory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomObservatory, true);
    FogSetEnabled(false);
    GameSetLighting("CutsceneTerran06cTerran16ValerianObservatory", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomObservatory));
    gf_PrepareRoomActors(ge_RoomID_RoomObservatory, true);
    libCamp_gf_ChangeAmbience(null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomObservatory_Init () {
    gt_PrepareRoomObservatory = TriggerCreate("gt_PrepareRoomObservatory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Tech Purchase
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomTechPurchase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomTechPurchase, true);
    FogSetEnabled(false);
    GameSetLighting("MarSara", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    UISetWorldVisible(PlayerGroupAll(), false);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomTechPurchase));
    gf_PrepareRoomActors(ge_RoomID_RoomTechPurchase, true);
    libCamp_gf_ChangeAmbience("HyperionArmoryAmbience");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomTechPurchase_Init () {
    gt_PrepareRoomTechPurchase = TriggerCreate("gt_PrepareRoomTechPurchase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Mercenary
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomMercenary_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomMercenary, true);
    FogSetEnabled(false);
    GameSetLighting("MarSara", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    UISetWorldVisible(PlayerGroupAll(), false);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomMercenary));
    gf_PrepareRoomActors(ge_RoomID_RoomMercenary, true);
    libCamp_gf_ChangeAmbience("Ambience_HyperionCantina");
    gf_MuteJukebox(false, gv_cantinaJukeboxID);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomMercenary_Init () {
    gt_PrepareRoomMercenary = TriggerCreate("gt_PrepareRoomMercenary_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Mission Archieves
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomMissionArchieves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomMissionArchieves, true);
    FogSetEnabled(false);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    UISetWorldVisible(PlayerGroupAll(), false);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomMissionArchieves));
    gf_PrepareRoomActors(ge_RoomID_RoomMissionArchieves, true);
    libCamp_gf_ChangeAmbience("HyperionBridgeAmbienceLoop");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomMissionArchieves_Init () {
    gt_PrepareRoomMissionArchieves = TriggerCreate("gt_PrepareRoomMissionArchieves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Void
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomVoid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomVoid, true);
    FogSetEnabled(false);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(ge_RoomID_RoomVoid));
    gf_PrepareRoomActors(ge_RoomID_RoomVoid, true);
    libCamp_gf_ChangeAmbience(null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomVoid_Init () {
    gt_PrepareRoomVoid = TriggerCreate("gt_PrepareRoomVoid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Walk in Room Door
//--------------------------------------------------------------------------------------------------
bool gt_WalkinRoomDoor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_OpenDoor(gv_currentRoom, true);
    Wait(1.0, c_timeReal);
    gf_CloseDoor(gv_currentRoom, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WalkinRoomDoor_Init () {
    gt_WalkinRoomDoor = TriggerCreate("gt_WalkinRoomDoor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Walk in Armory
//--------------------------------------------------------------------------------------------------
bool gt_WalkinArmory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_StoryState("ArmoryIntroDone") == false) && (libWoLC_gf_MissionStatusCheck("TTychus04", libWoLC_ge_MissionStatus_Completed) == false)) {
        libWoLC_gf_SetStoryStateBoolean("ArmoryIntroDone", true);
        TriggerExecute(gt_ScriptSceneArmoryIntro, true, true);
        gf_ChangeRoom(ge_RoomID_RoomArmory, false);
        return true;
    }

    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(40));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WalkinArmory_Init () {
    gt_WalkinArmory = TriggerCreate("gt_WalkinArmory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Walk in Bridge
//--------------------------------------------------------------------------------------------------
bool gt_WalkinBridge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingTValerian01Play2();
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(36));
    TriggerExecute(gt_DebriefingLabCantinaOpened, true, false);
    TriggerExecute(gt_DebriefingCommunicatorUnlocked, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WalkinBridge_Init () {
    gt_WalkinBridge = TriggerCreate("gt_WalkinBridge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Walk in Cantina
//--------------------------------------------------------------------------------------------------
bool gt_WalkinCantina_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, gf_RaynorCantinaHome());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WalkinCantina_Init () {
    gt_WalkinCantina = TriggerCreate("gt_WalkinCantina_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Walk in Char
//--------------------------------------------------------------------------------------------------
bool gt_WalkinChar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(218));
    TriggerExecute(gt_CharArtifactAnimation, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WalkinChar_Init () {
    gt_WalkinChar = TriggerCreate("gt_WalkinChar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Walk in Conscription
//--------------------------------------------------------------------------------------------------
bool gt_WalkinConscription_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ChangeRoom(ge_RoomID_RoomConscription, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WalkinConscription_Init () {
    gt_WalkinConscription = TriggerCreate("gt_WalkinConscription_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Walk in Lab
//--------------------------------------------------------------------------------------------------
bool gt_WalkinLab_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_StoryState("LabIntroDone") == false) && (libWoLC_gf_MissionStatusCheck("TRaynor03", libWoLC_ge_MissionStatus_Completed) == true)) {
        libWoLC_gf_SetStoryStateBoolean("LabIntroDone", true);
        TriggerExecute(gt_ScriptSceneLabIntro, true, true);
        return true;
    }

    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, gf_LabRaynorHome());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WalkinLab_Init () {
    gt_WalkinLab = TriggerCreate("gt_WalkinLab_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Walk in MarSara
//--------------------------------------------------------------------------------------------------
bool gt_WalkinMarSara_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(89));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WalkinMarSara_Init () {
    gt_WalkinMarSara = TriggerCreate("gt_WalkinMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Armory
//--------------------------------------------------------------------------------------------------
bool gt_EnterArmory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ArmoryBackgroundActivitiesStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterArmory_Init () {
    gt_EnterArmory = TriggerCreate("gt_EnterArmory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Bridge
//--------------------------------------------------------------------------------------------------
bool gt_EnterBridge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeBackgroundActivitiesStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterBridge_Init () {
    gt_EnterBridge = TriggerCreate("gt_EnterBridge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Cantina
//--------------------------------------------------------------------------------------------------
bool gt_EnterCantina_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CantinaBackgroundActivitiesStart, true, false);
    TriggerExecute(gt_EnterCantinaStartJukebox, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterCantina_Init () {
    gt_EnterCantina = TriggerCreate("gt_EnterCantina_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Cantina Start Jukebox
//--------------------------------------------------------------------------------------------------
bool gt_EnterCantinaStartJukebox_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_JukeboxIsShutdown(gv_cantinaJukeboxID) == true)) {
        gf_JukeboxNextTrack(gv_cantinaJukeboxID, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterCantinaStartJukebox_Init () {
    gt_EnterCantinaStartJukebox = TriggerCreate("gt_EnterCantinaStartJukebox_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Char
//--------------------------------------------------------------------------------------------------
bool gt_EnterChar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CharTychusAnimationStart();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterChar_Init () {
    gt_EnterChar = TriggerCreate("gt_EnterChar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Conscription
//--------------------------------------------------------------------------------------------------
bool gt_EnterConscription_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterConscription_Init () {
    gt_EnterConscription = TriggerCreate("gt_EnterConscription_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Lab
//--------------------------------------------------------------------------------------------------
bool gt_EnterLab_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_LabBackgroundActivitiesStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterLab_Init () {
    gt_EnterLab = TriggerCreate("gt_EnterLab_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter MarSara
//--------------------------------------------------------------------------------------------------
bool gt_EnterMarSara_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_EnterCantinaStartJukebox2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterMarSara_Init () {
    gt_EnterMarSara = TriggerCreate("gt_EnterMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Mar Sara Start Jukebox
//--------------------------------------------------------------------------------------------------
bool gt_EnterCantinaStartJukebox2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_JukeboxIsShutdown(gv_marSaraJukeboxID) == true)) {
        gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_trackCurrent = 0;
        gf_JukeboxNextTrack(gv_marSaraJukeboxID, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterCantinaStartJukebox2_Init () {
    gt_EnterCantinaStartJukebox2 = TriggerCreate("gt_EnterCantinaStartJukebox2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room States Default Callback
//--------------------------------------------------------------------------------------------------
bool gt_RoomStatesDefaultCallback_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_length;
    int lv_index;
    string lv_states;

    // Automatic Variable Declarations
    int auto8B3EC383_ae;
    const int auto8B3EC383_ai = 1;

    // Variable Initialization
    lv_states = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_length = (1 * gv_c_ROOM_LAST);
    auto8B3EC383_ae = lv_length;
    lv_index = 1;
    for ( ; ( (auto8B3EC383_ai >= 0 && lv_index <= auto8B3EC383_ae) || (auto8B3EC383_ai < 0 && lv_index >= auto8B3EC383_ae) ) ; lv_index += auto8B3EC383_ai ) {
        lv_states = (lv_states + "0");
    }
    libCamp_gf_SetStoryModeRoomStates(lv_states);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoomStatesDefaultCallback_Init () {
    gt_RoomStatesDefaultCallback = TriggerCreate("gt_RoomStatesDefaultCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Char Tychus Animation
//--------------------------------------------------------------------------------------------------
bool gt_CharTychusAnimation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_animID;

    // Automatic Variable Declarations
    int auto756AE77B_val;

    // Variable Initialization
    lv_animID = "CharTychusAndGun";

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack A", c_animFlagPlayForever, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charGatlingGun), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack A", c_animFlagPlayForever, 0.0);
    Wait(2.0, c_timeGame);
    while (true) {
        auto756AE77B_val = RandomInt(1, 6);
        if (auto756AE77B_val == 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack A", c_animFlagPlayForever, c_animTimeDefault);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charGatlingGun), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack A", c_animFlagPlayForever, c_animTimeDefault);
            Wait(2.0, c_timeGame);
        }
        else if (auto756AE77B_val == 2) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack B", c_animFlagPlayForever, c_animTimeDefault);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charGatlingGun), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack B", c_animFlagPlayForever, c_animTimeDefault);
            Wait(6.0, c_timeGame);
        }
        else if (auto756AE77B_val == 3) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack C", c_animFlagPlayForever, c_animTimeDefault);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charGatlingGun), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack C", c_animFlagPlayForever, c_animTimeDefault);
            Wait(7.333, c_timeGame);
        }
        else if (auto756AE77B_val == 4) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack D", c_animFlagPlayForever, c_animTimeDefault);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charGatlingGun), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack D", c_animFlagPlayForever, c_animTimeDefault);
            Wait(7.334, c_timeGame);
        }
        else if (auto756AE77B_val == 5) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack E", c_animFlagPlayForever, c_animTimeDefault);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charGatlingGun), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack E", c_animFlagPlayForever, c_animTimeDefault);
            Wait(6.667, c_timeGame);
        }
        else if (auto756AE77B_val == 6) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack F", c_animFlagPlayForever, c_animTimeDefault);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charGatlingGun), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Attack F", c_animFlagPlayForever, c_animTimeDefault);
            Wait(5.867, c_timeGame);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharTychusAnimation_Init () {
    gt_CharTychusAnimation = TriggerCreate("gt_CharTychusAnimation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoomChange Button Response
//--------------------------------------------------------------------------------------------------
bool gt_RoomChangeButtonResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_room;
    int lv_index;
    text lv_tempText;

    // Automatic Variable Declarations
    int auto2761DB6E_ae;
    const int auto2761DB6E_ai = 1;
    int auto375C3EC2_val;

    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_room = gf_RoomFromIndex(libCamp_gf_RoomChangePanelButtonCustomData(libCamp_gf_RoomChangePanelCurrentButton()));
    if ((lv_room == ge_RoomID_RoomNone)) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    UISetCursorVisible(PlayerGroupAll(), false);
    gf_StopAllTransmissionConversation();
    auto2761DB6E_ae = gv_c_ACTOR_LAST;
    lv_index = gv_c_ACTOR_FIRST;
    for ( ; ( (auto2761DB6E_ai >= 0 && lv_index <= auto2761DB6E_ae) || (auto2761DB6E_ai < 0 && lv_index >= auto2761DB6E_ae) ) ; lv_index += auto2761DB6E_ai ) {
        ActorSend(libNtve_gf_MainActorofUnit(gv_actors[lv_index].lv_unit), "AnimCancelActiveBlends { }");
    }
    CinematicFade(false, 0.25, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((gv_roomPreloaded[(lv_room)] == false)) {
        gf_DisplayFullScreenImage(gf_RoomLoadingImage(lv_room));
    }

    Wait(0.25, c_timeGame);
    auto375C3EC2_val = lv_room;
    if (auto375C3EC2_val == ge_RoomID_RoomConscription) {
        libWoLC_gf_SetStoryStateBoolean("ConscriptionVisited", true);
        libCamp_gf_StopFlashingRoomChangePanelButton(libCamp_gf_RoomChangePanelButtonCustomData(gv_roomChangePanelButtonId[(lv_room)]));
    }
    else if (auto375C3EC2_val == ge_RoomID_RoomArmory) {
        libWoLC_gf_SetStoryStateBoolean("ArmoryVisited", true);
        libCamp_gf_StopFlashingRoomChangePanelButton(libCamp_gf_RoomChangePanelButtonCustomData(gv_roomChangePanelButtonId[(lv_room)]));
    }
    else if (auto375C3EC2_val == ge_RoomID_RoomCantina) {
        libWoLC_gf_SetStoryStateBoolean("CantinaVisited", true);
        libCamp_gf_StopFlashingRoomChangePanelButton(libCamp_gf_RoomChangePanelButtonCustomData(gv_roomChangePanelButtonId[(lv_room)]));
    }
    else if (auto375C3EC2_val == ge_RoomID_RoomLab) {
        libWoLC_gf_SetStoryStateBoolean("LabVisited", true);
        libCamp_gf_StopFlashingRoomChangePanelButton(libCamp_gf_RoomChangePanelButtonCustomData(gv_roomChangePanelButtonId[(lv_room)]));
    }
    else {
    }
    gf_Debug_RoomChangeTimerStart();
    gf_ChangeRoom(lv_room, true);
    gf_Debug_RoomChangeTimerStart2(lv_room, true);
    UISetCursorVisible(PlayerGroupAll(), true);
    libCamp_gf_HideStoryUI(true, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoomChangeButtonResponse_Init () {
    gt_RoomChangeButtonResponse = TriggerCreate("gt_RoomChangeButtonResponse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoomChange Button Update
//--------------------------------------------------------------------------------------------------
bool gt_RoomChangeButtonUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_room;
    int lv_buttonId;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buttonId = libCamp_gf_RoomChangePanelCurrentButton();
    lv_room = gf_RoomFromIndex(libCamp_gf_RoomChangePanelButtonCustomData(lv_buttonId));
    if ((gf_RoomIsEnabled(lv_room) == false)) {
        libCamp_gf_SetRoomChangePanelButtonState(lv_buttonId, libCamp_ge_RoomPanelButtonState_Locked);
    }
    else {
        if ((lv_room == gv_currentRoom)) {
            libCamp_gf_SetRoomChangePanelButtonState(lv_buttonId, libCamp_ge_RoomPanelButtonState_Disable);
        }
        else {
            libCamp_gf_SetRoomChangePanelButtonState(lv_buttonId, libCamp_ge_RoomPanelButtonState_Enable);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoomChangeButtonUpdate_Init () {
    gt_RoomChangeButtonUpdate = TriggerCreate("gt_RoomChangeButtonUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BG Actor Node Move Arrive
//--------------------------------------------------------------------------------------------------
bool gt_BGActorNodeMoveArrive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bGActorID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bGActorID = gf_GetBGActorIDByActionTrigger(TriggerGetCurrent());
    if ((lv_bGActorID <= 0)) {
        return true;
    }

    gf_BGActorDoNext(lv_bGActorID);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BGActorNodeMoveArrive_Init () {
    gt_BGActorNodeMoveArrive = TriggerCreate("gt_BGActorNodeMoveArrive_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BG Actor Node Stay Expires
//--------------------------------------------------------------------------------------------------
bool gt_BGActorNodeStayExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bGActorID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bGActorID = gf_GetBGActorIDByActionTrigger(TriggerGetCurrent());
    if ((lv_bGActorID <= 0)) {
        return true;
    }

    gf_BGActorDoNext(lv_bGActorID);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BGActorNodeStayExpires_Init () {
    gt_BGActorNodeStayExpires = TriggerCreate("gt_BGActorNodeStayExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BG Actor Node Do
//--------------------------------------------------------------------------------------------------
bool gt_BGActorNodeDo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bGActorID;
    int lv_nodeID;
    int lv_currentNodeID;
    int lv_nextNodeID;
    int lv_lastNodeID;
    int lv_lastActionType;
    int lv_animID;

    // Automatic Variable Declarations
    int autoF2310176_ae;
    const int autoF2310176_ai = 1;
    int auto202E6D4D_val;
    int auto465F1880_ae;
    const int auto465F1880_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bGActorID = gv_tP_BGActorID;
    lv_currentNodeID = gv_tP_BGActorCurrentNodeID;
    lv_nextNodeID = (lv_currentNodeID + 1);
    if ((lv_nextNodeID > gv_bGActors[lv_bGActorID].lv_nodeCount)) {
        lv_nextNodeID = 1;
    }

    lv_lastNodeID = (lv_currentNodeID - 1);
    if ((lv_lastNodeID <= 0)) {
        lv_lastNodeID = gv_bGActors[lv_bGActorID].lv_nodeCount;
    }

    lv_lastActionType = gv_bGActors[lv_bGActorID].lv_nodes[lv_lastNodeID].lv_type;
    if ((OrderGetAbilityCommand(UnitOrder(gf_GetBGActor(lv_bGActorID), 0)) != AbilityCommand("move", 1))) {
        Wait(0.125, c_timeGame);
    }

    autoF2310176_ae = gv_bGActors[lv_bGActorID].lv_nodeCount;
    lv_nodeID = 1;
    for ( ; ( (autoF2310176_ai >= 0 && lv_nodeID <= autoF2310176_ae) || (autoF2310176_ai < 0 && lv_nodeID >= autoF2310176_ae) ) ; lv_nodeID += autoF2310176_ai ) {
        if ((lv_nodeID == lv_currentNodeID)) {
            TriggerEnable(gv_bGActors[lv_bGActorID].lv_nodes[lv_nodeID].lv_actionTrigger, true);
        }
        else {
            TriggerEnable(gv_bGActors[lv_bGActorID].lv_nodes[lv_nodeID].lv_actionTrigger, false);
        }
    }
    auto202E6D4D_val = gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_type;
    if (auto202E6D4D_val == ge_BGAcotrNodeType_Move) {
        if ((gv_bGActors[lv_bGActorID].lv_nodes[lv_nextNodeID].lv_type == ge_BGAcotrNodeType_Move)) {
            UnitIssueOrder(gf_GetBGActor(lv_bGActorID), OrderTargetingPoint(AbilityCommand("move", 0), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target), c_orderQueueReplace);
        }
        else {
            if ((gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_turnOrNot == true)) {
                gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection(gf_GetBGActor(lv_bGActorID), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target, c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gf_GetBGActor(lv_bGActorID), OrderTargetingPoint(AbilityCommand("move", 0), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target), c_orderQueueReplace);
            }
        }
    }
    else if (auto202E6D4D_val == ge_BGAcotrNodeType_Stay) {
        if ((gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_turnOrNot == true)) {
            gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection(gf_GetBGActor(lv_bGActorID), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target, c_orderQueueAddToEnd);
        }

        TimerStart(gv_bGActors[lv_bGActorID].lv_timer, gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_stayDuration, false, c_timeReal);
        auto465F1880_ae = gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_animCount;
        lv_animID = 1;
        for ( ; ( (auto465F1880_ai >= 0 && lv_animID <= auto465F1880_ae) || (auto465F1880_ai < 0 && lv_animID >= auto465F1880_ae) ) ; lv_animID += auto465F1880_ai ) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_GetBGActor(lv_bGActorID)), c_animNameDefault, gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_anim[lv_animID], 0, c_animTimeDefault);
            Wait(gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_animDuration[lv_animID], c_timeReal);
        }
    }
    else if (auto202E6D4D_val == ge_BGAcotrNodeType_Disappear) {
        gf_RemoveVisibleUnit(false, gf_GetBGActor(lv_bGActorID));
        TimerStart(gv_bGActors[lv_bGActorID].lv_timer, gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_stayDuration, false, c_timeReal);
    }
    else if (auto202E6D4D_val == ge_BGAcotrNodeType_Appear) {
        UnitSetPosition(gf_GetBGActor(lv_bGActorID), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target, false);
        if ((gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_turnOrNot == true)) {
            UnitSetFacing(gf_GetBGActor(lv_bGActorID), PointGetFacing(gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target), 0.0);
        }

        gf_RemoveVisibleUnit(true, gf_GetBGActor(lv_bGActorID));
        gf_BGActorDoNext(lv_bGActorID);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BGActorNodeDo_Init () {
    gt_BGActorNodeDo = TriggerCreate("gt_BGActorNodeDo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armory Background Activities Start
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryBackgroundActivitiesStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ArmoryBackgroundActivitiesStop, true);
    if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorKachinsky, ge_RoomID_RoomArmory) == true)) {
    }
    else {
        if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorEarl, ge_RoomID_RoomArmory) == true)) {
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryBackgroundActivitiesStart_Init () {
    gt_ArmoryBackgroundActivitiesStart = TriggerCreate("gt_ArmoryBackgroundActivitiesStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armory Background Activities Stop
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryBackgroundActivitiesStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ArmoryBackgroundActivitiesStart, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryBackgroundActivitiesStop_Init () {
    gt_ArmoryBackgroundActivitiesStop = TriggerCreate("gt_ArmoryBackgroundActivitiesStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cantina Background Activities Start
//--------------------------------------------------------------------------------------------------
bool gt_CantinaBackgroundActivitiesStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CantinaBackgroundActivitiesStop, true);
    TriggerExecute(gt_CantinaBackgroundOthersStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaBackgroundActivitiesStart_Init () {
    gt_CantinaBackgroundActivitiesStart = TriggerCreate("gt_CantinaBackgroundActivitiesStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cantina Background Activities Stop
//--------------------------------------------------------------------------------------------------
bool gt_CantinaBackgroundActivitiesStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CantinaBackgroundActivitiesStart, true);
    TriggerExecute(gt_CantinaBackgroundOthersStop, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaBackgroundActivitiesStop_Init () {
    gt_CantinaBackgroundActivitiesStop = TriggerCreate("gt_CantinaBackgroundActivitiesStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cantina Background Others Init
//--------------------------------------------------------------------------------------------------
bool gt_CantinaBackgroundOthersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_actorIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaBackgroundOthersInit_Init () {
    gt_CantinaBackgroundOthersInit = TriggerCreate("gt_CantinaBackgroundOthersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cantina Background Others Start
//--------------------------------------------------------------------------------------------------
bool gt_CantinaBackgroundOthersStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CantinaBackgroundOthersInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaBackgroundOthersStart_Init () {
    gt_CantinaBackgroundOthersStart = TriggerCreate("gt_CantinaBackgroundOthersStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cantina Background Others Stop
//--------------------------------------------------------------------------------------------------
bool gt_CantinaBackgroundOthersStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CantinaBackgroundOthersInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaBackgroundOthersStop_Init () {
    gt_CantinaBackgroundOthersStop = TriggerCreate("gt_CantinaBackgroundOthersStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab Background Activities Start
//--------------------------------------------------------------------------------------------------
bool gt_LabBackgroundActivitiesStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_LabBackgroundActivitiesStop, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabBackgroundActivitiesStart_Init () {
    gt_LabBackgroundActivitiesStart = TriggerCreate("gt_LabBackgroundActivitiesStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab Background Activities Stop
//--------------------------------------------------------------------------------------------------
bool gt_LabBackgroundActivitiesStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_LabBackgroundActivitiesStart, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabBackgroundActivitiesStop_Init () {
    gt_LabBackgroundActivitiesStop = TriggerCreate("gt_LabBackgroundActivitiesStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Activities Start
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundActivitiesStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BridgeBackgroundActivitiesStop, true);
    if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorCade, ge_RoomID_RoomBridge) == true)) {
        TriggerExecute(gt_BridgeBackgroundCadeStart, true, false);
    }
    else {
        if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorBralik, ge_RoomID_RoomBridge) == true)) {
            TriggerExecute(gt_BridgeBackgroundBralikStart, true, false);
        }

    }
    TriggerExecute(gt_BridgeBackgroundMonkeyStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundActivitiesStart_Init () {
    gt_BridgeBackgroundActivitiesStart = TriggerCreate("gt_BridgeBackgroundActivitiesStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Activities Stop
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundActivitiesStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BridgeBackgroundActivitiesStart, true);
    TriggerExecute(gt_BridgeBackgroundBralikStop, true, false);
    TriggerExecute(gt_BridgeBackgroundCadeStop, true, false);
    TriggerExecute(gt_BridgeBackgroundMonkeyStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundActivitiesStop_Init () {
    gt_BridgeBackgroundActivitiesStop = TriggerCreate("gt_BridgeBackgroundActivitiesStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Bralik Init
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundBralikInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddBGActor(ge_ActorID_ActorBralik, PointFromId(514));
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(514), true, 10.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(513), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(512), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(509), true, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(509), true, 30.0, "Work", 30.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(512), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(513), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(514), true, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(514), true, 40.0, "", 0.0, "", 0.0, "", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundBralikInit_Init () {
    gt_BridgeBackgroundBralikInit = TriggerCreate("gt_BridgeBackgroundBralikInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Bralik Start
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundBralikStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeBackgroundBralikInit, true, false);
    gf_BGActorStart(ge_ActorID_ActorBralik);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundBralikStart_Init () {
    gt_BridgeBackgroundBralikStart = TriggerCreate("gt_BridgeBackgroundBralikStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Bralik Stop
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundBralikStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeBackgroundBralikInit, true, false);
    gf_BGActorStop(ge_ActorID_ActorBralik);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundBralikStop_Init () {
    gt_BridgeBackgroundBralikStop = TriggerCreate("gt_BridgeBackgroundBralikStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Bralik Pause
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundBralikPause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BGActorPause(ge_ActorID_ActorBralik);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundBralikPause_Init () {
    gt_BridgeBackgroundBralikPause = TriggerCreate("gt_BridgeBackgroundBralikPause_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Bralik Talk To Raynor
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundBralikTalkToRaynor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BGActorTalkToRaynor(ge_ActorID_ActorBralik);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundBralikTalkToRaynor_Init () {
    gt_BridgeBackgroundBralikTalkToRaynor = TriggerCreate("gt_BridgeBackgroundBralikTalkToRaynor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Bralik Resume
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundBralikResume_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BGActorResume(ge_ActorID_ActorBralik);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundBralikResume_Init () {
    gt_BridgeBackgroundBralikResume = TriggerCreate("gt_BridgeBackgroundBralikResume_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Cade Init
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundCadeInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddBGActor(ge_ActorID_ActorCade, PointFromId(514));
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(514), true, 10.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(513), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(512), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(509), true, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(509), true, 30.0, "Work", 30.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(512), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(513), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(514), true, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(514), true, 40.0, "", 0.0, "", 0.0, "", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundCadeInit_Init () {
    gt_BridgeBackgroundCadeInit = TriggerCreate("gt_BridgeBackgroundCadeInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Cade Start
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundCadeStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeBackgroundCadeInit, true, false);
    gf_BGActorStart(ge_ActorID_ActorCade);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundCadeStart_Init () {
    gt_BridgeBackgroundCadeStart = TriggerCreate("gt_BridgeBackgroundCadeStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Cade Stop
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundCadeStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeBackgroundCadeInit, true, false);
    gf_BGActorStop(ge_ActorID_ActorCade);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundCadeStop_Init () {
    gt_BridgeBackgroundCadeStop = TriggerCreate("gt_BridgeBackgroundCadeStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Cade Pause
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundCadePause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BGActorPause(ge_ActorID_ActorCade);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundCadePause_Init () {
    gt_BridgeBackgroundCadePause = TriggerCreate("gt_BridgeBackgroundCadePause_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Cade Talk To Raynor
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundCadeTalkToRaynor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BGActorTalkToRaynor(ge_ActorID_ActorCade);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundCadeTalkToRaynor_Init () {
    gt_BridgeBackgroundCadeTalkToRaynor = TriggerCreate("gt_BridgeBackgroundCadeTalkToRaynor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Cade Resume
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundCadeResume_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BGActorResume(ge_ActorID_ActorCade);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundCadeResume_Init () {
    gt_BridgeBackgroundCadeResume = TriggerCreate("gt_BridgeBackgroundCadeResume_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Monkey Init
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundMonkeyInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddBGActor(ge_ActorID_ActorBridgeBG1, PointFromId(968));
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(968), true, 30.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(969), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gv_bridgeBGMonkeyDoorOpenNode1 = gv_bGActors[gf_LastAddedBGActorID()].lv_nodeCount;
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(970), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gv_bridgeBGMonkeyDoorCloseNode1 = gv_bGActors[gf_LastAddedBGActorID()].lv_nodeCount;
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(971), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(1013), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(1014), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(1015), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(1016), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(1017), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(1017), true, 20.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(972), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(973), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(973), true, 40.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(974), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(510), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(975), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(975), true, 40.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(976), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(977), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(978), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gv_bridgeBGMonkeyDoorOpenNode2 = gv_bGActors[gf_LastAddedBGActorID()].lv_nodeCount;
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Move, PointFromId(979), false, 0.0, "", 0.0, "", 0.0, "", 0.0);
    gv_bridgeBGMonkeyDoorCloseNode2 = gv_bGActors[gf_LastAddedBGActorID()].lv_nodeCount;
    gf_AddBGActorNode(gf_LastAddedBGActorID(), ge_BGAcotrNodeType_Stay, PointFromId(979), true, 40.0, "", 0.0, "", 0.0, "", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundMonkeyInit_Init () {
    gt_BridgeBackgroundMonkeyInit = TriggerCreate("gt_BridgeBackgroundMonkeyInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Monkey Door Enter
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundMonkeyDoorEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bGActorID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_currentRoom == ge_RoomID_RoomBridge))) {
            return false;
        }

        if (!((EventUnit() == gf_ActorUnit(ge_ActorID_ActorBridgeBG1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bGActorID = gf_GetBGActorID(ge_ActorID_ActorBridgeBG1);
    if ((lv_bGActorID <= 0)) {
        return true;
    }

    if (((gv_bGActors[lv_bGActorID].lv_currentNodeID == gv_bridgeBGMonkeyDoorOpenNode1) || (gv_bGActors[lv_bGActorID].lv_currentNodeID == gv_bridgeBGMonkeyDoorOpenNode2))) {
        gf_OpenDoor(ge_RoomID_RoomBridge, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundMonkeyDoorEnter_Init () {
    gt_BridgeBackgroundMonkeyDoorEnter = TriggerCreate("gt_BridgeBackgroundMonkeyDoorEnter_Func");
    TriggerAddEventUnitRegion(gt_BridgeBackgroundMonkeyDoorEnter, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Monkey Door Left
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundMonkeyDoorLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bGActorID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_currentRoom == ge_RoomID_RoomBridge))) {
            return false;
        }

        if (!((EventUnit() == gf_ActorUnit(ge_ActorID_ActorBridgeBG1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bGActorID = gf_GetBGActorID(ge_ActorID_ActorBridgeBG1);
    if ((lv_bGActorID <= 0)) {
        return true;
    }

    if (((gv_bGActors[lv_bGActorID].lv_currentNodeID == gv_bridgeBGMonkeyDoorCloseNode1) || (gv_bGActors[lv_bGActorID].lv_currentNodeID == gv_bridgeBGMonkeyDoorCloseNode2))) {
        gf_CloseDoor(ge_RoomID_RoomBridge, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundMonkeyDoorLeft_Init () {
    gt_BridgeBackgroundMonkeyDoorLeft = TriggerCreate("gt_BridgeBackgroundMonkeyDoorLeft_Func");
    TriggerAddEventUnitRegion(gt_BridgeBackgroundMonkeyDoorLeft, null, RegionFromId(17), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Monkey Start
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundMonkeyStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeBackgroundMonkeyInit, true, false);
    gf_BGActorStart(ge_ActorID_ActorBridgeBG1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundMonkeyStart_Init () {
    gt_BridgeBackgroundMonkeyStart = TriggerCreate("gt_BridgeBackgroundMonkeyStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Monkey Stop
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundMonkeyStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeBackgroundMonkeyInit, true, false);
    gf_BGActorStop(ge_ActorID_ActorBridgeBG1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundMonkeyStop_Init () {
    gt_BridgeBackgroundMonkeyStop = TriggerCreate("gt_BridgeBackgroundMonkeyStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Monkey Pause
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundMonkeyPause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BGActorPause(ge_ActorID_ActorBridgeBG1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundMonkeyPause_Init () {
    gt_BridgeBackgroundMonkeyPause = TriggerCreate("gt_BridgeBackgroundMonkeyPause_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Background Monkey Resume
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBackgroundMonkeyResume_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BGActorResume(ge_ActorID_ActorBridgeBG1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBackgroundMonkeyResume_Init () {
    gt_BridgeBackgroundMonkeyResume = TriggerCreate("gt_BridgeBackgroundMonkeyResume_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hotspot Clicked
//--------------------------------------------------------------------------------------------------
bool gt_HotspotClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_actor;
    string lv_convoState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_actor = ge_ActorID_ActorNone;

    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hotspotClicked = EventUnit();
    if ((UnitGroupHasUnit(gv_labArtifacts, gf_HotspotClicked()) == true)) {
        gv_hotspotClicked = gv_labArtifactField;
    }
    else if ((gf_HotspotClicked() == gf_ActorUnit(ge_ActorID_ActorHall))) {
        gv_hotspotClicked = gv_bridgeMissionArchieves;
    }
    else if ((gf_HotspotClicked() == gf_ActorUnit(ge_ActorID_ActorAdjutant))) {
        gv_hotspotClicked = gv_marSaraBriefcase;
    }
    else if ((gf_HotspotClicked() == gv_armoryTechBanshee2)) {
        gv_hotspotClicked = gv_armoryTechBanshee1;
    }
    gf_StopFlashingUnit(gf_HotspotClicked());
    lv_convoState = gf_HotspotConvoState(gv_hotspotClicked);
    if ((lv_convoState != null)) {
        ConversationDataStateSetValue(lv_convoState, 1);
    }

    if ((gf_HotspotClicked() == gv_armoryConsole)) {
        TriggerExecute(gt_ArmoryTechConsoleClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_armorySimulator)) {
        TriggerExecute(gt_ArmorySimulatorClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_armoryTechViking)) {
        TriggerExecute(gt_ArmoryTech_VikingClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_armoryTechBanshee1)) {
        TriggerExecute(gt_ArmoryTech_BansheeClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_armoryTechDropship)) {
        TriggerExecute(gt_ArmoryTech_DropshipClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_armoryTechTank)) {
        TriggerExecute(gt_ArmoryTech_TankClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_armoryTechGhostRifle)) {
        TriggerExecute(gt_ArmoryTech_GhostClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_armoryTechFirebat)) {
        TriggerExecute(gt_ArmoryTech_FirebatClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_armoryTechMarauder)) {
        TriggerExecute(gt_ArmoryTech_MarauderClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_armoryTechSpiderMines)) {
        TriggerExecute(gt_ArmoryTech_SpiderMineClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_armoryTechSpectreCrates)) {
        TriggerExecute(gt_ArmoryTech_SpectreClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_bridgeMissionArchieves)) {
        TriggerExecute(gt_BridgeMissionArchivesClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_bridgeCommunicator)) {
        TriggerExecute(gt_BridgeCommunicatorClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_bridgeStarmap)) {
        TriggerExecute(gt_BridgeStarmapClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_cantinaArcade)) {
        TriggerExecute(gt_CantinaArcadeClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_cantinaBadge)) {
        TriggerExecute(gt_CantinaBadgeClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_cantinaJukebox)) {
        TriggerExecute(gt_CantinaJukeboxClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_cantinaMercLabtop)) {
        TriggerExecute(gt_CantinaMercClicked, true, false);
    }
    else if ((UnitGroupHasUnit(gv_cantinaTrophiesClickables, gf_HotspotClicked()) == true)) {
        TriggerExecute(gt_CantinaTrophiesItemClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_cantinaTV)) {
        TriggerExecute(gt_CantinaTVClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_charArtifact)) {
        TriggerExecute(gt_CharArtifactClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_cantinaTV)) {
        TriggerExecute(gt_CantinaTVClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_charConsole)) {
        TriggerExecute(gt_CharConsoleClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_charArtifact)) {
        TriggerExecute(gt_CharArtifactClicked, true, false);
    }
    else if ((UnitGroupHasUnit(gv_labArtifacts, gf_HotspotClicked()) == true)) {
        TriggerExecute(gt_LabArtifactClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_labConsole)) {
        TriggerExecute(gt_LabConsoleClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_labCrystal)) {
        TriggerExecute(gt_LabCrystalClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_labTubeProtoss)) {
        TriggerExecute(gt_LabTubeClickedProtoss, true, false);
    }
    else if ((gf_HotspotClicked() == gv_labTubeZerg)) {
        TriggerExecute(gt_LabTubeClickedZerg, true, false);
    }
    else if ((gf_HotspotClicked() == gv_marSaraBadge)) {
        TriggerExecute(gt_MarSaraBadgeClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_marSaraBriefcase)) {
        TriggerExecute(gt_MarSaraBriefcaseClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_marSaraHydra)) {
        TriggerExecute(gt_MarSaraHydraClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_marSaraJukebox)) {
        TriggerExecute(gt_MarSaraJukeboxClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_marSaraTV)) {
        TriggerExecute(gt_MarSaraTVClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_observatoryPainting)) {
        TriggerExecute(gt_ObservatoryPaintingClicked, true, false);
    }
    else if ((true == true)) {
        TriggerExecute(gt_ActorClicked, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HotspotClicked_Init () {
    gt_HotspotClicked = TriggerCreate("gt_HotspotClicked_Func");
    TriggerAddEventUnitClick(gt_HotspotClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hotspot Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_HotspotHighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotHighlighted(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HotspotHighlighted_Init () {
    gt_HotspotHighlighted = TriggerCreate("gt_HotspotHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_HotspotHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hotspot Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_HotspotUnhighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotHighlighted(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HotspotUnhighlighted_Init () {
    gt_HotspotUnhighlighted = TriggerCreate("gt_HotspotUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_HotspotUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmorySimulator Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmorySimulatorClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DD9F9BD5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmorySimulatorClicked_Init () {
    gt_ArmorySimulatorClicked = TriggerCreate("gt_ArmorySimulatorClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmorySimulator Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmorySimulatorLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonSimulate));
    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonBack));
    gf_HotspotLeave(ge_RoomID_RoomArmory, null, 0.6, 0.6);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmorySimulatorLeave_Init () {
    gt_ArmorySimulatorLeave = TriggerCreate("gt_ArmorySimulatorLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmorySimulator Play
//--------------------------------------------------------------------------------------------------
bool gt_ArmorySimulatorPlay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonSimulate));
    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonBack));
    Wait(0.125, c_timeReal);
    libWoLC_gf_LaunchMission("TSimulator", false, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmorySimulatorPlay_Init () {
    gt_ArmorySimulatorPlay = TriggerCreate("gt_ArmorySimulatorPlay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTechConsole Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTechConsoleClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    SoundPlay(SoundLink("UI_TechConsoleTransition_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomArmory), "Default", "Fly 01", 0.0);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(0.1, c_timeGame);
    gf_GoToRoom(ge_RoomID_RoomTechPurchase, false);
    gf_PauseNewItemInfo(true);
    libWCUI_gf_DisplayTechConsole(gt_ArmoryTechConsoleLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTechConsoleClicked_Init () {
    gt_ArmoryTechConsoleClicked = TriggerCreate("gt_ArmoryTechConsoleClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTechConsole Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTechConsoleLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseNewItemInfo(false);
    TriggerExecute(gt_ArmoryBackgroundActivitiesStart, true, false);
    gf_HotspotLeave(ge_RoomID_RoomArmory, gt_PrepareRoomArmory, 0.0, 0.6);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    libCamp_gf_HideStoryUI(true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTechConsoleLeave_Init () {
    gt_ArmoryTechConsoleLeave = TriggerCreate("gt_ArmoryTechConsoleLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Viking Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_VikingClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArmoryTech_HotspotClicked("Hotspots|ArmoryViking", "Camera_Viking", gv_armoryTechViking, gt_ArmoryTech_VikingLeave);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechViking, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_VikingClicked_Init () {
    gt_ArmoryTech_VikingClicked = TriggerCreate("gt_ArmoryTech_VikingClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Viking Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_VikingLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_armoryTechViking, "AnimBracketStop StandWork");
    gf_ArmoryTech_HotspotLeave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_VikingLeave_Init () {
    gt_ArmoryTech_VikingLeave = TriggerCreate("gt_ArmoryTech_VikingLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Banshee Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_BansheeClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArmoryTech_HotspotClicked("Hotspots|ArmoryBanshee", "Camera_Banshee", gv_armoryTechBanshee1, gt_ArmoryTech_BansheeLeave);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechBanshee1, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_BansheeClicked_Init () {
    gt_ArmoryTech_BansheeClicked = TriggerCreate("gt_ArmoryTech_BansheeClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Banshee Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_BansheeLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_armoryTechBanshee1, "AnimBracketStop StandWork");
    gf_ArmoryTech_HotspotLeave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_BansheeLeave_Init () {
    gt_ArmoryTech_BansheeLeave = TriggerCreate("gt_ArmoryTech_BansheeLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Dropship Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_DropshipClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArmoryTech_HotspotClicked("Hotspots|ArmoryMedivac", "Camera_Dropship", gv_armoryTechDropship, gt_ArmoryTech_DropshipLeave);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechDropship, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_DropshipClicked_Init () {
    gt_ArmoryTech_DropshipClicked = TriggerCreate("gt_ArmoryTech_DropshipClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Dropship Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_DropshipLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_armoryTechDropship, "AnimBracketStop StandWork");
    gf_ArmoryTech_HotspotLeave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_DropshipLeave_Init () {
    gt_ArmoryTech_DropshipLeave = TriggerCreate("gt_ArmoryTech_DropshipLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Tank Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_TankClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArmoryTech_HotspotClicked("Hotspots|ArmorySiegeTank", "Camera_SiegeTank", gv_armoryTechTank, gt_ArmoryTech_TankLeave);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechTank, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_TankClicked_Init () {
    gt_ArmoryTech_TankClicked = TriggerCreate("gt_ArmoryTech_TankClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Tank Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_TankLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_armoryTechTank, "AnimBracketStop StandWork");
    gf_ArmoryTech_HotspotLeave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_TankLeave_Init () {
    gt_ArmoryTech_TankLeave = TriggerCreate("gt_ArmoryTech_TankLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Ghost Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_GhostClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArmoryTech_HotspotClicked("Hotspots|ArmoryGhostRifle", "Camera_Ghost", null, gt_ArmoryTech_GhostLeave);
    TriggerExecute(gt_ArmoryTech_GhostClickedEasteregg, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_GhostClicked_Init () {
    gt_ArmoryTech_GhostClicked = TriggerCreate("gt_ArmoryTech_GhostClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Ghost Clicked Easter-egg
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_GhostClickedEasteregg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeReal);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechGhostRifle, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End ContentNonLooping,ContentPlayOnce");
    Wait(6.667, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechGhostRifle, "AnimBracketStop StandWork");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_GhostClickedEasteregg_Init () {
    gt_ArmoryTech_GhostClickedEasteregg = TriggerCreate("gt_ArmoryTech_GhostClickedEasteregg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Ghost Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_GhostLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_ArmoryTech_GhostClickedEasteregg);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechGhostRifle, "AnimBracketStop StandWork");
    gf_ArmoryTech_HotspotLeave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_GhostLeave_Init () {
    gt_ArmoryTech_GhostLeave = TriggerCreate("gt_ArmoryTech_GhostLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Firebat Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_FirebatClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArmoryTech_HotspotClicked("Hotspots|ArmoryFirebat", "Camera_Firebat", null, gt_ArmoryTech_FirebatLeave);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechFirebat, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_FirebatClicked_Init () {
    gt_ArmoryTech_FirebatClicked = TriggerCreate("gt_ArmoryTech_FirebatClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Firebat Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_FirebatLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_armoryTechFirebat, "AnimBracketStop StandWork");
    gf_ArmoryTech_HotspotLeave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_FirebatLeave_Init () {
    gt_ArmoryTech_FirebatLeave = TriggerCreate("gt_ArmoryTech_FirebatLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Marauder Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_MarauderClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArmoryTech_HotspotClicked("Hotspots|ArmoryMarauder", "Camera_Marauder", null, gt_ArmoryTech_MarauderLeave);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechMarauder, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_MarauderClicked_Init () {
    gt_ArmoryTech_MarauderClicked = TriggerCreate("gt_ArmoryTech_MarauderClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Marauder Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_MarauderLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_armoryTechMarauder, "AnimBracketStop StandWork");
    gf_ArmoryTech_HotspotLeave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_MarauderLeave_Init () {
    gt_ArmoryTech_MarauderLeave = TriggerCreate("gt_ArmoryTech_MarauderLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Spectre Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_SpectreClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArmoryTech_HotspotClicked("Hotspots|ArmorySpectreCrates", "Camera_Spectre", null, gt_ArmoryTech_SpectreLeave);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechSpectreCrates, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_SpectreClicked_Init () {
    gt_ArmoryTech_SpectreClicked = TriggerCreate("gt_ArmoryTech_SpectreClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_Spectre Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_SpectreLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_armoryTechSpectreCrates, "AnimBracketStop StandWork");
    gf_ArmoryTech_HotspotLeave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_SpectreLeave_Init () {
    gt_ArmoryTech_SpectreLeave = TriggerCreate("gt_ArmoryTech_SpectreLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_SpiderMine Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_SpiderMineClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArmoryTech_HotspotClicked("Hotspots|ArmorySpiderMine", "Camera_SpiderMines", null, gt_ArmoryTech_SpiderMineLeave);
    libNtve_gf_SendActorMessageToUnit(gv_armoryTechSpiderMines, "Signal AnimTypeWork");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_SpiderMineClicked_Init () {
    gt_ArmoryTech_SpiderMineClicked = TriggerCreate("gt_ArmoryTech_SpiderMineClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryTech_SpiderMine Leave
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryTech_SpiderMineLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_armoryTechSpiderMines, "Signal AnimTypeStand");
    gf_ArmoryTech_HotspotLeave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryTech_SpiderMineLeave_Init () {
    gt_ArmoryTech_SpiderMineLeave = TriggerCreate("gt_ArmoryTech_SpiderMineLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeStarmap Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeStarmapClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    libCamp_gf_HideStoryUI(false, false);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    SoundPlay(SoundLink("BridgeToStarMapTransition", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gv_bridgeRoom, "Table", "Fly", 0.0);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(0.1, c_timeGame);
    gf_TravelPanelDisplay(gt_BridgeStarmapLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeStarmapClicked_Init () {
    gt_BridgeStarmapClicked = TriggerCreate("gt_BridgeStarmapClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeStarmap Leave
//--------------------------------------------------------------------------------------------------
bool gt_BridgeStarmapLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeBackgroundActivitiesStart, true, false);
    gf_HotspotLeave(ge_RoomID_RoomBridge, gt_PrepareRoomBridge, 0.0, 0.6);
    libCamp_gf_HideStoryUI(true, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeStarmapLeave_Init () {
    gt_BridgeStarmapLeave = TriggerCreate("gt_BridgeStarmapLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeWindow Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeWindowClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BridgeWindowInitNose, true, false);
    gf_HotspotZoom(gv_bridgeWindow, "Window", "Stand", 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_armoryWindowPlanet), c_animNameDefault, "Stand", c_animFlagPlayForever, 0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_armoryWindowPlanet), c_animNameDefault, 0.5);
    gf_DisplayBackButton(gt_BridgeWindowLeave);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeWindowClicked_Init () {
    gt_BridgeWindowClicked = TriggerCreate("gt_BridgeWindowClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeWindow Leave
//--------------------------------------------------------------------------------------------------
bool gt_BridgeWindowLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotLeave(ge_RoomID_RoomBridge, null, 0.5, 0.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeWindowLeave_Init () {
    gt_BridgeWindowLeave = TriggerCreate("gt_BridgeWindowLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeWindow Init Nose
//--------------------------------------------------------------------------------------------------
bool gt_BridgeWindowInitNose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadUnitStoryMap(gv_bridgeNose);
    gf_RemoveVisibleUnit(true, gv_bridgeNose);
    UnitGroupAdd(gv_bridgeRoomUnits, gv_bridgeNose);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeWindowInitNose_Init () {
    gt_BridgeWindowInitNose = TriggerCreate("gt_BridgeWindowInitNose_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeMissionArchives Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeMissionArchivesClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, false);
    SoundPlay(SoundLink("UI_TechConsoleTransition_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    gf_HotspotZoom(gv_bridgeRoom, "BattleReport", "Fly", 0.0);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(0.1, c_timeGame);
    gv_missionArchivesOn = true;
    gf_GoToRoom(ge_RoomID_RoomMissionArchieves, false);
    CinematicFade(true, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libWCUI_gf_DisplayArchives(gt_BridgeMissionArchivesLeave, gt_BridgeMissionArchivesSceneFinish);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeMissionArchivesClicked_Init () {
    gt_BridgeMissionArchivesClicked = TriggerCreate("gt_BridgeMissionArchivesClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeMissionArchives Leave
//--------------------------------------------------------------------------------------------------
bool gt_BridgeMissionArchivesLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeBackgroundActivitiesStart, true, false);
    gf_HotspotLeave(ge_RoomID_RoomBridge, gt_PrepareRoomBridge, 0.0, 0.6);
    libCamp_gf_UpdateRoomChangePanel();
    gf_PauseNewItemInfo(false);
    libCamp_gf_HideStoryUI(true, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeMissionArchivesLeave_Init () {
    gt_BridgeMissionArchivesLeave = TriggerCreate("gt_BridgeMissionArchivesLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeMissionArchives Scene Finish
//--------------------------------------------------------------------------------------------------
bool gt_BridgeMissionArchivesSceneFinish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(ge_RoomID_RoomMissionArchieves, false);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeMissionArchivesSceneFinish_Init () {
    gt_BridgeMissionArchivesSceneFinish = TriggerCreate("gt_BridgeMissionArchivesSceneFinish_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeMissionArchives Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_BridgeMissionArchivesHighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_bridgeMissionArchieves) || (EventUnit() == gf_ActorUnit(ge_ActorID_ActorHall))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HighlightUnit(true, gv_bridgeMissionArchieves);
    gf_HotspotHighlighted(gv_bridgeMissionArchieves, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeMissionArchivesHighlighted_Init () {
    gt_BridgeMissionArchivesHighlighted = TriggerCreate("gt_BridgeMissionArchivesHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_BridgeMissionArchivesHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeMissionArchives Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_BridgeMissionArchivesUnhighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_bridgeMissionArchieves) || (EventUnit() == gf_ActorUnit(ge_ActorID_ActorHall))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HighlightUnit(false, gv_bridgeMissionArchieves);
    gf_HotspotHighlighted(gv_bridgeMissionArchieves, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeMissionArchivesUnhighlighted_Init () {
    gt_BridgeMissionArchivesUnhighlighted = TriggerCreate("gt_BridgeMissionArchivesUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_BridgeMissionArchivesUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaArcade Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CantinaArcadeClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    libCamp_gf_HideStoryUI(false, false);
    SoundPlay(SoundLink("UI_ArcadeSelect", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gv_cantinaRoom, "Zoom_07", "Fly 07", 1.5);
    gf_DisplayBackButton(gt_CantinaArcadeLeave);
    libNtve_gf_DisplayScreenButton((ge_ScreenButtonID_ButtonPlay), StringExternal("Param/Value/F8D4A69F"), 240, 80, c_anchorBottomRight, 320, 70, gt_CantinaArcadePlay);
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), "WoL_CantinaArcade_PlayButton", PlayerGroupAll());
    gf_FromatBackPlayButton(libNtve_gf_ScreenButton((ge_ScreenButtonID_ButtonPlay)));
    DialogSetPositionRelative(libNtve_gf_ScreenButtonDialog((ge_ScreenButtonID_ButtonPlay)), c_anchorRight, libNtve_gf_ScreenButtonDialog((ge_ScreenButtonID_ButtonBack)), c_anchorLeft, 20, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaArcadeClicked_Init () {
    gt_CantinaArcadeClicked = TriggerCreate("gt_CantinaArcadeClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaArcade Leave
//--------------------------------------------------------------------------------------------------
bool gt_CantinaArcadeLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonPlay));
    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonBack));
    if ((gv_jukeboxes[gv_cantinaJukeboxID].lv_playback.lv_muted == true)) {
        gf_MuteJukebox(true, gv_cantinaJukeboxID);
    }

    gf_HotspotLeave(ge_RoomID_RoomCantina, null, 0.6, 0.6);
    libCamp_gf_HideStoryUI(true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaArcadeLeave_Init () {
    gt_CantinaArcadeLeave = TriggerCreate("gt_CantinaArcadeLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaArcade Play
//--------------------------------------------------------------------------------------------------
bool gt_CantinaArcadePlay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonPlay));
    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonBack));
    Wait(0.125, c_timeReal);
    libWoLC_gf_LaunchMission("TArcade", false, PlayerDifficulty(1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaArcadePlay_Init () {
    gt_CantinaArcadePlay = TriggerCreate("gt_CantinaArcadePlay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaBadge Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CantinaBadgeClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_StopAllTransmissionConversation();
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharCooper", gf_ActorUnit(ge_ActorID_ActorCooperBarTender));
    ConversationDataRegisterUnit("Characters|CharHill", gf_ActorUnit(ge_ActorID_ActorHillMercContact));
    gf_PlayFidget("Cantinafidgetsbadge", ge_ActorID_ActorNone, ge_ActorID_ActorNone);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaBadgeClicked_Init () {
    gt_CantinaBadgeClicked = TriggerCreate("gt_CantinaBadgeClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaJukebox Init
//--------------------------------------------------------------------------------------------------
bool gt_CantinaJukeboxInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateJukebox(gv_cantinaJukebox, true);
    gv_cantinaJukeboxID = gf_LastCreatedJukeboxID();
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("Jukebox_Music00", -1), StringExternal("Param/Value/8F9CC8BC"), StringExternal("Param/Value/FEDA652A"));
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("Jukebox_Music01", -1), StringExternal("Param/Value/3B9B15C3"), StringExternal("Param/Value/15DEAB6C"));
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("Jukebox_Music02", -1), StringExternal("Param/Value/97430B0B"), StringExternal("Param/Value/0EBA2984"));
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("Jukebox_Music03", -1), StringExternal("Param/Value/52964854"), StringExternal("Param/Value/36D31603"));
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("Jukebox_Music04", -1), StringExternal("Param/Value/49AE55CE"), StringExternal("Param/Value/6334C712"));
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("Jukebox_Music05", -1), StringExternal("Param/Value/263B33AF"), StringExternal("Param/Value/F822AA75"));
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("Jukebox_Music06", -1), StringExternal("Param/Value/21F4A1A0"), StringExternal("Param/Value/E36577BB"));
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("Jukebox_Music07", -1), StringExternal("Param/Value/DC642613"), StringExternal("Param/Value/53971E4F"));
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("Jukebox_Music08", -1), StringExternal("Param/Value/06407F30"), StringExternal("Param/Value/4D1D8F92"));
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("Jukebox_Music09", -1), StringExternal("Param/Value/2C09E45A"), StringExternal("Param/Value/D47C6B4D"));
    gf_AddTrackToJukebox(gv_cantinaJukeboxID, SoundLink("EasterEggMusic_TerranUpTheNight", -1), StringExternal("Param/Value/E3037797"), StringExternal("Param/Value/3A42BE26"));
    gf_SetJukeboxFidget(gv_cantinaJukeboxID, "CantinafidgetsJukebox", "CantinafidgetsJukeboxoff");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaJukeboxInit_Init () {
    gt_CantinaJukeboxInit = TriggerCreate("gt_CantinaJukeboxInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaJukebox Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_CantinaJukeboxClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaJukeboxClickedPreCallback_Init () {
    gt_CantinaJukeboxClickedPreCallback = TriggerCreate("gt_CantinaJukeboxClickedPreCallback_Func");
    TriggerEnable(gt_CantinaJukeboxClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaJukebox Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_CantinaJukeboxClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraNone) && (gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraCustom)) {
        TriggerExecute(gt_CantinaJukeboxClickedCamera, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaJukeboxClickedPostCallback_Init () {
    gt_CantinaJukeboxClickedPostCallback = TriggerCreate("gt_CantinaJukeboxClickedPostCallback_Func");
    TriggerEnable(gt_CantinaJukeboxClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaJukebox Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_CantinaJukeboxClickedCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomCantina), "Zoom_05", "Fly 05", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomCantina)), gv_aNIMID_ZOOM, 100.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomCantina)), gv_aNIMID_ZOOM, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaJukeboxClickedCamera_Init () {
    gt_CantinaJukeboxClickedCamera = TriggerCreate("gt_CantinaJukeboxClickedCamera_Func");
    TriggerEnable(gt_CantinaJukeboxClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaJukebox Clicked Fidget
//--------------------------------------------------------------------------------------------------
bool gt_CantinaJukeboxClickedFidget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_cantinaJukeboxPlayed == false) || (gf_JukeboxIsShutdown(gv_cantinaJukeboxID) == true))) {
        gv_cantinaJukeboxPlayed = true;
        ConversationDataRegisterUnit(gf_ConvoCharacter(ge_ActorID_ActorRaynor), gf_ActorUnit(ge_ActorID_ActorRaynor));
        ConversationDataRegisterUnit(gf_ConvoCharacter(ge_ActorID_ActorTychus), gf_ActorUnit(ge_ActorID_ActorTychus));
        ConversationDataRegisterUnit(gf_ConvoCharacter(ge_ActorID_ActorCooperBarTender), gf_ActorUnit(ge_ActorID_ActorCooperBarTender));
        ConversationDataRegisterUnit(gf_ConvoCharacter(ge_ActorID_ActorYbarraMiscMerc), gf_ActorUnit(ge_ActorID_ActorYbarraMiscMerc));
        ConversationDataRegisterUnit(gf_ConvoCharacter(ge_ActorID_ActorHillMercContact), gf_ActorUnit(ge_ActorID_ActorHillMercContact));
        gf_PlayFidget("CantinafidgetsJukebox", ge_ActorID_ActorNone, ge_ActorID_ActorNone);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaJukeboxClickedFidget_Init () {
    gt_CantinaJukeboxClickedFidget = TriggerCreate("gt_CantinaJukeboxClickedFidget_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaJukebox Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CantinaJukeboxClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jukeboxID = gf_GetJukeboxID(gf_HotspotClicked());
    if ((lv_jukeboxID < 0)) {
        return true;
    }

    gf_JukeboxClicked(gf_HotspotClicked());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaJukeboxClicked_Init () {
    gt_CantinaJukeboxClicked = TriggerCreate("gt_CantinaJukeboxClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cantina Merc Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CantinaMercClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    SoundPlay(SoundLink("UI_TechConsoleTransition_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    TriggerExecute(gt_CantinaMercFidget, true, false);
    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomCantina), "Zoom_04", "Fly 04", 0.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomCantina)), gv_aNIMID_ZOOM, 0.4);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(0.1, c_timeGame);
    gf_MercDisplay(gt_CantinaMercLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaMercClicked_Init () {
    gt_CantinaMercClicked = TriggerCreate("gt_CantinaMercClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cantina Merc Fidget
//--------------------------------------------------------------------------------------------------
bool gt_CantinaMercFidget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PlayFidget("CantinaFidgetsHill", ge_ActorID_ActorHillMercContact, ge_ActorID_ActorNone);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaMercFidget_Init () {
    gt_CantinaMercFidget = TriggerCreate("gt_CantinaMercFidget_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cantina Merc Leave
//--------------------------------------------------------------------------------------------------
bool gt_CantinaMercLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseNewItemInfo(false);
    gf_StopAllTransmissionConversation();
    gf_HotspotLeave(ge_RoomID_RoomCantina, null, 0.0, 0.6);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    libCamp_gf_HideStoryUI(true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaMercLeave_Init () {
    gt_CantinaMercLeave = TriggerCreate("gt_CantinaMercLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTrophies Frame Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTrophiesFrameClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    Wait(0.1, c_timeGame);
    libCamp_gf_HideStoryUI(false, false);
    gf_HotspotZoom(gv_cantinaRoom, "Zoom_10", "Fly 10", 1.334);
    gv_cantinaTrophiesZoomedIn = true;
    gf_TurnClickablesOnOff(gv_cantinaTrophiesClickables, true);
    gf_DisplayBackButton(gt_CantinaTrophiesLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTrophiesFrameClicked_Init () {
    gt_CantinaTrophiesFrameClicked = TriggerCreate("gt_CantinaTrophiesFrameClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTrophies Item Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTrophiesItemClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_convoState;

    // Automatic Variable Declarations
    unit auto2563D8F3_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, false);
    gf_StopAllTransmissionConversation();
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    auto2563D8F3_val = gf_HotspotClicked();
    if (auto2563D8F3_val == gv_cantinaTrophyHydraClaw) {
        gf_HotspotZoom(gv_cantinaRoom, "Zoom_17", "Fly 10", 1.334);
        lv_convoState = "Hotspots|CantinaTrophyClaw";
    }
    else if (auto2563D8F3_val == gv_cantinaTrophyHansonA) {
        gf_HotspotZoom(gv_cantinaRoom, "Zoom_11", "Fly 10", 1.334);
        lv_convoState = "Hotspots|CantinaTrophyHansonA";
    }
    else if (auto2563D8F3_val == gv_cantinaTrophyHansonB) {
        gf_HotspotZoom(gv_cantinaRoom, "Zoom_12", "Fly 10", 1.334);
        lv_convoState = "Hotspots|CantinaTrophyHansonB";
    }
    else if (auto2563D8F3_val == gv_cantinaTrophyHorner) {
        gf_HotspotZoom(gv_cantinaRoom, "Zoom_13", "Fly 10", 1.334);
        lv_convoState = "Hotspots|CantinaTrophyHorner";
    }
    else if (auto2563D8F3_val == gv_cantinaTrophyToshA) {
        gf_HotspotZoom(gv_cantinaRoom, "Zoom_14", "Fly 10", 1.334);
        lv_convoState = "Hotspots|CantinaTrophyToshA";
    }
    else if (auto2563D8F3_val == gv_cantinaTrophyToshB) {
        gf_HotspotZoom(gv_cantinaRoom, "Zoom_15", "Fly 10", 1.334);
        lv_convoState = "Hotspots|CantinaTrophyToshB";
    }
    else {
        return true;
    }
    gf_DisplayIntroTextBox(ConversationDataStateText(lv_convoState, "Header"), "CantinaTrophyTitle", ConversationDataStateText(lv_convoState, "Description"), "CantinaTrophyText", c_anchorTopRight, FixedToInt(ConversationDataStateFixedValue(lv_convoState, "OffsetX")), FixedToInt(ConversationDataStateFixedValue(lv_convoState, "OffsetY")), FixedToInt(ConversationDataStateFixedValue(lv_convoState, "Width")), FixedToInt(ConversationDataStateFixedValue(lv_convoState, "Height")));
    gf_DisplayBackButton(gt_CantinaTrophiesLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTrophiesItemClicked_Init () {
    gt_CantinaTrophiesItemClicked = TriggerCreate("gt_CantinaTrophiesItemClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTrophies Leave
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTrophiesLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideIntroTextBox(false);
    if ((gv_jukeboxes[gv_cantinaJukeboxID].lv_playback.lv_muted == true)) {
        gf_MuteJukebox(true, gv_cantinaJukeboxID);
    }

    gf_HotspotLeave(ge_RoomID_RoomCantina, null, 0.6, 0.6);
    gf_TurnClickablesOnOff(gv_clickables, true);
    libCamp_gf_HideStoryUI(true, false);
    gv_cantinaTrophiesZoomedIn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTrophiesLeave_Init () {
    gt_CantinaTrophiesLeave = TriggerCreate("gt_CantinaTrophiesLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTrophies Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTrophiesHighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_cantinaTrophiesZoomedIn == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_cantinaTrophiesClickables, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HighlightUnit(true, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTrophiesHighlighted_Init () {
    gt_CantinaTrophiesHighlighted = TriggerCreate("gt_CantinaTrophiesHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_CantinaTrophiesHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTrophies Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTrophiesUnhighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_cantinaTrophiesZoomedIn == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_cantinaTrophiesClickables, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HighlightUnit(false, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTrophiesUnhighlighted_Init () {
    gt_CantinaTrophiesUnhighlighted = TriggerCreate("gt_CantinaTrophiesUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_CantinaTrophiesUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTV Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTVClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gf_CurrentTVNews2(), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTVClicked_Init () {
    gt_CantinaTVClicked = TriggerCreate("gt_CantinaTVClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharArtifact Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_CharArtifactClickedCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomChar), "Zoom_01", "Fly 01", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomChar)), gv_aNIMID_ZOOM, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharArtifactClickedCamera_Init () {
    gt_CharArtifactClickedCamera = TriggerCreate("gt_CharArtifactClickedCamera_Func");
    TriggerEnable(gt_CharArtifactClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharArtifact Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CharArtifactClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_warfield;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_warfield = ge_ActorID_ActorNone;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_StopAllTransmissionConversation();
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceConversation);
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    ConversationDataPreloadLines("CharFidgetsArtifact");
    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomChar), "Zoom_01", "Fly 01", 0.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomChar)), gv_aNIMID_ZOOM, 0.4);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_CharArtifactOpen, true, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    gf_RoomScenePrepare(ge_RoomID_RoomChar, ge_SceneType_Convo);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynorMarine, ge_ActorID_ActorTychus, ge_RoomID_RoomChar, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    gf_ActorScenePrepare(ge_ActorID_ActorTychus, ge_ActorID_ActorNone, ge_RoomID_RoomChar, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_ActorScenePrepare(ge_ActorID_ActorWarfieldAOD, ge_ActorID_ActorNone, ge_RoomID_RoomChar, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorWarfieldAOD));
    TriggerExecute(gt_CharTychusClickedPreCallback, true, false);
    TriggerExecute(gt_CharArtifactClickedSkippable, true, true);
    gf_StopAllTransmissionConversation();
    if ((gv_charArtifactOpenSound != null)) {
        SoundStop(gv_charArtifactOpenSound, true);
        gv_charArtifactOpenSound = null;
    }

    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    TriggerStop(gt_CharArtifactOpen);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gv_charArtifact, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charArtifact), c_animNameDefault, "Stand B", c_animFlagPlayForever, 0.0);
    TriggerExecute(gt_CharTychusClickedPostCallback, true, false);
    gf_ActorSceneClearAll();
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(218));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(221));
    gf_ResetActorToLocation(ge_ActorID_ActorWarfieldAOD, PointFromId(229));
    gf_RoomSceneClearAll();
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomChar)), gv_aNIMID_ZOOM);
    gf_ViewRoomCamera(ge_RoomID_RoomChar, PlayerGroupAll(), 0.0);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharArtifactClicked_Init () {
    gt_CharArtifactClicked = TriggerCreate("gt_CharArtifactClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharArtifact Open
//--------------------------------------------------------------------------------------------------
bool gt_CharArtifactOpen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("SM_CharBattlezoneArtifact_Stand_C_Start", -1), PlayerGroupAll(), PointFromId(1083), 0.0, 100.0, 0.0);
    gv_charArtifactOpenSound = SoundLastPlayed();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charArtifact), c_animNameDefault, "Stand C Start", c_animFlagNonLooping, 0.0);
    Wait(5.542, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charArtifact), c_animNameDefault, "Stand C", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharArtifactOpen_Init () {
    gt_CharArtifactOpen = TriggerCreate("gt_CharArtifactOpen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharArtifact Clicked Skippable
//--------------------------------------------------------------------------------------------------
bool gt_CharArtifactClickedSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_warfield;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_warfield = ge_ActorID_ActorNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(1046));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(1048));
    gf_ResetActorToLocation(ge_ActorID_ActorWarfieldAOD, PointFromId(228));
    CameraApplyInfo(1, CameraInfoFromId(1052), 0.0, -1, 20, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(1, CameraInfoFromId(1082), (0.5 + (SoundLengthSync(SoundLink("CharFidgetsArtifactTychus00001", -1)) / 2.0)), -1, 20, true);
    Wait(0.5, c_timeReal);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    ConversationDataRegisterUnit("Characters|CharTychus", gf_ActorUnit(ge_ActorID_ActorTychus));
    ConversationDataRegisterUnit("Characters|CharWarfield", gf_ActorUnit(ge_ActorID_ActorWarfieldAOD));
    gf_ConvoSetting(ge_RoomID_RoomChar, ge_ActorID_ActorRaynorMarine, ge_ActorID_ActorTychus, null, ge_ActorID_ActorWarfieldAOD, null, null, gt_CharArtifactClickedCameraChange);
    ConversationDataRun("CharFidgetsArtifact", PlayerGroupAll(), c_conversationSkipSimple, true);
    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharArtifactClickedSkippable_Init () {
    gt_CharArtifactClickedSkippable = TriggerCreate("gt_CharArtifactClickedSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharArtifact Clicked Camera Change
//--------------------------------------------------------------------------------------------------
bool gt_CharArtifactClickedCameraChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto03995A5B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_convoCameraChangeResult = false;
    TriggerExecute(gt_CharArtifactClickedCameraChangeNoChange, true, false);
    auto03995A5B_val = ConversationDataActiveSound();
    if (auto03995A5B_val == "CharFidgetsArtifactTychus00001") {
    }
    else if (auto03995A5B_val == "CharFidgetsArtifactRaynor00002") {
        gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(1047));
        CameraApplyInfo(1, CameraInfoFromId(1050), 0.0, -1, 10, true);
    }
    else if (auto03995A5B_val == "CharFidgetsArtifactWarfield00003") {
        CameraApplyInfo(1, CameraInfoFromId(1051), 0.0, -1, 10, true);
    }
    else if (auto03995A5B_val == "CharFidgetsArtifactTychus00004") {
        CameraApplyInfo(1, CameraInfoFromId(1054), 0.0, -1, 10, true);
    }
    else if (auto03995A5B_val == "CharFidgetsArtifactRaynor00005") {
        CameraApplyInfo(1, CameraInfoFromId(1053), 0.0, -1, 10, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharArtifactClickedCameraChange_Init () {
    gt_CharArtifactClickedCameraChange = TriggerCreate("gt_CharArtifactClickedCameraChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharArtifact Clicked Camera Change No Change
//--------------------------------------------------------------------------------------------------
bool gt_CharArtifactClickedCameraChangeNoChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto913B3238_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    auto913B3238_val = ConversationDataActiveSound();
    if (auto913B3238_val == "CharFidgetsArtifactTychus00001") {
        Wait((SoundLengthSync(SoundLink("CharFidgetsArtifactTychus00001", -1)) / 2.0), c_timeGame);
        CameraApplyInfo(1, CameraInfoFromId(628), 0.0, -1, 10, true);
    }
    else if (auto913B3238_val == "CharFidgetsArtifactRaynor00002") {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharArtifactClickedCameraChangeNoChange_Init () {
    gt_CharArtifactClickedCameraChangeNoChange = TriggerCreate("gt_CharArtifactClickedCameraChangeNoChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharConsole Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CharConsoleClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    libCamp_gf_HideStoryUI(false, false);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    SoundPlay(SoundLink("BridgeToStarMapTransition", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomChar), "Zoom_02", "Fly 01", 0.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomChar)), gv_aNIMID_ZOOM, 0.4);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(0.1, c_timeGame);
    gf_TravelPanelDisplay(gt_CharConsoleLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharConsoleClicked_Init () {
    gt_CharConsoleClicked = TriggerCreate("gt_CharConsoleClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharConsole Leave
//--------------------------------------------------------------------------------------------------
bool gt_CharConsoleLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CharTychusAnimationStart();
    gf_HotspotLeave(ge_RoomID_RoomChar, gt_PrepareRoomChar, 0.0, 0.6);
    gf_PauseNewItemInfo(false);
    libCamp_gf_HideStoryUI(true, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharConsoleLeave_Init () {
    gt_CharConsoleLeave = TriggerCreate("gt_CharConsoleLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabArtifact Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_LabArtifactClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorHanson, ge_RoomID_RoomLab) == true)) {
        gf_ResetActorToLocation(ge_ActorID_ActorStetmann, PointFromId(404));
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, gf_LabRaynorHome());
        gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(33));
        gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar2Closeup, CameraInfoFromId(75));
        gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar2Medium, CameraInfoFromId(18));
    }
    else {
        ConversationDataPreloadLines("LabFidgetsArtifact");
        gf_ResetActorToLocation(ge_ActorID_ActorStetmann, PointFromId(404));
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, gf_LabRaynorHome());
        gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(33));
        gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraRaynorCloseup, CameraInfoFromId(127));
        gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraRaynorMedium, CameraInfoFromId(76));
        gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar1Closeup, CameraInfoFromId(75));
        gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar1Medium, CameraInfoFromId(18));
        gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraMaster, CameraInfoFromId(142));
    }
    TriggerEnable(gt_LabArtifactClickedPositionCharacters, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabArtifactClickedPreCallback_Init () {
    gt_LabArtifactClickedPreCallback = TriggerCreate("gt_LabArtifactClickedPreCallback_Func");
    TriggerEnable(gt_LabArtifactClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabArtifact Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_LabArtifactClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraNone) && (gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraCustom)) {
        TriggerExecute(gt_LabArtifactClickedCamera, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabArtifactClickedPostCallback_Init () {
    gt_LabArtifactClickedPostCallback = TriggerCreate("gt_LabArtifactClickedPostCallback_Func");
    TriggerEnable(gt_LabArtifactClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabArtifact Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_LabArtifactClickedCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_visibleUnits, gv_labArtifact2) == true)) {
        gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomLab), "Zoom_05", "Fly 05", 0.0);
    }
    else {
        gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomLab), "Zoom_06", "Fly 05", 0.0);
    }
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomLab)), gv_aNIMID_ZOOM, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabArtifactClickedCamera_Init () {
    gt_LabArtifactClickedCamera = TriggerCreate("gt_LabArtifactClickedCamera_Func");
    TriggerEnable(gt_LabArtifactClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabArtifact Clicked
//--------------------------------------------------------------------------------------------------
bool gt_LabArtifactClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceConversation);
    libCamp_gf_HideStoryUI(false, true);
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    if ((UnitGroupHasUnit(gv_visibleUnits, gv_labArtifact2) == true)) {
        gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomLab), "Zoom_05", "Fly 05", 0.0);
    }
    else {
        gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomLab), "Zoom_06", "Fly 05", 0.0);
    }
    Wait(1.333, c_timeReal);
    gv_roomSceneLightingAnimation_ShouldPlay = false;
    if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorHanson, ge_RoomID_RoomLab) == true)) {
        gf_Convo("LabFidgetsArtifact", ge_RoomID_RoomLab, ge_ActorID_ActorRaynor, gf_LabRaynorHome(), ge_ActorID_ActorHanson, null, PointFromId(33), ge_ActorID_ActorStetmann, null, PointFromId(404), gt_LabArtifactClickedPreCallback, gt_LabArtifactClickedPostCallback, true, false, gt_LabArtifactClickedCamera, gt_LabArtifactClickedCameraChange);
    }
    else {
        gf_Convo("LabFidgetsArtifact", ge_RoomID_RoomLab, ge_ActorID_ActorRaynor, gf_LabRaynorHome(), ge_ActorID_ActorStetmann, null, PointFromId(404), ge_ActorID_ActorHanson, gv_labHansonCameras, PointFromId(33), gt_LabArtifactClickedPreCallback, gt_LabArtifactClickedPostCallback, true, false, gt_LabArtifactClickedCamera, gt_LabArtifactClickedCameraChange);
    }
    TriggerStop(gt_LabArtifactClickedCameraChange);
    TriggerStop(gt_LabArtifactClickedCameraChangeNoWait);
    gv_roomSceneLightingAnimation_ShouldPlay = true;
    Wait(1.0, c_timeReal);
    gf_StopAllTransmissionConversation();
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCamp_gf_HideStoryUI(true, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomLab)), gv_aNIMID_ZOOM);
    gf_ViewRoomCamera(ge_RoomID_RoomLab, PlayerGroupAll(), 0.0);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabArtifactClicked_Init () {
    gt_LabArtifactClicked = TriggerCreate("gt_LabArtifactClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabArtifact Clicked Camera Change
//--------------------------------------------------------------------------------------------------
bool gt_LabArtifactClickedCameraChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoC9863F53_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerStop(gt_LabArtifactClickedCameraChangeNoWait);
    TriggerExecute(gt_LabArtifactClickedCameraChangeNoWait, true, false);
    autoC9863F53_val = ConversationDataActiveSound();
    {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabArtifactClickedCameraChange_Init () {
    gt_LabArtifactClickedCameraChange = TriggerCreate("gt_LabArtifactClickedCameraChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabArtifact Clicked Camera Change No Wait
//--------------------------------------------------------------------------------------------------
bool gt_LabArtifactClickedCameraChangeNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoFD9F2057_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_LabArtifactClickedPositionCharacters, true, false);
    autoFD9F2057_val = ConversationDataActiveSound();
    if (autoFD9F2057_val == "LabFidgetsArtifactRaynor00017") {
        Wait((SoundLengthSync(SoundLink("LabFidgetsArtifactRaynor00017", -1)) / 2.0), c_timeGame);
        TriggerExecute(gt_LabArtifactClickedCamera, true, false);
        Wait(1.0, c_timeGame);
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationDefault);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabArtifactClickedCameraChangeNoWait_Init () {
    gt_LabArtifactClickedCameraChangeNoWait = TriggerCreate("gt_LabArtifactClickedCameraChangeNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabArtifact Clicked Position Characters
//--------------------------------------------------------------------------------------------------
bool gt_LabArtifactClickedPositionCharacters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_ActorIsEnabledInRoom(ge_ActorID_ActorHanson, ge_RoomID_RoomLab) == true)) {
        gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(210));
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(212));
    }
    else {
        gf_ResetActorToLocation(ge_ActorID_ActorStetmann, PointFromId(269));
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(282));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabArtifactClickedPositionCharacters_Init () {
    gt_LabArtifactClickedPositionCharacters = TriggerCreate("gt_LabArtifactClickedPositionCharacters_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabArtifact Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_LabArtifactHighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto000CA04C_g;
    int auto000CA04C_u;
    unit auto000CA04C_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_labArtifacts, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto000CA04C_g = gv_labArtifacts;
    auto000CA04C_u = UnitGroupCount(auto000CA04C_g, c_unitCountAll);
    for (;; auto000CA04C_u -= 1) {
        auto000CA04C_var = UnitGroupUnitFromEnd(auto000CA04C_g, auto000CA04C_u);
        if (auto000CA04C_var == null) { break; }
        gf_HighlightUnit(true, auto000CA04C_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabArtifactHighlighted_Init () {
    gt_LabArtifactHighlighted = TriggerCreate("gt_LabArtifactHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_LabArtifactHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabArtifact Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_LabArtifactUnhighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD316BE13_g;
    int autoD316BE13_u;
    unit autoD316BE13_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_labArtifacts, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD316BE13_g = gv_labArtifacts;
    autoD316BE13_u = UnitGroupCount(autoD316BE13_g, c_unitCountAll);
    for (;; autoD316BE13_u -= 1) {
        autoD316BE13_var = UnitGroupUnitFromEnd(autoD316BE13_g, autoD316BE13_u);
        if (autoD316BE13_var == null) { break; }
        gf_HighlightUnit(false, autoD316BE13_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabArtifactUnhighlighted_Init () {
    gt_LabArtifactUnhighlighted = TriggerCreate("gt_LabArtifactUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_LabArtifactUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabConsole Clicked
//--------------------------------------------------------------------------------------------------
bool gt_LabConsoleClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    SoundPlay(SoundLink("UI_TechConsoleTransition_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    gf_HotspotZoom(gv_labRoom, "Zoom_01", "Fly 01", 0.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomLab)), gv_aNIMID_ZOOM, 0.6);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(0.1, c_timeGame);
    gf_GoToRoom(ge_RoomID_RoomLabResearch, false);
    gf_PauseNewItemInfo(true);
    gf_LabResearchDisplay(gt_LabConsoleLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabConsoleClicked_Init () {
    gt_LabConsoleClicked = TriggerCreate("gt_LabConsoleClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabConsole Leave
//--------------------------------------------------------------------------------------------------
bool gt_LabConsoleLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PauseNewItemInfo(false);
    gf_StopAllTransmissionConversation();
    gf_HotspotLeave(ge_RoomID_RoomLab, null, 0.0, 0.6);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    libCamp_gf_HideStoryUI(true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabConsoleLeave_Init () {
    gt_LabConsoleLeave = TriggerCreate("gt_LabConsoleLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabCrystal Clicked
//--------------------------------------------------------------------------------------------------
bool gt_LabCrystalClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_MissionStatusCheck("TZeratul04", libWoLC_ge_MissionStatus_Completed) == true)) {
        TriggerExecute(gt_LabCrystalNoMissionClicked, true, true);
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    libCamp_gf_HideStoryUI(false, true);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    SoundPlay(SoundLink("BridgeToStarMapTransition", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gv_labRoom, "Zoom_03", "Fly 03", 0.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomLab)), gv_aNIMID_ZOOM, 0.65);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(0.1, c_timeGame);
    gf_TravelPanelZeratulDisplay(gt_LabCrystalLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabCrystalClicked_Init () {
    gt_LabCrystalClicked = TriggerCreate("gt_LabCrystalClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabCrystal Leave
//--------------------------------------------------------------------------------------------------
bool gt_LabCrystalLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_HideStoryUI(true, true);
    gf_HotspotLeave(ge_RoomID_RoomLab, gt_PrepareRoomLab, 0.0, 0.6);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabCrystalLeave_Init () {
    gt_LabCrystalLeave = TriggerCreate("gt_LabCrystalLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabCrystal No Mission Clicked 
//--------------------------------------------------------------------------------------------------
bool gt_LabCrystalNoMissionClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_convoID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    libCamp_gf_HideStoryUI(false, false);
    gf_PauseNewItemInfo(true);
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gv_labRoom, "Zoom_03", "Fly 03", 1.2);
    lv_convoID = "Hotspots|CantinaTrophyZeratul";
    gf_DisplayIntroTextBox(ConversationDataStateText(lv_convoID, "Header"), "CantinaTrophyTitle", ConversationDataStateText(lv_convoID, "Description"), "CantinaTrophyText", c_anchorTopRight, FixedToInt(ConversationDataStateFixedValue(lv_convoID, "OffsetX")), FixedToInt(ConversationDataStateFixedValue(lv_convoID, "OffsetY")), FixedToInt(ConversationDataStateFixedValue(lv_convoID, "Width")), FixedToInt(ConversationDataStateFixedValue(lv_convoID, "Height")));
    gf_DisplayBackButton(gt_LabCrystalNoMissionLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabCrystalNoMissionClicked_Init () {
    gt_LabCrystalNoMissionClicked = TriggerCreate("gt_LabCrystalNoMissionClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabCrystal No Mission Leave
//--------------------------------------------------------------------------------------------------
bool gt_LabCrystalNoMissionLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideIntroTextBox(false);
    gf_PauseNewItemInfo(false);
    gf_HotspotLeave(ge_RoomID_RoomLab, gt_PrepareRoomLab, 0.0, 0.6);
    libCamp_gf_HideStoryUI(true, false);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabCrystalNoMissionLeave_Init () {
    gt_LabCrystalNoMissionLeave = TriggerCreate("gt_LabCrystalNoMissionLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabTube Clicked Protoss
//--------------------------------------------------------------------------------------------------
bool gt_LabTubeClickedProtoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    string lv_headerIndex;
    string lv_textIndex;

    // Automatic Variable Declarations
    const int auto0D914CBA_ae = 5;
    const int auto0D914CBA_ai = 1;

    // Variable Initialization
    lv_headerIndex = "";
    lv_textIndex = "";

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    libCamp_gf_HideStoryUI(false, false);
    gf_PauseNewItemInfo(true);
    SoundPlay(SoundLink("UI_GenericTransition_Quick", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomLab), "Zoom_08", "Fly 05", 0.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomLab)), gv_aNIMID_ZOOM, 0.6);
    Wait(0.2, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorStetmann));
    gf_RemoveVisibleUnit(false, gv_labTubeZerg);
    lv_index = 0;
    for ( ; ( (auto0D914CBA_ai >= 0 && lv_index <= auto0D914CBA_ae) || (auto0D914CBA_ai < 0 && lv_index >= auto0D914CBA_ae) ) ; lv_index += auto0D914CBA_ai ) {
        gf_RemoveVisibleUnit(false, gv_labTubeSamples[2][lv_index]);
    }
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_RemoveVisibleUnit(false, gv_labConsole);
    gf_RemoveVisibleUnit(false, UnitFromId(590));
    CameraApplyInfo(1, CameraInfoFromId(850), 0.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") < 5)) {
        lv_headerIndex = "Header";
        lv_textIndex = "Description";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") < 10) && (libWoLC_gf_RewardTotalEarned("ProtossResearch") >= 5)) {
        lv_headerIndex = "Header 2";
        lv_textIndex = "Description 2";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") < 15) && (libWoLC_gf_RewardTotalEarned("ProtossResearch") >= 10)) {
        lv_headerIndex = "Header 3";
        lv_textIndex = "Description 3";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") < 20) && (libWoLC_gf_RewardTotalEarned("ProtossResearch") >= 15)) {
        lv_headerIndex = "Header 4";
        lv_textIndex = "Description 4";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") < 25) && (libWoLC_gf_RewardTotalEarned("ProtossResearch") >= 20)) {
        lv_headerIndex = "Header 5";
        lv_textIndex = "Description 5";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ProtossResearch") >= 25)) {
        lv_headerIndex = "Header 6";
        lv_textIndex = "Description 6";
    }
    gf_DisplayIntroTextBox(ConversationDataStateText("Hotspots|LabTubeProtoss", lv_headerIndex), "LabTubeTitle", ConversationDataStateText("Hotspots|LabTubeProtoss", lv_textIndex), "LabTubeText", c_anchorTopRight, 50, 100, 550, 790);
    gf_DisplayBackButton(gt_LabTubeLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabTubeClickedProtoss_Init () {
    gt_LabTubeClickedProtoss = TriggerCreate("gt_LabTubeClickedProtoss_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabTube Clicked Zerg
//--------------------------------------------------------------------------------------------------
bool gt_LabTubeClickedZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    string lv_headerIndex;
    string lv_textIndex;
    string lv_textStyle;

    // Automatic Variable Declarations
    const int auto3110D905_ae = 5;
    const int auto3110D905_ai = 1;

    // Variable Initialization
    lv_headerIndex = "";
    lv_textIndex = "";
    lv_textStyle = "";

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    libCamp_gf_HideStoryUI(false, false);
    gf_PauseNewItemInfo(true);
    SoundPlay(SoundLink("UI_GenericTransition_Quick", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomLab), "Zoom_07", "Fly 05", 0.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomLab)), gv_aNIMID_ZOOM, 0.6);
    Wait(0.2, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorStetmann));
    gf_RemoveVisibleUnit(false, gv_labTubeProtoss);
    lv_index = 0;
    for ( ; ( (auto3110D905_ai >= 0 && lv_index <= auto3110D905_ae) || (auto3110D905_ai < 0 && lv_index >= auto3110D905_ae) ) ; lv_index += auto3110D905_ai ) {
        gf_RemoveVisibleUnit(false, gv_labTubeSamples[1][lv_index]);
    }
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_RemoveVisibleUnit(false, gv_labConsole);
    gf_RemoveVisibleUnit(false, UnitFromId(590));
    CameraApplyInfo(1, CameraInfoFromId(851), 0.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    lv_textStyle = "LabTubeText";
    if ((libWoLC_gf_RewardTotalEarned("ZergResearch") < 5)) {
        lv_headerIndex = "Header";
        lv_textIndex = "Description";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ZergResearch") < 10) && (libWoLC_gf_RewardTotalEarned("ZergResearch") >= 5)) {
        lv_headerIndex = "Header 2";
        lv_textIndex = "Description 2";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ZergResearch") < 15) && (libWoLC_gf_RewardTotalEarned("ZergResearch") >= 10)) {
        lv_headerIndex = "Header 3";
        lv_textIndex = "Description 3";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ZergResearch") < 20) && (libWoLC_gf_RewardTotalEarned("ZergResearch") >= 15)) {
        lv_headerIndex = "Header 4";
        lv_textIndex = "Description 4";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ZergResearch") < 25) && (libWoLC_gf_RewardTotalEarned("ZergResearch") >= 20)) {
        lv_headerIndex = "Header 5";
        lv_textIndex = "Description 5";
    }
    else if ((libWoLC_gf_RewardTotalEarned("ZergResearch") >= 25)) {
        lv_headerIndex = "Header 6";
        lv_textIndex = "Description 6";
    }
    gf_DisplayIntroTextBox(ConversationDataStateText("Hotspots|LabTubeZerg", lv_headerIndex), "LabTubeTitle", ConversationDataStateText("Hotspots|LabTubeZerg", lv_textIndex), lv_textStyle, c_anchorTopLeft, 50, 100, 550, 790);
    gf_DisplayBackButton(gt_LabTubeLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabTubeClickedZerg_Init () {
    gt_LabTubeClickedZerg = TriggerCreate("gt_LabTubeClickedZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabTube Leave
//--------------------------------------------------------------------------------------------------
bool gt_LabTubeLeave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto9B6070FC_ae = 5;
    const int auto9B6070FC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideIntroTextBox(false);
    gf_PauseNewItemInfo(false);
    gf_HotspotLeave(ge_RoomID_RoomLab, gt_PrepareRoomLab, 0.0, 0.6);
    libCamp_gf_HideStoryUI(true, false);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorStetmann));
    gf_RemoveVisibleUnit(true, gv_labTubeZerg);
    gf_RemoveVisibleUnit(true, gv_labTubeProtoss);
    lv_index = 0;
    for ( ; ( (auto9B6070FC_ai >= 0 && lv_index <= auto9B6070FC_ae) || (auto9B6070FC_ai < 0 && lv_index >= auto9B6070FC_ae) ) ; lv_index += auto9B6070FC_ai ) {
        gf_RemoveVisibleUnit(true, gv_labTubeSamples[2][lv_index]);
        gf_RemoveVisibleUnit(true, gv_labTubeSamples[1][lv_index]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabTubeLeave_Init () {
    gt_LabTubeLeave = TriggerCreate("gt_LabTubeLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBadge Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBadgeClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MarSaraTychusClickedPreCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBadgeClickedPreCallback_Init () {
    gt_MarSaraBadgeClickedPreCallback = TriggerCreate("gt_MarSaraBadgeClickedPreCallback_Func");
    TriggerEnable(gt_MarSaraBadgeClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBadge Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBadgeClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraNone) && (gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraCustom)) {
        TriggerExecute(gt_MarSaraBadgeClickedCamera, true, false);
    }

    TriggerExecute(gt_MarSaraTychusClickedPostCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBadgeClickedPostCallback_Init () {
    gt_MarSaraBadgeClickedPostCallback = TriggerCreate("gt_MarSaraBadgeClickedPostCallback_Func");
    TriggerEnable(gt_MarSaraBadgeClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBadge Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBadgeClickedCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomMarSara), "Zoom_07", "Fly 07", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomMarSara)), gv_aNIMID_ZOOM, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBadgeClickedCamera_Init () {
    gt_MarSaraBadgeClickedCamera = TriggerCreate("gt_MarSaraBadgeClickedCamera_Func");
    TriggerEnable(gt_MarSaraBadgeClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBadge Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBadgeClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_StopAllTransmissionConversation();
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceConversation);
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomMarSara), "Zoom_07", "Fly 07", 0.0);
    Wait(1.0, c_timeReal);
    gf_Convo("MarSaraFidgetsBadge", ge_RoomID_RoomMarSara, ge_ActorID_ActorRaynor, PointFromId(89), ge_ActorID_ActorTychus, gv_marSaraTychusCameras, PointFromId(91), ge_ActorID_ActorNone, null, null, gt_MarSaraBadgeClickedPreCallback, gt_MarSaraBadgeClickedPostCallback, true, false, gt_MarSaraBadgeClickedCamera, null);
    Wait(1.0, c_timeReal);
    gf_StopAllTransmissionConversation();
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomMarSara)), gv_aNIMID_ZOOM);
    gf_ViewRoomCamera(ge_RoomID_RoomMarSara, PlayerGroupAll(), 0.0);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBadgeClicked_Init () {
    gt_MarSaraBadgeClicked = TriggerCreate("gt_MarSaraBadgeClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraHydra Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraHydraClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MarSaraTychusClickedPreCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraHydraClickedPreCallback_Init () {
    gt_MarSaraHydraClickedPreCallback = TriggerCreate("gt_MarSaraHydraClickedPreCallback_Func");
    TriggerEnable(gt_MarSaraHydraClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraHydra Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraHydraClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraNone) && (gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraCustom)) {
        TriggerExecute(gt_MarSaraHydraClickedCamera, true, false);
    }

    TriggerExecute(gt_MarSaraTychusClickedPostCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraHydraClickedPostCallback_Init () {
    gt_MarSaraHydraClickedPostCallback = TriggerCreate("gt_MarSaraHydraClickedPostCallback_Func");
    TriggerEnable(gt_MarSaraHydraClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraHydra Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraHydraClickedCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomMarSara), "Zoom_05", "Fly 05", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomMarSara)), gv_aNIMID_ZOOM, 100.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomMarSara)), gv_aNIMID_ZOOM, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraHydraClickedCamera_Init () {
    gt_MarSaraHydraClickedCamera = TriggerCreate("gt_MarSaraHydraClickedCamera_Func");
    TriggerEnable(gt_MarSaraHydraClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraHydra Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraHydraClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_StopAllTransmissionConversation();
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceConversation);
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomMarSara), "Zoom_05", "Fly 05", 0.0);
    Wait(1.333, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomMarSara)), gv_aNIMID_ZOOM, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    gf_Convo("MarSaraFidgetsHydrahead", ge_RoomID_RoomMarSara, ge_ActorID_ActorRaynor, PointFromId(89), ge_ActorID_ActorTychus, gv_marSaraTychusCameras, PointFromId(91), ge_ActorID_ActorNone, null, null, gt_MarSaraHydraClickedPreCallback, gt_MarSaraHydraClickedPostCallback, true, false, gt_MarSaraHydraClickedCamera, null);
    Wait(1.0, c_timeReal);
    gf_StopAllTransmissionConversation();
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomMarSara)), gv_aNIMID_ZOOM);
    gf_ViewRoomCamera(ge_RoomID_RoomMarSara, PlayerGroupAll(), 0.0);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraHydraClicked_Init () {
    gt_MarSaraHydraClicked = TriggerCreate("gt_MarSaraHydraClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraJukebox Init
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraJukeboxInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libWoLC_gf_LastMap() == "TRaynor01") && (libWoLC_gf_LastMapConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMapConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false)) {
        gf_CreateJukebox(gv_marSaraJukebox, false);
    }
    else {
        gf_CreateJukebox(gv_marSaraJukebox, true);
    }
    gv_marSaraJukeboxID = gf_LastCreatedJukeboxID();
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music00", -1), StringExternal("Param/Value/4F33F3FF"), StringExternal("Param/Value/6FDE3498"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music01", -1), StringExternal("Param/Value/88CDB372"), StringExternal("Param/Value/AC01C1E2"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music02", -1), StringExternal("Param/Value/7BA8DB12"), StringExternal("Param/Value/F0A894E7"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music03", -1), StringExternal("Param/Value/31070019"), StringExternal("Param/Value/0882F13E"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music04", -1), StringExternal("Param/Value/A426A857"), StringExternal("Param/Value/0E63A335"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music05", -1), StringExternal("Param/Value/2D76F827"), StringExternal("Param/Value/3D59D2B8"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music06", -1), StringExternal("Param/Value/ED6BAD2C"), StringExternal("Param/Value/0F550CE9"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music07", -1), StringExternal("Param/Value/92595DF6"), StringExternal("Param/Value/40E87BD9"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music08", -1), StringExternal("Param/Value/F89FE48B"), StringExternal("Param/Value/A5130B82"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music09", -1), StringExternal("Param/Value/7E4838FF"), StringExternal("Param/Value/C605B289"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("EasterEggMusic_TerranUpTheNight", -1), StringExternal("Param/Value/1C33C8DC"), StringExternal("Param/Value/63085C12"));
    gf_SetJukeboxFidget(gv_marSaraJukeboxID, "MarSaraFidgetsJukebox", "MarSaraFidgetsJukeboxoff");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraJukeboxInit_Init () {
    gt_MarSaraJukeboxInit = TriggerCreate("gt_MarSaraJukeboxInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraJukebox Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraJukeboxClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MarSaraTychusClickedPreCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraJukeboxClickedPreCallback_Init () {
    gt_MarSaraJukeboxClickedPreCallback = TriggerCreate("gt_MarSaraJukeboxClickedPreCallback_Func");
    TriggerEnable(gt_MarSaraJukeboxClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraJukebox Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraJukeboxClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraNone) && (gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraCustom)) {
        TriggerExecute(gt_MarSaraJukeboxClickedCamera, true, false);
    }

    TriggerExecute(gt_MarSaraTychusClickedPostCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraJukeboxClickedPostCallback_Init () {
    gt_MarSaraJukeboxClickedPostCallback = TriggerCreate("gt_MarSaraJukeboxClickedPostCallback_Func");
    TriggerEnable(gt_MarSaraJukeboxClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraJukebox Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraJukeboxClickedCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomMarSara), "Zoom_06", "Fly 06", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomMarSara)), gv_aNIMID_ZOOM, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraJukeboxClickedCamera_Init () {
    gt_MarSaraJukeboxClickedCamera = TriggerCreate("gt_MarSaraJukeboxClickedCamera_Func");
    TriggerEnable(gt_MarSaraJukeboxClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraJukebox Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraJukeboxClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jukeboxID = gf_GetJukeboxID(gf_HotspotClicked());
    if ((lv_jukeboxID < 0)) {
        return true;
    }

    gf_JukeboxClicked(gf_HotspotClicked());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraJukeboxClicked_Init () {
    gt_MarSaraJukeboxClicked = TriggerCreate("gt_MarSaraJukeboxClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceUI);
    gf_SetIdleState(ge_IdleState_Busy);
    SoundPlay(SoundLink("BridgeToStarMapTransition", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gv_marSaraRoom, "Zoom_01", "Fly 01", 0.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomMarSara)), gv_aNIMID_ZOOM, 0.75);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(0.1, c_timeGame);
    gf_TravelPanelDisplay(gt_MarSaraBriefcaseLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseClicked_Init () {
    gt_MarSaraBriefcaseClicked = TriggerCreate("gt_MarSaraBriefcaseClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Leave
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_MissionStatusCheck("TRaynor01", libWoLC_ge_MissionStatus_Completed) == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/2D6BB27A"), false);
        gf_HotspotLeave(ge_RoomID_RoomMarSara, gt_PrepareRoomMarSara, 0.0, 0.6);
        gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
        gf_TurnMarSaraBarBackgroundSoundOnOff(true);
        gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
        gf_SetIdleState(ge_IdleState_Idle);
        libCamp_gf_HideStoryUI(true, true);
    }
    else {
        if ((gv_marSaraBriefcaseLeaveYesNoOn == false)) {
            gv_marSaraBriefcaseLeaveYesNoOn = true;
            TriggerEnable(gt_MarSaraBriefcaseLeaveUIYesNo, true);
            UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeQuery, StringExternal("Param/Value/0A7FFDFF"), StringToText(""), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseLeave_Init () {
    gt_MarSaraBriefcaseLeave = TriggerCreate("gt_MarSaraBriefcaseLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Leave UI Yes/No
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseLeaveUIYesNo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((EventCustomDialogResult() == libNtve_ge_CustomDialogResult_c_customDialogResultYes)) {
        GameSetNextMap("");
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, false);
        GameOver(1, c_gameOverVictory, false, false);
    }
    else {
        gv_marSaraBriefcaseLeaveYesNoOn = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseLeaveUIYesNo_Init () {
    gt_MarSaraBriefcaseLeaveUIYesNo = TriggerCreate("gt_MarSaraBriefcaseLeaveUIYesNo_Func");
    TriggerEnable(gt_MarSaraBriefcaseLeaveUIYesNo, false);
    TriggerAddEventCustomDialogDismissed(gt_MarSaraBriefcaseLeaveUIYesNo, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseHighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_marSaraBriefcase))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_marSaraBriefcase, "AnimBracketStart Highlight Highlight,Start Highlight Highlight,End");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(ge_ActorID_ActorAdjutant), "AnimBracketStart Highlight Highlight,Start Highlight Highlight,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseHighlighted_Init () {
    gt_MarSaraBriefcaseHighlighted = TriggerCreate("gt_MarSaraBriefcaseHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraBriefcaseHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Hologram Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseHologramHighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gf_ActorUnit(ge_ActorID_ActorAdjutant)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_marSaraBriefcase, "AnimBracketStart Highlight Highlight,Start Highlight Highlight,End");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(ge_ActorID_ActorAdjutant), "AnimBracketStart Highlight Highlight,Start Highlight Highlight,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseHologramHighlighted_Init () {
    gt_MarSaraBriefcaseHologramHighlighted = TriggerCreate("gt_MarSaraBriefcaseHologramHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraBriefcaseHologramHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseUnhighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_marSaraBriefcase))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_marSaraBriefcase, "AnimBracketStop Highlight");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(ge_ActorID_ActorAdjutant), "AnimBracketStop Highlight");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseUnhighlighted_Init () {
    gt_MarSaraBriefcaseUnhighlighted = TriggerCreate("gt_MarSaraBriefcaseUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraBriefcaseUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Hologram Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseHologramUnhighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gf_ActorUnit(ge_ActorID_ActorAdjutant)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_marSaraBriefcase, "AnimBracketStop Highlight");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(ge_ActorID_ActorAdjutant), "AnimBracketStop Highlight");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseHologramUnhighlighted_Init () {
    gt_MarSaraBriefcaseHologramUnhighlighted = TriggerCreate("gt_MarSaraBriefcaseHologramUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraBriefcaseHologramUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTV Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTVClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gf_CurrentTVNews2(), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTVClicked_Init () {
    gt_MarSaraTVClicked = TriggerCreate("gt_MarSaraTVClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTV Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTVHighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_marSaraTV))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTVHighlighted_Init () {
    gt_MarSaraTVHighlighted = TriggerCreate("gt_MarSaraTVHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraTVHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTV Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTVUnhighlighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_marSaraTV))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTVUnhighlighted_Init () {
    gt_MarSaraTVUnhighlighted = TriggerCreate("gt_MarSaraTVUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraTVUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObservatoryPainting Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_ObservatoryPaintingClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObservatoryValerianClickedPreCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObservatoryPaintingClickedPreCallback_Init () {
    gt_ObservatoryPaintingClickedPreCallback = TriggerCreate("gt_ObservatoryPaintingClickedPreCallback_Func");
    TriggerEnable(gt_ObservatoryPaintingClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObservatoryPainting Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_ObservatoryPaintingClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraNone) && (gv_convoCameraCurrent != ge_ConvoCameraType_ConvoCameraCustom)) {
        TriggerExecute(gt_ObservatoryPaintingClickedCamera, true, false);
    }

    TriggerExecute(gt_ObservatoryValerianClickedPostCallback, true, false);
    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonHyperion));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObservatoryPaintingClickedPostCallback_Init () {
    gt_ObservatoryPaintingClickedPostCallback = TriggerCreate("gt_ObservatoryPaintingClickedPostCallback_Func");
    TriggerEnable(gt_ObservatoryPaintingClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObservatoryPainting Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_ObservatoryPaintingClickedCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomObservatory), "Zoom_01", "Fly 01", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomObservatory)), gv_aNIMID_ZOOM, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObservatoryPaintingClickedCamera_Init () {
    gt_ObservatoryPaintingClickedCamera = TriggerCreate("gt_ObservatoryPaintingClickedCamera_Func");
    TriggerEnable(gt_ObservatoryPaintingClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObservatoryPainting Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ObservatoryPaintingClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceConversation);
    libNtve_gf_HideScreenButton(false, (ge_ScreenButtonID_ButtonHyperion));
    gf_HotspotZoom(gf_RoomUnit(ge_RoomID_RoomObservatory), "Zoom_01", "Fly 01", 0.0);
    Wait(1.333, c_timeReal);
    gf_Convo("Valerianfidgetspainting", ge_RoomID_RoomObservatory, ge_ActorID_ActorRaynorMarine, PointFromId(248), ge_ActorID_ActorValerian, null, PointFromId(169), ge_ActorID_ActorNone, null, null, gt_ObservatoryPaintingClickedPreCallback, gt_ObservatoryPaintingClickedPostCallback, true, false, gt_ObservatoryPaintingClickedCamera, null);
    Wait(1.0, c_timeReal);
    gf_StopAllTransmissionConversation();
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomObservatory)), gv_aNIMID_ZOOM);
    gf_ViewRoomCamera(ge_RoomID_RoomObservatory, PlayerGroupAll(), 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(248));
    gf_ResetActorToLocation(ge_ActorID_ActorValerian, PointFromId(169));
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_HideScreenButton(true, (ge_ScreenButtonID_ButtonHyperion));
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObservatoryPaintingClicked_Init () {
    gt_ObservatoryPaintingClicked = TriggerCreate("gt_ObservatoryPaintingClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Travel Panel - Launch
//--------------------------------------------------------------------------------------------------
bool gt_TravelPanelLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_mission;
    int lv_difficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mission = Kit_UITravel_LastSelectedMission();
    lv_difficulty = Kit_UITravel_LastSelectedDifficulty();

    // Conditions
    if (testConds) {
        if (!((lv_mission != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_mission == "TValerian01")) {
        TriggerEnable(gt_TravelPanelCharInvasionDialog, true);
        gv_travelPanel_CharInvasionQueryDone = false;
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeQuery, StringExternal("Param/Value/6BAD742B"), StringExternal("Param/Value/8FAA8EA3"), true);
        while (!((gv_travelPanel_CharInvasionQueryDone == true))) {
            Wait(0.3, c_timeReal);
        }
        if ((gv_travelPanel_CharInvasionQueryResult != libNtve_ge_CustomDialogResult_c_customDialogResultYes)) {
            return true;
        }

        libWoLC_gf_SetStoryStateBoolean("CharInvasionStarted", true);
    }

    libWCUI_gf_ShowHideTravelPanel(false);
    if ((lv_mission == "TValerian01")) {
        TriggerExecute(gt_Scene16CharIntroNoFadeIn, true, true);
        libWoLC_gf_SetStoryScenePlayed("SceneTerran16CharIntro", true);
    }
    gv_abChoiceDifficulty = lv_difficulty;
    gf_MissionLaunchWithBriefing(lv_mission, lv_difficulty);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TravelPanelLaunch_Init () {
    gt_TravelPanelLaunch = TriggerCreate("gt_TravelPanelLaunch_Func");
    TriggerEnable(gt_TravelPanelLaunch, false);
    libWCUI_gf_TravelPanelMissionStart(gt_TravelPanelLaunch);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Travel Panel - Leave
//--------------------------------------------------------------------------------------------------
bool gt_TravelPanelLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_MissionStatusCheck("TRaynor01", libWoLC_ge_MissionStatus_Completed) == true)) {
        gf_TravelPanelClose();
    }

    if ((gv_travelPanel_LeaveCallback != null)) {
        TriggerExecute(gv_travelPanel_LeaveCallback, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TravelPanelLeave_Init () {
    gt_TravelPanelLeave = TriggerCreate("gt_TravelPanelLeave_Func");
    TriggerEnable(gt_TravelPanelLeave, false);
    libWCUI_gf_TravelPanelClosed(gt_TravelPanelLeave);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Travel Panel - Char Invasion Dialog
//--------------------------------------------------------------------------------------------------
bool gt_TravelPanelCharInvasionDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_travelPanel_CharInvasionQueryDone = true;
    gv_travelPanel_CharInvasionQueryResult = EventCustomDialogResult();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TravelPanelCharInvasionDialog_Init () {
    gt_TravelPanelCharInvasionDialog = TriggerCreate("gt_TravelPanelCharInvasionDialog_Func");
    TriggerEnable(gt_TravelPanelCharInvasionDialog, false);
    TriggerAddEventCustomDialogDismissed(gt_TravelPanelCharInvasionDialog, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Travel Panel Zeratul - Launch
//--------------------------------------------------------------------------------------------------
bool gt_TravelPanelZeratulLaunch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWCUI_gf_ShowHideTravelPanel2(false, null);
    gf_MissionLaunchWithBriefing(gv_travelPanelZeratulMission, Kit_UITravelZeratul_LastSelectedDifficulty());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TravelPanelZeratulLaunch_Init () {
    gt_TravelPanelZeratulLaunch = TriggerCreate("gt_TravelPanelZeratulLaunch_Func");
    TriggerEnable(gt_TravelPanelZeratulLaunch, false);
    libWCUI_gf_TravelPanelMissionStart(gt_TravelPanelZeratulLaunch);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Travel Panel Zeratul - Leave
//--------------------------------------------------------------------------------------------------
bool gt_TravelPanelZeratulLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TravelPanelZeratulClose();
    if ((gv_travelPanelZeratul_LeaveCallback != null)) {
        TriggerExecute(gv_travelPanelZeratul_LeaveCallback, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TravelPanelZeratulLeave_Init () {
    gt_TravelPanelZeratulLeave = TriggerCreate("gt_TravelPanelZeratulLeave_Func");
    TriggerEnable(gt_TravelPanelZeratulLeave, false);
    libWCUI_gf_TravelPanelClosed(gt_TravelPanelZeratulLeave);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharRoomUI - Button Response
//--------------------------------------------------------------------------------------------------
bool gt_CharRoomUIButtonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoAD76E4A8_val;
    string autoD589C939_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAD76E4A8_val = libCamp_gf_RoomChangePanelButtonCustomData(libCamp_gf_RoomChangePanelCurrentButton());
    if (autoAD76E4A8_val == ge_CharRoomUI_CharRoomUIArmory) {
        gf_CharRoomUIDisplayUI(ge_CharRoomUI_CharRoomUIArmory);
    }
    else if (autoAD76E4A8_val == ge_CharRoomUI_CharRoomUIMissionArchives) {
        gf_CharRoomUIDisplayUI(ge_CharRoomUI_CharRoomUIMissionArchives);
    }
    else if (autoAD76E4A8_val == ge_CharRoomUI_CharRoomUIMercenaries) {
        gf_CharRoomUIDisplayUI(ge_CharRoomUI_CharRoomUIMercenaries);
    }
    else if (autoAD76E4A8_val == ge_CharRoomUI_CharRoomUINews) {
        libCamp_gf_StopFlashingRoomChangePanelButton(libCamp_gf_RoomChangePanelCurrentButton());
        ConversationDataStateSetValue("Hotspots|CantinaTV", 1);
        autoD589C939_val = libWoLC_gf_LastSuccessfulMission();
        if (autoD589C939_val == "TValerian01") {
            TriggerExecute(gt_TVNewsValerian01, true, false);
        }
        else if (autoD589C939_val == "TValerian02A") {
            TriggerExecute(gt_TVNewsValerian02A, true, false);
        }
        else if (autoD589C939_val == "TValerian02B") {
            TriggerExecute(gt_TVNewsValerian02B, true, false);
        }
        else {
        }
    }
    else if (autoAD76E4A8_val == ge_CharRoomUI_CharRoomUIResearch) {
        gf_CharRoomUIDisplayUI(ge_CharRoomUI_CharRoomUIResearch);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharRoomUIButtonResponse_Init () {
    gt_CharRoomUIButtonResponse = TriggerCreate("gt_CharRoomUIButtonResponse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharRoomUI - Leave UI
//--------------------------------------------------------------------------------------------------
bool gt_CharRoomUILeaveUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_MissionStatusCheck("TValerian03", libWoLC_ge_MissionStatus_Completed) == true)) {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
        GameSetNextMap("");
        GameOver(1, c_gameOverVictory, false, false);
    }
    else {
        gf_CharTychusAnimationStart();
        gf_HotspotLeave(ge_RoomID_RoomChar, gt_PrepareRoomChar, 0.0, 0.6);
        libCamp_gf_HideStoryUI(true, false);
        gf_PauseNewItemInfo(false);
        libCamp_gf_HideStoryUI(true, false);
        gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
        gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
        gf_SetIdleState(ge_IdleState_Idle);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharRoomUILeaveUI_Init () {
    gt_CharRoomUILeaveUI = TriggerCreate("gt_CharRoomUILeaveUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharRoomUI - Button Update
//--------------------------------------------------------------------------------------------------
bool gt_CharRoomUIButtonUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_room;
    int lv_buttonId;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buttonId = libCamp_gf_RoomChangePanelCurrentButton();
    libCamp_gf_SetRoomChangePanelButtonState(lv_buttonId, libCamp_ge_RoomPanelButtonState_Enable);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharRoomUIButtonUpdate_Init () {
    gt_CharRoomUIButtonUpdate = TriggerCreate("gt_CharRoomUIButtonUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryKachinski Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryKachinskiClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }

        if (!((EventUnit() == gf_ActorUnit(ge_ActorID_ActorKachinsky)))) {
            return false;
        }

        if (!((gv_currentRoom == ge_RoomID_RoomArmory))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_StopAllTransmissionConversation();
    gf_PlayFidget("ArmoryFidgetsKachinsky", ge_ActorID_ActorKachinsky, ge_ActorID_ActorNone);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    Wait(1.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryKachinskiClicked_Init () {
    gt_ArmoryKachinskiClicked = TriggerCreate("gt_ArmoryKachinskiClicked_Func");
    TriggerAddEventUnitClick(gt_ArmoryKachinskiClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmoryEarl Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryEarlClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }

        if (!((EventUnit() == gf_ActorUnit(ge_ActorID_ActorEarl)))) {
            return false;
        }

        if (!((gv_currentRoom == ge_RoomID_RoomArmory))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_StopAllTransmissionConversation();
    gf_PlayFidget("ArmoryFidgetsEarl", ge_ActorID_ActorEarl, ge_ActorID_ActorNone);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    Wait(1.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryEarlClicked_Init () {
    gt_ArmoryEarlClicked = TriggerCreate("gt_ArmoryEarlClicked_Func");
    TriggerAddEventUnitClick(gt_ArmoryEarlClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeBralik Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeBralikClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }

        if (!((EventUnit() == gf_ActorUnit(ge_ActorID_ActorBralik)))) {
            return false;
        }

        if (!((gv_currentRoom == ge_RoomID_RoomBridge))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_StopAllTransmissionConversation();
    TriggerExecute(gt_BridgeBackgroundBralikTalkToRaynor, true, false);
    gf_PlayFidget("BridgeFidgetsBralik", ge_ActorID_ActorBralik, ge_ActorID_ActorNone);
    TriggerExecute(gt_BridgeBackgroundBralikResume, true, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    Wait(1.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeBralikClicked_Init () {
    gt_BridgeBralikClicked = TriggerCreate("gt_BridgeBralikClicked_Func");
    TriggerAddEventUnitClick(gt_BridgeBralikClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeCade Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeCadeClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }

        if (!((EventUnit() == gf_ActorUnit(ge_ActorID_ActorCade)))) {
            return false;
        }

        if (!((gv_currentRoom == ge_RoomID_RoomBridge))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_StopAllTransmissionConversation();
    TriggerExecute(gt_BridgeBackgroundCadeTalkToRaynor, true, false);
    gf_PlayFidget("BridgeFidgetsCade", ge_ActorID_ActorCade, ge_ActorID_ActorNone);
    TriggerExecute(gt_BridgeBackgroundCadeResume, true, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    Wait(1.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeCadeClicked_Init () {
    gt_BridgeCadeClicked = TriggerCreate("gt_BridgeCadeClicked_Func");
    TriggerAddEventUnitClick(gt_BridgeCadeClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Master
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerMaster_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraMaster, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerMaster_Init () {
    gt_ConvoCameraTriggerMaster = TriggerCreate("gt_ConvoCameraTriggerMaster_Func");
    TriggerEnable(gt_ConvoCameraTriggerMaster, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Custom
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCustom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraCustom, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCustom_Init () {
    gt_ConvoCameraTriggerCustom = TriggerCreate("gt_ConvoCameraTriggerCustom_Func");
    TriggerEnable(gt_ConvoCameraTriggerCustom, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Closeup
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Closeup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraChar1Closeup, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Closeup_Init () {
    gt_ConvoCameraTriggerCharacter1Closeup = TriggerCreate("gt_ConvoCameraTriggerCharacter1Closeup_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Closeup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Medium
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Medium_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraChar1Medium, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Medium_Init () {
    gt_ConvoCameraTriggerCharacter1Medium = TriggerCreate("gt_ConvoCameraTriggerCharacter1Medium_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Medium, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Shoulder
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Shoulder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraChar1Shoulder, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Shoulder_Init () {
    gt_ConvoCameraTriggerCharacter1Shoulder = TriggerCreate("gt_ConvoCameraTriggerCharacter1Shoulder_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Shoulder, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Pushin
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Pushin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraChar1Pushin, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Pushin_Init () {
    gt_ConvoCameraTriggerCharacter1Pushin = TriggerCreate("gt_ConvoCameraTriggerCharacter1Pushin_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Pushin, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Pushout
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Pushout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraChar1Pullout, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Pushout_Init () {
    gt_ConvoCameraTriggerCharacter1Pushout = TriggerCreate("gt_ConvoCameraTriggerCharacter1Pushout_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Pushout, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Pan
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Pan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraChar1PanMedium, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Pan_Init () {
    gt_ConvoCameraTriggerCharacter1Pan = TriggerCreate("gt_ConvoCameraTriggerCharacter1Pan_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Pan, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Closeup
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Closeup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, ge_ConvoCameraType_ConvoCameraChar2Closeup, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Closeup_Init () {
    gt_ConvoCameraTriggerCharacter2Closeup = TriggerCreate("gt_ConvoCameraTriggerCharacter2Closeup_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Closeup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Medium
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Medium_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, ge_ConvoCameraType_ConvoCameraChar2Medium, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Medium_Init () {
    gt_ConvoCameraTriggerCharacter2Medium = TriggerCreate("gt_ConvoCameraTriggerCharacter2Medium_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Medium, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Shoulder
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Shoulder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, ge_ConvoCameraType_ConvoCameraChar2Shoulder, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Shoulder_Init () {
    gt_ConvoCameraTriggerCharacter2Shoulder = TriggerCreate("gt_ConvoCameraTriggerCharacter2Shoulder_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Shoulder, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Pushin
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Pushin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, ge_ConvoCameraType_ConvoCameraChar2Pushin, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Pushin_Init () {
    gt_ConvoCameraTriggerCharacter2Pushin = TriggerCreate("gt_ConvoCameraTriggerCharacter2Pushin_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Pushin, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Pushout
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Pushout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, ge_ConvoCameraType_ConvoCameraChar2Pullout, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Pushout_Init () {
    gt_ConvoCameraTriggerCharacter2Pushout = TriggerCreate("gt_ConvoCameraTriggerCharacter2Pushout_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Pushout, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Pan
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Pan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, ge_ConvoCameraType_ConvoCameraChar2PanMedium, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Pan_Init () {
    gt_ConvoCameraTriggerCharacter2Pan = TriggerCreate("gt_ConvoCameraTriggerCharacter2Pan_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Pan, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Closeup
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorCloseup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraRaynorCloseup, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorCloseup_Init () {
    gt_ConvoCameraTriggerRaynorCloseup = TriggerCreate("gt_ConvoCameraTriggerRaynorCloseup_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorCloseup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Medium
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorMedium_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraRaynorMedium, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorMedium_Init () {
    gt_ConvoCameraTriggerRaynorMedium = TriggerCreate("gt_ConvoCameraTriggerRaynorMedium_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorMedium, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Shoulder
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorShoulder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraRaynorShoulder, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorShoulder_Init () {
    gt_ConvoCameraTriggerRaynorShoulder = TriggerCreate("gt_ConvoCameraTriggerRaynorShoulder_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorShoulder, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Pushin
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorPushin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraRaynorPushin, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorPushin_Init () {
    gt_ConvoCameraTriggerRaynorPushin = TriggerCreate("gt_ConvoCameraTriggerRaynorPushin_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorPushin, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Pushout
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorPushout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraRaynorPullout, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorPushout_Init () {
    gt_ConvoCameraTriggerRaynorPushout = TriggerCreate("gt_ConvoCameraTriggerRaynorPushout_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorPushout, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Pan
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorPan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, ge_ConvoCameraType_ConvoCameraRaynorPanMedium, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorPan_Init () {
    gt_ConvoCameraTriggerRaynorPan = TriggerCreate("gt_ConvoCameraTriggerRaynorPan_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorPan, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmorySwann Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_ArmorySwannClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmorySwannClickedPreCallback_Init () {
    gt_ArmorySwannClickedPreCallback = TriggerCreate("gt_ArmorySwannClickedPreCallback_Func");
    TriggerEnable(gt_ArmorySwannClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmorySwann Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_ArmorySwannClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmorySwannClickedPostCallback_Init () {
    gt_ArmorySwannClickedPostCallback = TriggerCreate("gt_ArmorySwannClickedPostCallback_Func");
    TriggerEnable(gt_ArmorySwannClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmorySwann Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ArmorySwannClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Convo(gf_ActorConversation(ge_ActorID_ActorSwann), ge_RoomID_RoomArmory, ge_ActorID_ActorRaynor, PointFromId(40), ge_ActorID_ActorSwann, gv_armorySwannCameras, PointFromId(69), ge_ActorID_ActorNone, null, null, gt_ArmorySwannClickedPreCallback, gt_ArmorySwannClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorSwann);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmorySwannClicked_Init () {
    gt_ArmorySwannClicked = TriggerCreate("gt_ArmorySwannClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeHorner Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_BridgeHornerClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar2Medium, CameraInfoFromId(1059));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeHornerClickedPreCallback_Init () {
    gt_BridgeHornerClickedPreCallback = TriggerCreate("gt_BridgeHornerClickedPreCallback_Func");
    TriggerEnable(gt_BridgeHornerClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeHorner Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_BridgeHornerClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeHornerClickedPostCallback_Init () {
    gt_BridgeHornerClickedPostCallback = TriggerCreate("gt_BridgeHornerClickedPostCallback_Func");
    TriggerEnable(gt_BridgeHornerClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeHorner Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeHornerClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_actor2;
    unit lv_camera2;
    point lv_home2;

    // Automatic Variable Declarations
    string auto89434BA2_val;

    // Variable Initialization
    lv_actor2 = ge_ActorID_ActorNone;

    // Actions
    if (!runActions) {
        return true;
    }

    auto89434BA2_val = libWoLC_gf_LastSuccessfulMission();
    if (auto89434BA2_val == "TRaynor03") {
        lv_actor2 = ge_ActorID_ActorTychus;
        lv_camera2 = gv_bridgeTychusCameras;
        lv_home2 = PointFromId(71);
    }
    else {
        lv_actor2 = ge_ActorID_ActorNone;
        lv_camera2 = null;
        lv_home2 = null;
    }
    gf_Convo("BridgeHorner", ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, PointFromId(36), ge_ActorID_ActorHorner, gv_bridgeHornerCameras, PointFromId(92), lv_actor2, lv_camera2, lv_home2, gt_BridgeHornerClickedPreCallback, gt_BridgeHornerClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorHorner);
    if ((gv_hornerObsessionUnlocked == true)) {
        libWoLC_gf_CampaignAwardAchievement("TStory01_12");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeHornerClicked_Init () {
    gt_BridgeHornerClicked = TriggerCreate("gt_BridgeHornerClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeTychus Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_BridgeTychusClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar2Closeup, CameraInfoFromId(582));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar2Medium, CameraInfoFromId(1061));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeTychusClickedPreCallback_Init () {
    gt_BridgeTychusClickedPreCallback = TriggerCreate("gt_BridgeTychusClickedPreCallback_Func");
    TriggerEnable(gt_BridgeTychusClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeTychus Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_BridgeTychusClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeTychusClickedPostCallback_Init () {
    gt_BridgeTychusClickedPostCallback = TriggerCreate("gt_BridgeTychusClickedPostCallback_Func");
    TriggerEnable(gt_BridgeTychusClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeTychus Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeTychusClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_actor2;
    unit lv_camera2;
    point lv_home2;

    // Automatic Variable Declarations
    string auto11EC0E0E_val;

    // Variable Initialization
    lv_actor2 = ge_ActorID_ActorNone;

    // Actions
    if (!runActions) {
        return true;
    }

    auto11EC0E0E_val = libWoLC_gf_LastSuccessfulMission();
    if (auto11EC0E0E_val == "TRaynor03") {
        lv_actor2 = ge_ActorID_ActorHorner;
        lv_camera2 = gv_bridgeHornerCameras;
        lv_home2 = PointFromId(92);
    }
    else {
        lv_actor2 = ge_ActorID_ActorNone;
        lv_camera2 = null;
        lv_home2 = null;
    }
    gf_Convo("BridgeTychus", ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, PointFromId(36), ge_ActorID_ActorTychus, gv_bridgeTychusCameras, PointFromId(71), lv_actor2, lv_camera2, lv_home2, gt_BridgeTychusClickedPreCallback, gt_BridgeTychusClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorTychus);
    if ((gv_tychusObsessionUnlocked == true)) {
        libWoLC_gf_CampaignAwardAchievement("TStory01_11");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeTychusClicked_Init () {
    gt_BridgeTychusClicked = TriggerCreate("gt_BridgeTychusClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeHanson Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_BridgeHansonClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar2Closeup, CameraInfoFromId(582));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar2Medium, CameraInfoFromId(580));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeHansonClickedPreCallback_Init () {
    gt_BridgeHansonClickedPreCallback = TriggerCreate("gt_BridgeHansonClickedPreCallback_Func");
    TriggerEnable(gt_BridgeHansonClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeHanson Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_BridgeHansonClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeHansonClickedPostCallback_Init () {
    gt_BridgeHansonClickedPostCallback = TriggerCreate("gt_BridgeHansonClickedPostCallback_Func");
    TriggerEnable(gt_BridgeHansonClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeHanson Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeHansonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Convo("BridgeHanson", ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, PointFromId(36), ge_ActorID_ActorHanson, gv_bridgeHansonCameras, PointFromId(967), ge_ActorID_ActorNone, null, null, gt_BridgeHansonClickedPreCallback, gt_BridgeHansonClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorHanson);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeHansonClicked_Init () {
    gt_BridgeHansonClicked = TriggerCreate("gt_BridgeHansonClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeTosh Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeToshClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Convo("BridgeTosh", ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, PointFromId(36), ge_ActorID_ActorTosh, gv_bridgeToshCameras, PointFromId(966), ge_ActorID_ActorNone, null, null, gt_BridgeHansonClickedPreCallback, gt_BridgeHansonClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorTosh);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeToshClicked_Init () {
    gt_BridgeToshClicked = TriggerCreate("gt_BridgeToshClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeCommunicator Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_BridgeCommunicatorClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(897));
    gf_MakeUnitLookAtPointWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorRaynor)), 0.5, UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorRaynor))), 0.5));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_bridgeCommunicator), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gv_bridgeCommunicator), c_animNameDefault, 100.0);
    ConversationDataRegisterPortrait("Characters|CharValerian", gv_bridgeCommunicatorPortraitValerian);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeCommunicatorClickedPreCallback_Init () {
    gt_BridgeCommunicatorClickedPreCallback = TriggerCreate("gt_BridgeCommunicatorClickedPreCallback_Func");
    TriggerEnable(gt_BridgeCommunicatorClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeCommunicator Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_BridgeCommunicatorClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ClearAnimationwithblendtime(c_animNameDefault, gv_bridgeCommunicator, 0.0);
    PortraitDestroy(gv_bridgeCommunicatorPortraitValerian);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeCommunicatorClickedPostCallback_Init () {
    gt_BridgeCommunicatorClickedPostCallback = TriggerCreate("gt_BridgeCommunicatorClickedPostCallback_Func");
    TriggerEnable(gt_BridgeCommunicatorClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeCommunicator Clicked Custom Camera
//--------------------------------------------------------------------------------------------------
bool gt_BridgeCommunicatorClickedCustomCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoF4007082_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    autoF4007082_val = ConversationDataActiveSound();
    if (autoF4007082_val == "ValerianValerian00001") {
        CameraApplyInfo(1, CameraInfoFromId(896), 0.0, -1, 10, true);
        Wait(1.0, c_timeReal);
    }
    else if (autoF4007082_val == "ValerianValerian00005") {
        CameraApplyInfo(1, CameraInfoFromId(621), 0.0, -1, 10, true);
        gv_convoCameraChangeResult = false;
    }
    else if (autoF4007082_val == "ValerianValerian00006") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Hover Start", c_animFlagPlayForever, c_animTimeDefault);
        libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, 2.5);
        Wait(0.6384, c_timeReal);
        if ((ConversationDataActiveSound() != "ValerianValerian00006")) {
            return true;
        }

        SoundPlay(SoundLink("Mule_What", 1), PlayerGroupAll(), 100.0, 0.0);
        Wait(0.7, c_timeReal);
        if ((ConversationDataActiveSound() != "ValerianValerian00006")) {
            return true;
        }

        PortraitSetChannel(gv_bridgeCommunicatorPortraitValerian, 4);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Hover End", c_animFlagNonLooping, c_animTimeDefault);
        Wait(1.2, c_timeReal);
        CameraApplyInfo(1, CameraInfoFromId(900), 0.0, -1, 10, true);
        Wait(0.5, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), "Facial", "HappyEyes Spell", c_animFlagPlayForever, 1.0);
        Wait(1.0, c_timeGame);
        gf_ClearAnimationwithblendtime("Facial", gf_ActorUnit(ge_ActorID_ActorRaynor), 1.0);
        Wait(0.5, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Hover Start", c_animFlagPlayForever, c_animTimeDefault);
        Wait(1.0, c_timeGame);
        CameraApplyInfo(1, CameraInfoFromId(896), 0.0, -1, 10, true);
        if ((ConversationDataActiveSound() != "ValerianValerian00006")) {
            return true;
        }

        Wait(0.6, c_timeReal);
        if ((ConversationDataActiveSound() != "ValerianValerian00006")) {
            return true;
        }

        SoundPlay(SoundLink("Mule_What", 1), PlayerGroupAll(), 100.0, 0.0);
        Wait(0.4, c_timeReal);
        if ((ConversationDataActiveSound() != "ValerianValerian00006")) {
            return true;
        }

        PortraitSetChannel(gv_bridgeCommunicatorPortraitValerian, 1);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Hover End", c_animFlagNonLooping, c_animTimeDefault);
        Wait(2.0, c_timeReal);
        libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, 1.0);
        CameraApplyInfo(1, CameraInfoFromId(896), 0.0, -1, 10, true);
        gv_convoCameraChangeResult = false;
    }
    else if (autoF4007082_val == "ValerianRaynor00009") {
        gf_ClearAnimationwithblendtime(c_animNameDefault, gf_ActorUnit(ge_ActorID_ActorRaynor), 0.0);
        PortraitSetChannel(gv_bridgeCommunicatorPortraitValerian, 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeCommunicatorClickedCustomCamera_Init () {
    gt_BridgeCommunicatorClickedCustomCamera = TriggerCreate("gt_BridgeCommunicatorClickedCustomCamera_Func");
    TriggerEnable(gt_BridgeCommunicatorClickedCustomCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BridgeCommunicator Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BridgeCommunicatorClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    PortraitCreate(0, 0, c_anchorCenter, 720, 406, "ValerianPortrait", "", "", false, false);
    gv_bridgeCommunicatorPortraitValerian = PortraitLastCreated();
    PortraitSetOffscreen(gv_bridgeCommunicatorPortraitValerian, true);
    PortraitWaitForLoad(gv_bridgeCommunicatorPortraitValerian);
    PortraitSetVisible(gv_bridgeCommunicatorPortraitValerian, PlayerGroupAll(), true, true);
    PortraitSetChannel(gv_bridgeCommunicatorPortraitValerian, 1);
    gf_Convo("Valerian", ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, PointFromId(36), ge_ActorID_ActorValerian, null, null, ge_ActorID_ActorNone, null, null, gt_BridgeCommunicatorClickedPreCallback, gt_BridgeCommunicatorClickedPostCallback, true, true, null, gt_BridgeCommunicatorClickedCustomCamera);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeCommunicatorClicked_Init () {
    gt_BridgeCommunicatorClicked = TriggerCreate("gt_BridgeCommunicatorClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTychus Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTychusClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cantinaState == ge_CantinaStates_Broken)) {
        ConversationDataPreloadLines("CantinaTychus");
        gf_MakeUnitLookAtPointWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", libNtve_gf_PointWithZOffset(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorTychus)), 0.7));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTychusClickedPreCallback_Init () {
    gt_CantinaTychusClickedPreCallback = TriggerCreate("gt_CantinaTychusClickedPreCallback_Func");
    TriggerEnable(gt_CantinaTychusClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTychus Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTychusClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cantinaState == ge_CantinaStates_Broken)) {
        gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(ge_ActorID_ActorRaynor), "Dialogue", false, 0.0);
        TriggerStop(gt_CantinaTychusClickedCameraChange);
        TriggerStop(gt_CantinaTychusClickedCameraChangeNoWait);
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTychusClickedPostCallback_Init () {
    gt_CantinaTychusClickedPostCallback = TriggerCreate("gt_CantinaTychusClickedPostCallback_Func");
    TriggerEnable(gt_CantinaTychusClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTychus Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTychusClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cantinaState == ge_CantinaStates_Broken)) {
        gf_Convo(gf_ActorConversation(ge_ActorID_ActorTychus), ge_RoomID_RoomCantina, ge_ActorID_ActorRaynor, gf_RaynorCantinaHome(), ge_ActorID_ActorTychus, gv_cantinaTychusCameras, PointFromId(20), ge_ActorID_ActorNone, null, null, gt_CantinaTychusClickedPreCallback, gt_CantinaTychusClickedPostCallback, true, true, null, gt_CantinaTychusClickedCameraChange);
    }
    else {
        gf_Convo(gf_ActorConversation(ge_ActorID_ActorTychus), ge_RoomID_RoomCantina, ge_ActorID_ActorRaynor, gf_RaynorCantinaHome(), ge_ActorID_ActorTychus, gv_cantinaTychusCameras, PointFromId(20), ge_ActorID_ActorNone, null, null, gt_CantinaTychusClickedPreCallback, gt_CantinaTychusClickedPostCallback, true, true, null, null);
    }
    gf_ActorTalked(ge_ActorID_ActorTychus);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTychusClicked_Init () {
    gt_CantinaTychusClicked = TriggerCreate("gt_CantinaTychusClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTychus Clicked Camera Change
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTychusClickedCameraChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoCC1EDA4C_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_convoCameraChangeResult = false;
    TriggerExecute(gt_CantinaTychusClickedCameraChangeNoWait, true, false);
    autoCC1EDA4C_val = ConversationDataActiveSound();
    if (autoCC1EDA4C_val == "CantinaTychusRaynor00015") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk End", c_animFlagNonLooping, 0.0);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, 50.0);
        CameraApplyInfo(1, CameraInfoFromId(392), 0.0, -1, 10, true);
        Wait(1.0, c_timeReal);
    }
    else if (autoCC1EDA4C_val == "CantinaTychusTychus00016") {
        CameraApplyInfo(1, CameraInfoFromId(1011), 0.0, -1, 10, true);
        gf_ClearAnimationwithblendtime(c_animNameDefault, gf_ActorUnit(ge_ActorID_ActorRaynor), 0.0);
        CameraApplyInfo(1, CameraInfoFromId(1031), (SoundLengthSync(SoundLink("CantinaTychusTychus00016", 0)) + 3.0 + 3.0), -1, 20, true);
    }
    else if (autoCC1EDA4C_val == "CantinaTychusTychus00019") {
    }
    else if (autoCC1EDA4C_val == "CantinaTychusRaynor00017") {
        CameraApplyInfo(1, CameraInfoFromId(392), 0.0, -1, 10, true);
    }
    else if (autoCC1EDA4C_val == "CantinaTychusTychus00075") {
        CameraApplyInfo(1, CameraInfoFromId(394), 0.0, -1, 10, true);
    }
    else if (autoCC1EDA4C_val == "CantinaTychusRaynor00079") {
        CameraApplyInfo(1, CameraInfoFromId(1010), 0.0, -1, 10, true);
    }
    else if (autoCC1EDA4C_val == "CantinaTychusTychus00080") {
        CameraApplyInfo(1, CameraInfoFromId(393), 0.0, -1, 10, true);
    }
    else if (autoCC1EDA4C_val == "CantinaTychusRaynor00082") {
        CameraApplyInfo(1, CameraInfoFromId(1027), 0.0, -1, 10, true);
    }
    else if (autoCC1EDA4C_val == "CantinaTychusTychus00083") {
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk Right", c_animFlagNonLooping, 1.0);
        Wait(0.5, c_timeReal);
        CameraApplyInfo(1, CameraInfoFromId(1032), 2.0, -1, 20, true);
        Wait(2.0, c_timeReal);
        CameraApplyInfo(1, CameraInfoFromId(1030), 0.0, -1, 10, true);
        Wait(0.5, c_timeReal);
        SoundLengthQueryWait();
        CameraApplyInfo(1, CameraInfoFromId(394), (SoundLengthSync(SoundLink("CantinaTychusTychus00083", 0)) + 1.0), -1, 20, true);
        gf_MakeUnitLookAtPointWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "VerySlowHeadOnly", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorTychus)), 0.6, (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorTychus)) - 15.0)), 0.65));
        Wait(1.0, c_timeReal);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTychusClickedCameraChange_Init () {
    gt_CantinaTychusClickedCameraChange = TriggerCreate("gt_CantinaTychusClickedCameraChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTychus Clicked Camera Change No Wait
//--------------------------------------------------------------------------------------------------
bool gt_CantinaTychusClickedCameraChangeNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto7859E16E_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    auto7859E16E_val = ConversationDataActiveSound();
    {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaTychusClickedCameraChangeNoWait_Init () {
    gt_CantinaTychusClickedCameraChangeNoWait = TriggerCreate("gt_CantinaTychusClickedCameraChangeNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTosh Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_CantinaToshClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RemoveVisibleUnit(false, UnitFromId(659));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaToshClickedPreCallback_Init () {
    gt_CantinaToshClickedPreCallback = TriggerCreate("gt_CantinaToshClickedPreCallback_Func");
    TriggerEnable(gt_CantinaToshClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTosh Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_CantinaToshClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RemoveVisibleUnit(true, UnitFromId(659));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaToshClickedPostCallback_Init () {
    gt_CantinaToshClickedPostCallback = TriggerCreate("gt_CantinaToshClickedPostCallback_Func");
    TriggerEnable(gt_CantinaToshClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CantinaTosh Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CantinaToshClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Convo(gf_ActorConversation(ge_ActorID_ActorTosh), ge_RoomID_RoomCantina, ge_ActorID_ActorRaynor, gf_RaynorCantinaHome(), ge_ActorID_ActorTosh, gv_cantinaToshCameras, PointFromId(164), ge_ActorID_ActorNone, null, null, gt_CantinaToshClickedPreCallback, gt_CantinaToshClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorTosh);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CantinaToshClicked_Init () {
    gt_CantinaToshClicked = TriggerCreate("gt_CantinaToshClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharWarfield Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_CharWarfieldClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnAnimationPropertiesOnOff(UnitFromId(620), "A", true, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharWarfieldClickedPreCallback_Init () {
    gt_CharWarfieldClickedPreCallback = TriggerCreate("gt_CharWarfieldClickedPreCallback_Func");
    TriggerEnable(gt_CharWarfieldClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharWarfield Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_CharWarfieldClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnAnimationPropertiesOnOff(UnitFromId(620), "A", false, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharWarfieldClickedPostCallback_Init () {
    gt_CharWarfieldClickedPostCallback = TriggerCreate("gt_CharWarfieldClickedPostCallback_Func");
    TriggerEnable(gt_CharWarfieldClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharWarfield Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CharWarfieldClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Convo(gf_ActorConversation(ge_ActorID_ActorWarfield), ge_RoomID_RoomChar, ge_ActorID_ActorRaynorMarine, PointFromId(218), ge_ActorID_ActorWarfield, gv_bridgeToshCameras, PointFromId(229), ge_ActorID_ActorNone, null, null, gt_CharWarfieldClickedPreCallback, gt_CharWarfieldClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorWarfield);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharWarfieldClicked_Init () {
    gt_CharWarfieldClicked = TriggerCreate("gt_CharWarfieldClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharWarfield Clicked AOD
//--------------------------------------------------------------------------------------------------
bool gt_CharWarfieldClickedAOD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Convo(gf_ActorConversation(ge_ActorID_ActorWarfieldAOD), ge_RoomID_RoomChar, ge_ActorID_ActorRaynorMarine, PointFromId(218), ge_ActorID_ActorWarfieldAOD, gv_bridgeToshCameras, PointFromId(229), ge_ActorID_ActorNone, null, null, gt_CharWarfieldClickedPreCallback, gt_CharWarfieldClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorWarfield);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharWarfieldClickedAOD_Init () {
    gt_CharWarfieldClickedAOD = TriggerCreate("gt_CharWarfieldClickedAOD_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharTychus Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_CharTychusClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnAnimationPropertiesOnOff(UnitFromId(620), "B", true, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharTychusClickedPreCallback_Init () {
    gt_CharTychusClickedPreCallback = TriggerCreate("gt_CharTychusClickedPreCallback_Func");
    TriggerEnable(gt_CharTychusClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharTychus Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_CharTychusClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnAnimationPropertiesOnOff(UnitFromId(620), "B", false, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharTychusClickedPostCallback_Init () {
    gt_CharTychusClickedPostCallback = TriggerCreate("gt_CharTychusClickedPostCallback_Func");
    TriggerEnable(gt_CharTychusClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharTychus Clicked
//--------------------------------------------------------------------------------------------------
bool gt_CharTychusClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Convo(gf_ActorConversation(ge_ActorID_ActorTychus), ge_RoomID_RoomChar, ge_ActorID_ActorRaynorMarine, PointFromId(218), ge_ActorID_ActorTychus, gv_bridgeToshCameras, PointFromId(221), ge_ActorID_ActorNone, null, null, gt_CharTychusClickedPreCallback, gt_CharTychusClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorTychus);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharTychusClicked_Init () {
    gt_CharTychusClicked = TriggerCreate("gt_CharTychusClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CharTychus Talk Animation
//--------------------------------------------------------------------------------------------------
bool gt_CharTychusTalkAnimation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Talk Attack", c_animFlagNonLooping, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charGatlingGun), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Talk Attack 01", c_animFlagNonLooping, 0.0);
    while (true) {
        Wait(2.9375, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Talk Attack", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_charGatlingGun), gv_aNIMID_CHARTYCHUSANDGUN_STAND2, "Talk Attack 01", c_animFlagNonLooping, c_animTimeDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharTychusTalkAnimation_Init () {
    gt_CharTychusTalkAnimation = TriggerCreate("gt_CharTychusTalkAnimation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabHanson Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_LabHansonClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_LabActorAnimation(true, false, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(212));
    gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(210));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabHansonClickedPreCallback_Init () {
    gt_LabHansonClickedPreCallback = TriggerCreate("gt_LabHansonClickedPreCallback_Func");
    TriggerEnable(gt_LabHansonClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabHanson Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_LabHansonClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_LabActorAnimation(true, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabHansonClickedPostCallback_Init () {
    gt_LabHansonClickedPostCallback = TriggerCreate("gt_LabHansonClickedPostCallback_Func");
    TriggerEnable(gt_LabHansonClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LabHanson Clicked
//--------------------------------------------------------------------------------------------------
bool gt_LabHansonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_raynorHome;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_raynorHome = gf_LabRaynorHome();
    gf_Convo(gf_ActorConversation(ge_ActorID_ActorHanson), ge_RoomID_RoomLab, ge_ActorID_ActorRaynor, lv_raynorHome, ge_ActorID_ActorHanson, gv_labHansonCameras, PointFromId(33), ge_ActorID_ActorNone, null, null, gt_LabHansonClickedPreCallback, gt_LabHansonClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorHanson);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabHansonClicked_Init () {
    gt_LabHansonClicked = TriggerCreate("gt_LabHansonClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTychus Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTychusClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTychusClickedPreCallback_Init () {
    gt_MarSaraTychusClickedPreCallback = TriggerCreate("gt_MarSaraTychusClickedPreCallback_Func");
    TriggerEnable(gt_MarSaraTychusClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTychus Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTychusClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTychusClickedPostCallback_Init () {
    gt_MarSaraTychusClickedPostCallback = TriggerCreate("gt_MarSaraTychusClickedPostCallback_Func");
    TriggerEnable(gt_MarSaraTychusClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTychus Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTychusClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Convo(gf_ActorConversation(ge_ActorID_ActorTychus), ge_RoomID_RoomMarSara, ge_ActorID_ActorRaynor, PointFromId(89), ge_ActorID_ActorTychus, gv_marSaraTychusCameras, PointFromId(91), ge_ActorID_ActorNone, null, null, gt_MarSaraTychusClickedPreCallback, gt_MarSaraTychusClickedPostCallback, true, true, null, null);
    gf_ActorTalked(ge_ActorID_ActorTychus);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTychusClicked_Init () {
    gt_MarSaraTychusClicked = TriggerCreate("gt_MarSaraTychusClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObservatoryValerian Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_ObservatoryValerianClickedPreCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(542));
    gf_ResetActorToLocation(ge_ActorID_ActorValerian, PointFromId(169));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraRaynorCloseup, CameraInfoFromId(546));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraRaynorMedium, CameraInfoFromId(547));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraRaynorShoulder, CameraInfoFromId(548));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar1Closeup, CameraInfoFromId(543));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar1Medium, CameraInfoFromId(544));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraMaster, CameraInfoFromId(545));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObservatoryValerianClickedPreCallback_Init () {
    gt_ObservatoryValerianClickedPreCallback = TriggerCreate("gt_ObservatoryValerianClickedPreCallback_Func");
    TriggerEnable(gt_ObservatoryValerianClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObservatoryValerian Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_ObservatoryValerianClickedPostCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObservatoryValerianClickedPostCallback_Init () {
    gt_ObservatoryValerianClickedPostCallback = TriggerCreate("gt_ObservatoryValerianClickedPostCallback_Func");
    TriggerEnable(gt_ObservatoryValerianClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObservatoryValerian Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ObservatoryValerianClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Convo(gf_ActorConversation(ge_ActorID_ActorValerian), ge_RoomID_RoomObservatory, ge_ActorID_ActorRaynorMarine, PointFromId(248), ge_ActorID_ActorValerian, null, PointFromId(169), ge_ActorID_ActorNone, null, null, gt_ObservatoryValerianClickedPreCallback, gt_ObservatoryValerianClickedPostCallback, true, true, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObservatoryValerianClicked_Init () {
    gt_ObservatoryValerianClicked = TriggerCreate("gt_ObservatoryValerianClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tychus Obsession
//--------------------------------------------------------------------------------------------------
bool gt_TychusObsession_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((ConversationDataStateGetValue("WritingCustomStates|LearnedWhyTychusSuit") > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tychusObsessionUnlocked = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TychusObsession_Init () {
    gt_TychusObsession = TriggerCreate("gt_TychusObsession_Func");
    TriggerAddEventConversationStateChanged(gt_TychusObsession, "WritingCustomStates|LearnedWhyTychusSuit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Horner Obsession
//--------------------------------------------------------------------------------------------------
bool gt_HornerObsession_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((ConversationDataStateGetValue("WritingCustomStates|LearnedHornerMarried") > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hornerObsessionUnlocked = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HornerObsession_Init () {
    gt_HornerObsession = TriggerCreate("gt_HornerObsession_Func");
    TriggerAddEventConversationStateChanged(gt_HornerObsession, "WritingCustomStates|LearnedHornerMarried");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene Skippable
//--------------------------------------------------------------------------------------------------
bool gt_SceneSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_sceneSkipped = true;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundWait(gv_sceneSound, 0.0, c_soundOffsetEnd);
    gv_sceneSkipped = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SceneSkippable_Init () {
    gt_SceneSkippable = TriggerCreate("gt_SceneSkippable_Func");
    TriggerEnable(gt_SceneSkippable, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene01 - Raynor Intro
//--------------------------------------------------------------------------------------------------
bool gt_Scene01RaynorIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene("SceneTerran01RaynorIntro", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene01RaynorIntro_Init () {
    gt_Scene01RaynorIntro = TriggerCreate("gt_Scene01RaynorIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene03 - Zeratul Warning
//--------------------------------------------------------------------------------------------------
bool gt_Scene03ZeratulWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene("SceneTerran03ZeratulsWarning", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene03ZeratulWarning_Init () {
    gt_Scene03ZeratulWarning = TriggerCreate("gt_Scene03ZeratulWarning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene04 - Tychus Intro
//--------------------------------------------------------------------------------------------------
bool gt_Scene04TychusIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene("SceneTerran04TychusIntro", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene04TychusIntro_Init () {
    gt_Scene04TychusIntro = TriggerCreate("gt_Scene04TychusIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene05 - Escape from Mar Sara
//--------------------------------------------------------------------------------------------------
bool gt_Scene05EscapefromMarSara_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene("SceneTerran05HornerBridgeIntro", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene05EscapefromMarSara_Init () {
    gt_Scene05EscapefromMarSara = TriggerCreate("gt_Scene05EscapefromMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene06 - Valerian Intro
//--------------------------------------------------------------------------------------------------
bool gt_Scene06ValerianIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Scene06ValerianIntroTimestamp, true, false);
    gf_Scene("SceneTerran06ValerianIntro", 1, true, false);
    if ((gv_sceneSkipped == false)) {
        gf_Scene("SceneTerran06ValerianIntro", 2, false, false);
    }

    if ((gv_sceneSkipped == false)) {
        gf_Scene("SceneTerran06ValerianIntro", 3, false, true);
    }

    if ((gv_sceneSkipped == true)) {
        CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        Wait(2.0, c_timeReal);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        gf_TurnClickablesOnOff(gv_clickables, true);
        gf_PauseFlashing(false);
        gf_PauseNewItemInfo(false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene06ValerianIntro_Init () {
    gt_Scene06ValerianIntro = TriggerCreate("gt_Scene06ValerianIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene06 - Valerian Intro Timestamp
//--------------------------------------------------------------------------------------------------
bool gt_Scene06ValerianIntroTimestamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__SceneIndex;
    unit lv_terran15Props;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(1.0, c_timeReal);
    libWoLC_gf_DisplayTimestamp("Tychus04_Cutscene", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene06ValerianIntroTimestamp_Init () {
    gt_Scene06ValerianIntroTimestamp = TriggerCreate("gt_Scene06ValerianIntroTimestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene07 - Bar Fight
//--------------------------------------------------------------------------------------------------
bool gt_Scene07BarFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ScenePrepareCantinaTrophies("SceneTerran07BarFight", 64.0, 64.0, 270.0);
    gf_Scene("SceneTerran07BarFight", 1, true, true);
    gf_SceneRemoveCantinaTrophies();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene07BarFight_Init () {
    gt_Scene07BarFight = TriggerCreate("gt_Scene07BarFight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene08 - Hanson End A
//--------------------------------------------------------------------------------------------------
bool gt_Scene08HansonEndA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene("SceneTerran08HansonEndA", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene08HansonEndA_Init () {
    gt_Scene08HansonEndA = TriggerCreate("gt_Scene08HansonEndA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene09 - Tosh End A
//--------------------------------------------------------------------------------------------------
bool gt_Scene09ToshEndA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene("SceneTerran09ToshEndA", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene09ToshEndA_Init () {
    gt_Scene09ToshEndA = TriggerCreate("gt_Scene09ToshEndA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene10 - Raynors Dream
//--------------------------------------------------------------------------------------------------
bool gt_Scene10RaynorsDream_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ScenePrepareCantinaTrophies("SceneTerran10RaynorsDream", 64.0, 64.0, 270.0);
    TriggerExecute(gt_Scene10RaynorsDreamTimestamp, true, false);
    gf_Scene("SceneTerran10RaynorsDream", 1, true, true);
    gf_SceneRemoveCantinaTrophies();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene10RaynorsDream_Init () {
    gt_Scene10RaynorsDream = TriggerCreate("gt_Scene10RaynorsDream_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene10 - Raynors Dream Timestamp
//--------------------------------------------------------------------------------------------------
bool gt_Scene10RaynorsDreamTimestamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__SceneIndex;
    unit lv_terran15Props;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(5.0, c_timeReal);
    libWoLC_gf_DisplayTimestamp("Tychus03_Cutscene", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene10RaynorsDreamTimestamp_Init () {
    gt_Scene10RaynorsDreamTimestamp = TriggerCreate("gt_Scene10RaynorsDreamTimestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene11 - Char Battlefield Intro
//--------------------------------------------------------------------------------------------------
bool gt_Scene11CharBattlefieldIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene("SceneTerran11CharBatltefield", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene11CharBattlefieldIntro_Init () {
    gt_Scene11CharBattlefieldIntro = TriggerCreate("gt_Scene11CharBattlefieldIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene12 - Horner End
//--------------------------------------------------------------------------------------------------
bool gt_Scene12HornerEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene("SceneTerran12HornerVictory", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene12HornerEnd_Init () {
    gt_Scene12HornerEnd = TriggerCreate("gt_Scene12HornerEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene13 - Hanson End B
//--------------------------------------------------------------------------------------------------
bool gt_Scene13HansonEndB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ScenePrepareLabTrophies(64.0, 64.0, 270.0);
    gf_Scene("SceneTerran13HansonEndB", 1, true, true);
    gf_SceneRemoveLabTrophies();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene13HansonEndB_Init () {
    gt_Scene13HansonEndB = TriggerCreate("gt_Scene13HansonEndB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene14 - Tosh End B
//--------------------------------------------------------------------------------------------------
bool gt_Scene14ToshEndB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene("SceneTerran14ToshEndB", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene14ToshEndB_Init () {
    gt_Scene14ToshEndB = TriggerCreate("gt_Scene14ToshEndB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene15 - Kerrigan Intro
//--------------------------------------------------------------------------------------------------
bool gt_Scene15KerriganIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Scene15KerriganIntroTimestamp, true, false);
    gf_Scene("SceneTerran15KerriganIntro", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene15KerriganIntro_Init () {
    gt_Scene15KerriganIntro = TriggerCreate("gt_Scene15KerriganIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene15 - Kerrigan Intro Timestamp
//--------------------------------------------------------------------------------------------------
bool gt_Scene15KerriganIntroTimestamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__SceneIndex;
    unit lv_terran15Props;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(30.0, c_timeReal);
    libWoLC_gf_DisplayTimestamp("Tychus01_Cutscene", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene15KerriganIntroTimestamp_Init () {
    gt_Scene15KerriganIntroTimestamp = TriggerCreate("gt_Scene15KerriganIntroTimestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene16 - Char Intro
//--------------------------------------------------------------------------------------------------
bool gt_Scene16CharIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Scene16CharIntroNoFadeIn, true, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene16CharIntro_Init () {
    gt_Scene16CharIntro = TriggerCreate("gt_Scene16CharIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene16 - Char Intro No Fade In
//--------------------------------------------------------------------------------------------------
bool gt_Scene16CharIntroNoFadeIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Scene16CharIntroTimestamp, true, false);
    gf_Scene("SceneTerran16CharIntro", 1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene16CharIntroNoFadeIn_Init () {
    gt_Scene16CharIntroNoFadeIn = TriggerCreate("gt_Scene16CharIntroNoFadeIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene16 - Char Intro Timestamp
//--------------------------------------------------------------------------------------------------
bool gt_Scene16CharIntroTimestamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__SceneIndex;
    unit lv_terran15Props;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(1.5, c_timeReal);
    libWoLC_gf_DisplayTimestamp("Valerian01_Briefing", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene16CharIntroTimestamp_Init () {
    gt_Scene16CharIntroTimestamp = TriggerCreate("gt_Scene16CharIntroTimestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene17 - Char Battlefield End
//--------------------------------------------------------------------------------------------------
bool gt_Scene17CharBattlefieldEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene("SceneTerran17CharBattlefieldEnd", 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene17CharBattlefieldEnd_Init () {
    gt_Scene17CharBattlefieldEnd = TriggerCreate("gt_Scene17CharBattlefieldEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic01 - Raynor Intro
//--------------------------------------------------------------------------------------------------
bool gt_Animatic01RaynorIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic01RaynorIntroSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomMarSara);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic01RaynorIntro_Init () {
    gt_Animatic01RaynorIntro = TriggerCreate("gt_Animatic01RaynorIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic01 - Raynor Intro Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic01RaynorIntroSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("Assets\\Textures\\sm_terran01raynorintro.ogv", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic01RaynorIntroSkippable_Init () {
    gt_Animatic01RaynorIntroSkippable = TriggerCreate("gt_Animatic01RaynorIntroSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic04 - Tychus Intro
//--------------------------------------------------------------------------------------------------
bool gt_Animatic04TychusIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic04TychusIntroSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomMarSara);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic04TychusIntro_Init () {
    gt_Animatic04TychusIntro = TriggerCreate("gt_Animatic04TychusIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic04 - Tychus Intro Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic04TychusIntroSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran04aTychusIntro.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran04bTychusIntroEnd.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic04TychusIntroSkippable_Init () {
    gt_Animatic04TychusIntroSkippable = TriggerCreate("gt_Animatic04TychusIntroSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic05 - Escape from Mar Sara
//--------------------------------------------------------------------------------------------------
bool gt_Animatic05EscapefromMarSara_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic05EscapefromMarSaraSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic05EscapefromMarSara_Init () {
    gt_Animatic05EscapefromMarSara = TriggerCreate("gt_Animatic05EscapefromMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic05 - Escape from Mar Sara Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic05EscapefromMarSaraSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("Assets\\Textures\\sm_terran05hornerbridgeintro.ogv", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic05EscapefromMarSaraSkippable_Init () {
    gt_Animatic05EscapefromMarSaraSkippable = TriggerCreate("gt_Animatic05EscapefromMarSaraSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic06 - Valerian Intro
//--------------------------------------------------------------------------------------------------
bool gt_Animatic06ValerianIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic06ValerianIntroSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic06ValerianIntro_Init () {
    gt_Animatic06ValerianIntro = TriggerCreate("gt_Animatic06ValerianIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic06 - Valerian Intro Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic06ValerianIntroSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran06ValerianIntro.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic06ValerianIntroSkippable_Init () {
    gt_Animatic06ValerianIntroSkippable = TriggerCreate("gt_Animatic06ValerianIntroSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic07 - Bar Fight
//--------------------------------------------------------------------------------------------------
bool gt_Animatic07BarFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic07BarFightSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic07BarFight_Init () {
    gt_Animatic07BarFight = TriggerCreate("gt_Animatic07BarFight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic07 - Bar Fight Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic07BarFightSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran07BarFight.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic07BarFightSkippable_Init () {
    gt_Animatic07BarFightSkippable = TriggerCreate("gt_Animatic07BarFightSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic08 - Hansen End A
//--------------------------------------------------------------------------------------------------
bool gt_Animatic08HansenEndA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic08HansenEndASkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic08HansenEndA_Init () {
    gt_Animatic08HansenEndA = TriggerCreate("gt_Animatic08HansenEndA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic08 - Hansen End A Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic08HansenEndASkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran08DrHansenAend.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic08HansenEndASkippable_Init () {
    gt_Animatic08HansenEndASkippable = TriggerCreate("gt_Animatic08HansenEndASkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic09 - Tosh End A
//--------------------------------------------------------------------------------------------------
bool gt_Animatic09ToshEndA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic09ToshEndASkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic09ToshEndA_Init () {
    gt_Animatic09ToshEndA = TriggerCreate("gt_Animatic09ToshEndA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic09 - Tosh End A Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic09ToshEndASkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran09ToshAend.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic09ToshEndASkippable_Init () {
    gt_Animatic09ToshEndASkippable = TriggerCreate("gt_Animatic09ToshEndASkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic10 - Raynors Dream
//--------------------------------------------------------------------------------------------------
bool gt_Animatic10RaynorsDream_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic10RaynorsDreamSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic10RaynorsDream_Init () {
    gt_Animatic10RaynorsDream = TriggerCreate("gt_Animatic10RaynorsDream_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic10 - Raynors Dream Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic10RaynorsDreamSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran10RaynorsDream.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic10RaynorsDreamSkippable_Init () {
    gt_Animatic10RaynorsDreamSkippable = TriggerCreate("gt_Animatic10RaynorsDreamSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic11 - Char Battlefield Intro
//--------------------------------------------------------------------------------------------------
bool gt_Animatic11CharBattlefieldIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic11CharBattlefieldIntroSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomChar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic11CharBattlefieldIntro_Init () {
    gt_Animatic11CharBattlefieldIntro = TriggerCreate("gt_Animatic11CharBattlefieldIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic11 - Char Battlefield Intro Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic11CharBattlefieldIntroSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\terran11.ogv", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic11CharBattlefieldIntroSkippable_Init () {
    gt_Animatic11CharBattlefieldIntroSkippable = TriggerCreate("gt_Animatic11CharBattlefieldIntroSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic12 - Horner End
//--------------------------------------------------------------------------------------------------
bool gt_Animatic12HornerEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic12HornerEndSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic12HornerEnd_Init () {
    gt_Animatic12HornerEnd = TriggerCreate("gt_Animatic12HornerEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic12 - Horner End Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic12HornerEndSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran12HornerVictory.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic12HornerEndSkippable_Init () {
    gt_Animatic12HornerEndSkippable = TriggerCreate("gt_Animatic12HornerEndSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic13 - Hansen End B
//--------------------------------------------------------------------------------------------------
bool gt_Animatic13HansenEndB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic13HansenEndBSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic13HansenEndB_Init () {
    gt_Animatic13HansenEndB = TriggerCreate("gt_Animatic13HansenEndB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic13 - Hansen End B Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic13HansenEndBSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran13DrHansenBend.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic13HansenEndBSkippable_Init () {
    gt_Animatic13HansenEndBSkippable = TriggerCreate("gt_Animatic13HansenEndBSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic14 - Tosh End B
//--------------------------------------------------------------------------------------------------
bool gt_Animatic14ToshEndB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic14ToshEndBSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic14ToshEndB_Init () {
    gt_Animatic14ToshEndB = TriggerCreate("gt_Animatic14ToshEndB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic14 - Tosh End B Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic14ToshEndBSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran14ToshBend.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic14ToshEndBSkippable_Init () {
    gt_Animatic14ToshEndBSkippable = TriggerCreate("gt_Animatic14ToshEndBSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic15 - Kerrigan Intro
//--------------------------------------------------------------------------------------------------
bool gt_Animatic15KerriganIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic15KerriganIntroSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic15KerriganIntro_Init () {
    gt_Animatic15KerriganIntro = TriggerCreate("gt_Animatic15KerriganIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic15 - Kerrigan Intro Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic15KerriganIntroSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\SM_Terran15KerriganIntro.ogg", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic15KerriganIntroSkippable_Init () {
    gt_Animatic15KerriganIntroSkippable = TriggerCreate("gt_Animatic15KerriganIntroSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic16 - Char Intro
//--------------------------------------------------------------------------------------------------
bool gt_Animatic16CharIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic16CharIntroSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomChar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic16CharIntro_Init () {
    gt_Animatic16CharIntro = TriggerCreate("gt_Animatic16CharIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic16 - Char Intro Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic16CharIntroSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\terran16.ogv", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic16CharIntroSkippable_Init () {
    gt_Animatic16CharIntroSkippable = TriggerCreate("gt_Animatic16CharIntroSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic17 - Char Battlefield End
//--------------------------------------------------------------------------------------------------
bool gt_Animatic17CharBattlefieldEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Animatic17CharBattlefieldEndSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomChar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic17CharBattlefieldEnd_Init () {
    gt_Animatic17CharBattlefieldEnd = TriggerCreate("gt_Animatic17CharBattlefieldEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Animatic17 - Char Battlefield End Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Animatic17CharBattlefieldEndSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("LocalizedData\\Movies\\InGame\\terran17.ogv", true), libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Animatic17CharBattlefieldEndSkippable_Init () {
    gt_Animatic17CharBattlefieldEndSkippable = TriggerCreate("gt_Animatic17CharBattlefieldEndSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rendered01 - Old Rivals
//--------------------------------------------------------------------------------------------------
bool gt_Rendered01OldRivals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Rendered01OldRivalsSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomVoid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rendered01OldRivals_Init () {
    gt_Rendered01OldRivals = TriggerCreate("gt_Rendered01OldRivals_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rendered01 - Old Rivals Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Rendered01OldRivalsSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lv_movieSource = TransmissionSourceFromMovie("Assets\\Textures\\cinematic_oldrivals.ogv", true);
    TransmissionSourceSetPauseAllowed(lv_movieSource, true);
    TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
    TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rendered01OldRivalsSkippable_Init () {
    gt_Rendered01OldRivalsSkippable = TriggerCreate("gt_Rendered01OldRivalsSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rendered02 - Better Marine
//--------------------------------------------------------------------------------------------------
bool gt_Rendered02BetterMarine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Rendered02BetterMarineSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomVoid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rendered02BetterMarine_Init () {
    gt_Rendered02BetterMarine = TriggerCreate("gt_Rendered02BetterMarine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rendered02 - Better Marine Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Rendered02BetterMarineSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lv_movieSource = TransmissionSourceFromMovie("Assets\\Textures\\cinematic_bettermarine.ogv", true);
    TransmissionSourceSetPauseAllowed(lv_movieSource, true);
    TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
    TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rendered02BetterMarineSkippable_Init () {
    gt_Rendered02BetterMarineSkippable = TriggerCreate("gt_Rendered02BetterMarineSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rendered03 - The Dream
//--------------------------------------------------------------------------------------------------
bool gt_Rendered03TheDream_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Rendered03TheDreamSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomVoid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rendered03TheDream_Init () {
    gt_Rendered03TheDream = TriggerCreate("gt_Rendered03TheDream_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rendered03 - The Dream (No Cleanup)
//--------------------------------------------------------------------------------------------------
bool gt_Rendered03TheDreamNoCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    TriggerExecute(gt_Rendered03TheDreamSkippable, true, true);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_StopAllTransmissionConversation();
    UISetWorldVisible(PlayerGroupAll(), true);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rendered03TheDreamNoCleanup_Init () {
    gt_Rendered03TheDreamNoCleanup = TriggerCreate("gt_Rendered03TheDreamNoCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rendered03 - The Dream Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Rendered03TheDreamSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lv_movieSource = TransmissionSourceFromMovie("Assets\\Textures\\cinematic_thedream.ogv", true);
    TransmissionSourceSetPauseAllowed(lv_movieSource, true);
    TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
    TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rendered03TheDreamSkippable_Init () {
    gt_Rendered03TheDreamSkippable = TriggerCreate("gt_Rendered03TheDreamSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rendered04 - End
//--------------------------------------------------------------------------------------------------
bool gt_Rendered04End_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AnimaticPrepare();
    TriggerExecute(gt_Rendered04EndSkippable, true, true);
    gf_AnimaticCleanup(ge_RoomID_RoomVoid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rendered04End_Init () {
    gt_Rendered04End = TriggerCreate("gt_Rendered04End_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rendered04 - End Skippable
//--------------------------------------------------------------------------------------------------
bool gt_Rendered04EndSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lv_movieSource = TransmissionSourceFromMovie("Assets\\Textures\\cinematic_end.ogv", true);
    TransmissionSourceSetPauseAllowed(lv_movieSource, true);
    TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
    TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "Talk", SoundLink(null, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rendered04EndSkippable_Init () {
    gt_Rendered04EndSkippable = TriggerCreate("gt_Rendered04EndSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Template
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTemplate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("THanson01", ge_RoomID_RoomBridge, gt_BriefingTemplateSkippable, gt_BriefingTemplatePreload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTemplate_Init () {
    gt_BriefingTemplate = TriggerCreate("gt_BriefingTemplate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Template Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTemplateSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHanson, ge_ActorID_ActorHorner, true, true, false, false);
    gf_BriefingPlayVideo("BriefingTTychus01_00", lv__Room, ge_BriefingScreen_Center, false);
    gf_BriefingApplyCamera(lv__Room, ge_BriefingCamera_ScreenMedium, 6.0);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeGame);
    CinematicFade(false, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTemplateSkippable_Init () {
    gt_BriefingTemplateSkippable = TriggerCreate("gt_BriefingTemplateSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Template Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTemplatePreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTemplatePreload_Init () {
    gt_BriefingTemplatePreload = TriggerCreate("gt_BriefingTemplatePreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Play Video Targeting Cursor Sound
//--------------------------------------------------------------------------------------------------
bool gt_BriefingPlayVideoTargetingCursorSound_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_moviePlaying;
    soundlink lv_targetCursorSound;

    // Automatic Variable Declarations
    string autoE2DD8119_val;

    // Variable Initialization
    lv_targetCursorSound = SoundLink("UI_BriefingUnitSelect", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lv_moviePlaying = gv_briefingMovieTexturePlaying;
    autoE2DD8119_val = lv_moviePlaying;
    if (autoE2DD8119_val == "BriefingTRaynor01_02") {
        Wait(1.0, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTRaynor03_03") {
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(0.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTHanson03a_02") {
        Wait(6.4, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(0.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(0.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTHanson03a_04") {
        Wait(1.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTHanson03b_03") {
        Wait(0.68, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTosh03a_03") {
        Wait(2.52, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTosh03b_01") {
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTosh03b_02") {
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTosh03b_03") {
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTychus03_02") {
        Wait(2.18, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTychus04_03") {
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTychus05_00") {
        Wait(1.0, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(3.0, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTValerian02a_00") {
        Wait(0.6, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(2.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(2.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTValerian02b_03") {
        Wait(1.98, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingPlayVideoTargetingCursorSound_Init () {
    gt_BriefingPlayVideoTargetingCursorSound = TriggerCreate("gt_BriefingPlayVideoTargetingCursorSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TRaynor01", ge_RoomID_RoomMarSara, gt_BriefingTRaynor01Skippable, gt_BriefingTRaynor01Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor01_Init () {
    gt_BriefingTRaynor01 = TriggerCreate("gt_BriefingTRaynor01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor01Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomMarSara;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor01MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_BriefingScreen04, ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_ActorID_ActorNone, true, true, false, true);
    lv_portaitRight = gf_BriefingCreatePortrait("AdjutantPortrait", "CameraPortrait02", ge_BriefingScreen_Right, true);
    gf_BriefingPlayVideo("BriefingTRaynor01_00", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(578), 0.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStandingSubtle", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor01BriefingRaynor00006", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(622), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(670), (SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00010", 0)) + SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00011", 0)) + SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00012", 0)) + SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00014", 0))), -1, 20, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitRight, SoundLink("TRaynor01BriefingAdjutant00010", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitRight, SoundLink("TRaynor01BriefingAdjutant00011", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), lv_portaitLeft, SoundLink("TRaynor01BriefingRaynor00012", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTRaynor01_01", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitRight, SoundLink("TRaynor01BriefingAdjutant00013", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTRaynor01_02", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), lv_portaitLeft, SoundLink("TRaynor01BriefingRaynor00014", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(1057), 0.0, -1, 10, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Talk 04", c_animFlagFullMatch, c_animTimeDefault);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, ""), c_invalidPortraitId, SoundLink("TRaynor01BriefingRaynor00015", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor01Skippable_Init () {
    gt_BriefingTRaynor01Skippable = TriggerCreate("gt_BriefingTRaynor01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor01 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor01PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomMarSara, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomMarSara);
    PreloadObject(c_gameCatalogModel, ("AdjutantPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    PreloadMovie("Assets\\Textures\\briefing_video_traynor01_00.ogv", false);
    ConversationDataPreloadLines("TRaynor01Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor01PreloadRough_Init () {
    gt_BriefingTRaynor01PreloadRough = TriggerCreate("gt_BriefingTRaynor01PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BriefingTRaynor01PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor01_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor01_02.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor01Preload_Init () {
    gt_BriefingTRaynor01Preload = TriggerCreate("gt_BriefingTRaynor01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TRaynor02", ge_RoomID_RoomMarSara, gt_BriefingTRaynor02Skippable, gt_BriefingTRaynor02Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor02_Init () {
    gt_BriefingTRaynor02 = TriggerCreate("gt_BriefingTRaynor02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor02Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomMarSara;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor02MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenMedium, ge_ActorID_ActorRaynor, ge_ActorID_ActorTychus, ge_ActorID_ActorNone, true, true, false, false);
    gf_BriefingPlayVideo("BriefingTRaynor02_00", lv__Room, ge_BriefingScreen_Center, false);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStandingSubtle", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    CameraApplyInfo(1, CameraInfoFromId(706), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(671), (SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00001", 0)) + 10.0), -1, 20, true);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(672), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingTychus00002", 0), 0.0, c_transmissionDurationAdd, false);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "SlowStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "VerySlowStanding", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(673), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(684), (SoundLengthSync(SoundLink("TRaynor02BriefingTychus00003", 0)) + SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00004", 0)) + 1.0), -1, 20, true);
    gf_BriefingPlayVideo("BriefingTRaynor02_01", lv__Room, ge_BriefingScreen_Center, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingTychus00003", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(702), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingTychus00005", 0), 0.0, c_transmissionDurationAdd, false);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "SlowStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    Wait(2.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "VerySlowStanding", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(689), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTRaynor02_02", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingRaynor00006", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor02Skippable_Init () {
    gt_BriefingTRaynor02Skippable = TriggerCreate("gt_BriefingTRaynor02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor02 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor02PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomMarSara, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomMarSara);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    PreloadMovie("Assets\\Textures\\briefing_video_traynor02_00.ogv", false);
    ConversationDataPreloadLines("TRaynor02Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor02PreloadRough_Init () {
    gt_BriefingTRaynor02PreloadRough = TriggerCreate("gt_BriefingTRaynor02PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BriefingTRaynor02PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor02_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor02_02.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor02Preload_Init () {
    gt_BriefingTRaynor02Preload = TriggerCreate("gt_BriefingTRaynor02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TRaynor03", ge_RoomID_RoomMarSara, gt_BriefingTRaynor03Skippable, gt_BriefingTRaynor03Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor03_Init () {
    gt_BriefingTRaynor03 = TriggerCreate("gt_BriefingTRaynor03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor03Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomMarSara;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor03MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_twoshots04, ge_ActorID_ActorRaynor, ge_ActorID_ActorTychus, ge_ActorID_ActorNone, true, true, false, false);
    lv_portaitRight = gf_BriefingCreatePortrait("AdjutantPortrait", "Default", ge_BriefingScreen_Right, true);
    gf_BriefingPlayVideo("BriefingTRaynor03_00", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(1033), 0.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStandingSubtle", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 2.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 1.0);
    CameraApplyInfo(1, CameraInfoFromId(993), (SoundLengthSync(SoundLink("TRaynor03BriefingTychus00002", 0)) - 3.0), -1, 20, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingTychus00002", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Right)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Right));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("AdjutantPortrait"), lv_portaitRight, SoundLink("TRaynor03BriefingAdjutant00003", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowStanding", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    Wait(0.3, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "SlowStandingSubtle", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(797), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTRaynor03_01", lv__Room, ge_BriefingScreen_Center, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(1034), 0.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnly", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorRaynor)), 0.4, (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorRaynor)) + 5.0)), 0.75));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), "Fidget", "Talk 05", c_animFlagFullMatch, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), (SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00004", 0)) / 3.0));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "SlowStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 2.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingTychus00005", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorRaynor)), 0.4, (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorRaynor)) + 30.0)), 0.75));
    CameraApplyInfo(1, CameraInfoFromId(802), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 1.0);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnlySubtle", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    TransmissionWait(TransmissionLastSent(), 0.25);
    CameraApplyInfo(1, CameraInfoFromId(925), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTRaynor03_02", lv__Room, ge_BriefingScreen_Center, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("AdjutantPortrait"), lv_portaitRight, SoundLink("TRaynor03BriefingAdjutant00006", 0), 0.0, c_transmissionDurationAdd, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeGame);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "VerySlowStandingSubtle", gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center), "Ref_Head");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Right)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeReal);
    gf_BriefingPlayVideo("BriefingTRaynor03_03", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeGame);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    gf_BriefingPlayVideo("BriefingTRaynor03_04", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingTychus00010", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.5);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorTychus), "SlowHeadOnlySubtle");
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(936), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00011", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor03Skippable_Init () {
    gt_BriefingTRaynor03Skippable = TriggerCreate("gt_BriefingTRaynor03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor03 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor03PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomMarSara, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomMarSara);
    PreloadObject(c_gameCatalogModel, ("AdjutantPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    PreloadMovie("Assets\\Textures\\briefing_video_traynor03_00.ogv", false);
    ConversationDataPreloadLines("TRaynor03Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor03PreloadRough_Init () {
    gt_BriefingTRaynor03PreloadRough = TriggerCreate("gt_BriefingTRaynor03PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor03Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTRaynor03PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor03_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor03_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor03_03.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor03Preload_Init () {
    gt_BriefingTRaynor03Preload = TriggerCreate("gt_BriefingTRaynor03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("THanson01", ge_RoomID_RoomBridge, gt_BriefingTHanson01Skippable, gt_BriefingTHanson01Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson01_Init () {
    gt_BriefingTHanson01 = TriggerCreate("gt_BriefingTHanson01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson01Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson01MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorTychus, ge_ActorID_ActorNone, true, true, false, false);
    lv_portaitMiddle = gf_BriefingCreatePortrait("HansonPortrait", "CameraPortrait02", ge_BriefingScreen_Center, false);
    lv_portaitLeft = gf_BriefingCreatePortrait("HansonPortrait", "Default", ge_BriefingScreen_Left, true);
    CameraApplyInfo(1, CameraInfoFromId(607), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(608), 5.0, -1, 20, true);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main)), c_animNameDefault, "Talk 01", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center)), c_animNameDefault, "Stand", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("IncomingTransmission", 0), 0.0, c_transmissionDurationAdd, true);
    SoundPlay(SoundLink("Hanson01BriefingAlarm", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_briefingSoundPlayed = SoundLastPlayed();
    PortraitSetChannel(lv_portaitMiddle, 1);
    Wait(0.6, c_timeGame);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("HansonPortrait"), lv_portaitMiddle, SoundLink("THanson01BriefingHanson00001", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(642), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson01BriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    CameraApplyInfo(1, CameraInfoFromId(93), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTHanson01_00", lv__Room, ge_BriefingScreen_Center, true);
    PortraitDestroy(lv_portaitMiddle);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("HansonPortrait"), lv_portaitLeft, SoundLink("THanson01BriefingHanson00010", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTHanson01_01", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("HansonPortrait"), lv_portaitLeft, SoundLink("THanson01BriefingHanson00011", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("HansonPortrait"), lv_portaitLeft, SoundLink("THanson01BriefingHanson00012", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTHanson01_02", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson01BriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("HansonPortrait"), lv_portaitLeft, SoundLink("THanson01BriefingHanson00003", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson01Skippable_Init () {
    gt_BriefingTHanson01Skippable = TriggerCreate("gt_BriefingTHanson01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson01 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson01PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("HansonPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    PreloadMovie("Assets\\Textures\\briefing_video_thanson01_00.ogv", false);
    ConversationDataPreloadLines("THanson01Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson01PreloadRough_Init () {
    gt_BriefingTHanson01PreloadRough = TriggerCreate("gt_BriefingTHanson01PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTHanson01PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson01_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson01_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson01_03.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson01Preload_Init () {
    gt_BriefingTHanson01Preload = TriggerCreate("gt_BriefingTHanson01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("THanson02", ge_RoomID_RoomBridge, gt_BriefingTHanson02Skippable, gt_BriefingTHanson02Preload);
    UnitSetPropertyFixed(gf_ActorUnit(ge_ActorID_ActorRaynor), c_unitPropMovementSpeed, (UnitGetPropertyFixed(gf_ActorUnit(ge_ActorID_ActorRaynor), c_unitPropMovementSpeed, c_unitPropNormal) / 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson02_Init () {
    gt_BriefingTHanson02 = TriggerCreate("gt_BriefingTHanson02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson02Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;
    fixed lv_duration;
    int lv_tempTransmission;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;
    lv_tempTransmission = c_invalidTransmissionId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHanson, ge_ActorID_ActorNone, true, true, false, false);
    gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(708));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(707));
    SoundPlay(SoundLink("THanson02Briefing_Hyperion", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_briefingMovieSound = SoundLastPlayed();
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("Assets\\Textures\\video_briefingportrait_thanson02.ogv", false), libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, false);
    gv_briefingMovieTransmission = TransmissionLastSent();
    UISetWorldVisible(PlayerGroupAll(), false);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 3.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    libWoLC_gf_DisplayTimestamp("Hanson02_Briefing", false);
    gf_BriefingPlayVideo("BriefingTHanson02_00", lv__Room, ge_BriefingScreen_Center, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(1, CameraInfoFromId(709), 0.0, -1, 10, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    TransmissionClear(gv_briefingMovieTransmission);
    gv_briefingMovieTransmission = c_invalidTransmissionId;
    CameraApplyInfo(1, CameraInfoFromId(934), (SoundLengthSync(SoundLink("THanson02BriefingRaynor00002", 0)) + 4.0), -1, 0, true);
    Wait(1.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingHanson00010", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.125, c_timeReal);
    TriggerExecute(gt_BriefingTHanson02Camera2, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(713));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(712));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingRaynor00011", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.9, c_timeReal);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(715));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Custom Walk Forward", c_animFlagNonLooping, 0.0);
    Wait(0.1, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(714), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(716), 1.7, -1, 20, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingRaynor00006", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.0625, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 3.5);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "SlowHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.0625, c_timeReal);
    gf_BriefingPlayVideo("BriefingTHanson02_05", lv__Room, ge_BriefingScreen_Center, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "SlowHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(696), 0.5));
    Wait(0.5, c_timeReal);
    TriggerExecute(gt_BriefingTHanson02ButDelay, true, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingHanson00012", 0), 0.0, c_transmissionDurationAdd, false);
    lv_tempTransmission = TransmissionLastSent();
    Wait(0.5, c_timeReal);
    gf_BriefingPlayVideo("BriefingTHanson02_02", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    TransmissionWait(lv_tempTransmission, 0.2);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingHanson00008", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(2.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingHanson00001", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingRaynor00003", 0), 1.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTHanson02_03", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingHanson00005", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTHanson02_04", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson02BriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorHanson), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(719), 0.0, -1, 10, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    TransmissionClear(gv_briefingMovieTransmission);
    gv_briefingMovieTransmission = c_invalidTransmissionId;
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "MedStanding", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 1.0);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "VerySlowStanding");
    Wait(1.0, c_timeReal);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson02Skippable_Init () {
    gt_BriefingTHanson02Skippable = TriggerCreate("gt_BriefingTHanson02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson02 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson02PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHanson));
    PreloadMovie("Assets\\Textures\\video_briefingportrait_thanson02.ogv", false);
    ConversationDataPreloadLines("THanson02Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson02PreloadRough_Init () {
    gt_BriefingTHanson02PreloadRough = TriggerCreate("gt_BriefingTHanson02PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTHanson02PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson02_00.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson02_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson02_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson02_03.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson02_04.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson02_05.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson02Preload_Init () {
    gt_BriefingTHanson02Preload = TriggerCreate("gt_BriefingTHanson02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson02 Camera 2
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson02Camera2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_duration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lv_duration = ((SoundLengthSync(SoundLink("THanson02BriefingHanson00010", 0)) + 0.0) / 1.0);
    CameraApplyInfo(1, CameraInfoFromId(710), 0.0, 100, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(852), (lv_duration / 1.0), 100, 20, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson02Camera2_Init () {
    gt_BriefingTHanson02Camera2 = TriggerCreate("gt_BriefingTHanson02Camera2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson02 But Delay
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson02ButDelay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(0.5, c_timeReal);
    gf_BriefingPlayVideo("BriefingTHanson02_02", ge_RoomID_RoomBridge, ge_BriefingScreen_Center, true);
    CameraApplyInfo(1, CameraInfoFromId(718), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson02ButDelay_Init () {
    gt_BriefingTHanson02ButDelay = TriggerCreate("gt_BriefingTHanson02ButDelay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson03A
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson03A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("THanson03A", ge_RoomID_RoomBridge, gt_BriefingTHanson03ASkippable, gt_BriefingTHanson03APreload);
    gf_CloseDoor(ge_RoomID_RoomBridge, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson03A_Init () {
    gt_BriefingTHanson03A = TriggerCreate("gt_BriefingTHanson03A_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson03A Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson03ASkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03AMusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_BriefingScreen04, ge_ActorID_ActorRaynor, ge_ActorID_ActorHanson, ge_ActorID_ActorNone, true, true, false, false);
    lv_portaitRight = gf_BriefingCreatePortrait("SwannPortrait", "Default", ge_BriefingScreen_Right, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(690));
    gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(ge_ActorID_ActorRaynor), "Listen", false, 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(691));
    gf_BriefingPlayVideo("BriefingTHanson03a_00", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(692), 0.0, -1, 10, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHanson)), gv_aNIMID_BRIEFING, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.5, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03AMusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03ABriefingHanson00001", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.5, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "VerySlowStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(693));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Custom Talk B Start", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    CameraApplyInfo(1, CameraInfoFromId(694), 0.0, -1, 10, true);
    Wait(0.25, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, ""), c_invalidPortraitId, SoundLink("THanson03ABriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(695), 3.0, -1, 10, true);
    Wait(1.7, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Stand B 01", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, 20.0);
    CameraApplyInfo(1, CameraInfoFromId(697), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, ""), c_invalidPortraitId, SoundLink("THanson03ABriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(2.0, c_timeReal);
    gf_MakeUnitLookAtPointWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(849), 0.6));
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_BriefingPlayVideo("BriefingTHanson03a_01", lv__Room, ge_BriefingScreen_Center, true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(649), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03ABriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Right)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Right));
    Wait(0.25, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(648), 2.0, -1, 10, true);
    Wait(0.75, c_timeReal);
    ActorSend(ActorFromPortrait(lv_portaitRight), "AnimPlay Briefing Talk PlayForever");
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel(null), lv_portaitRight, "", SoundLink("THanson03ABriefingSwann00007", -1), null, null, 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTHanson03a_02", lv__Room, ge_BriefingScreen_Center, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel(null), lv_portaitRight, "", SoundLink("THanson03ABriefingSwann00003", -1), null, null, 0.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel(null), lv_portaitRight, "", SoundLink("THanson03ABriefingSwann00008", -1), null, null, 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Right)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gf_BriefingPlayVideo("BriefingTHanson03a_03", lv__Room, ge_BriefingScreen_Center, true);
    CameraApplyInfo(1, CameraInfoFromId(645), 2.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03ABriefingHanson00005", 0), 0.0, c_transmissionDurationAdd, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(700), 0.5));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Right));
    gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(ge_ActorID_ActorRaynor), "B", true, 0.0);
    CameraApplyInfo(1, CameraInfoFromId(698), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03ABriefingHanson00010", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "FastHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), "Listen");
    gf_BriefingPlayVideo("BriefingTHanson03a_04", lv__Room, ge_BriefingScreen_Center, true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, ""), c_invalidPortraitId, SoundLink("THanson03ABriefingRaynor00006", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(699), 0.0, -1, 10, true);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorHanson));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, ""), c_invalidPortraitId, SoundLink("THanson03ABriefingRaynor00011", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Talk B End", c_animFlagPlayForever | c_animFlagNonLooping, 1.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson03ASkippable_Init () {
    gt_BriefingTHanson03ASkippable = TriggerCreate("gt_BriefingTHanson03ASkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson03A Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson03APreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("SwannPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHanson));
    PreloadMovie("Assets\\Textures\\briefing_video_thanson03a_00.ogv", false);
    ConversationDataPreloadLines("THanson03ABriefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson03APreloadRough_Init () {
    gt_BriefingTHanson03APreloadRough = TriggerCreate("gt_BriefingTHanson03APreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson03A Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson03APreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTHanson03APreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson03a_01.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson03APreload_Init () {
    gt_BriefingTHanson03APreload = TriggerCreate("gt_BriefingTHanson03APreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson03B
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson03B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("THanson03B", ge_RoomID_RoomBridge, gt_BriefingTHanson03BSkippable, gt_BriefingTHanson03BPreload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson03B_Init () {
    gt_BriefingTHanson03B = TriggerCreate("gt_BriefingTHanson03B_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson03B Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson03BSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03BMusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenClose, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorTychus, true, true, false, false);
    lv_portaitRight = gf_BriefingCreatePortrait("SwannPortrait", "Default", ge_BriefingScreen_Right, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(297));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(937));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(874));
    gf_BriefingPlayVideo("BriefingTHanson03b_00", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(949), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03BBriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 3.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    Wait(3.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03BBriefingRaynor00010", 0), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "MedStanding");
    TransmissionWait(TransmissionLastSent(), 2.0);
    Wait(2.0, c_timeReal);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(42), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03BBriefingRaynor00003", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03BBriefingTychus00004", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(950), 0.0, -1, 10, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "SlowHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
    Wait(1.0, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 3.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "MedStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 1.0);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "MedStanding");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorTychus), "MedStandingSubtle");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03BBriefingRaynor00006", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(952), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Right)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Right));
    Wait(1.0, c_timeReal);
    gf_BriefingPlayVideo("BriefingTHanson03b_01", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitRight, SoundLink("THanson03BBriefingSwann00007", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitRight, SoundLink("THanson03BBriefingSwann00009", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Right)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(920));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_BriefingPlayVideo("BriefingTHanson03b_02", lv__Room, ge_BriefingScreen_Center, true);
    CameraApplyInfo(1, CameraInfoFromId(658), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(656), 10.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03BBriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTHanson03b_03", lv__Room, ge_BriefingScreen_Center, true);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03BBriefingTychus00013", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(951), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THanson03BBriefingRaynor00011", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeGame);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "VerySlowHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(256), 0.4));
    TransmissionWait(TransmissionLastSent(), 0.5);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson03BSkippable_Init () {
    gt_BriefingTHanson03BSkippable = TriggerCreate("gt_BriefingTHanson03BSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson03B Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson03BPreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("SwannPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    PreloadMovie("Assets\\Textures\\briefing_video_thanson03b_00.ogv", false);
    ConversationDataPreloadLines("THanson03BBriefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson03BPreloadRough_Init () {
    gt_BriefingTHanson03BPreloadRough = TriggerCreate("gt_BriefingTHanson03BPreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THanson03B Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHanson03BPreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTHanson03BPreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson03b_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson03b_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson03b_03.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thanson03b_04.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHanson03BPreload_Init () {
    gt_BriefingTHanson03BPreload = TriggerCreate("gt_BriefingTHanson03BPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("THorner01", ge_RoomID_RoomBridge, gt_BriefingTHorner01Skippable, gt_BriefingTHorner01Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner01_Init () {
    gt_BriefingTHorner01 = TriggerCreate("gt_BriefingTHorner01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner01Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone, true, true, false, false);
    gf_BriefingPlayVideo("BriefingTHorner01_00", lv__Room, ge_BriefingScreen_Center, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(44));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(46));
    CameraApplyInfo(1, CameraInfoFromId(629), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(632), 10.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner01BriefingRaynor00018", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(631), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner01BriefingHorner00002", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner01BriefingHorner00004", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 2.0);
    gf_BriefingPlayVideo("BriefingTHorner01_01", lv__Room, ge_BriefingScreen_Center, true);
    Wait(2.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner01BriefingHorner00006", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner01BriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(942), 0.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnly", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorRaynor)), 1.0, (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorRaynor)) + 60.0)), 0.7));
    TransmissionWait(TransmissionLastSent(), 4.0);
    Wait(4.0, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(630), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner01BriefingHorner00008", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(45));
    CameraApplyInfo(1, CameraInfoFromId(633), 0.0, -1, 10, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner01BriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(3.0, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowStanding");
    TransmissionWait(TransmissionLastSent(), 2.7);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedStanding");
    Wait(0.3, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Custom Turn Walk Right", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.5, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnly");
    Wait(0.25, c_timeGame);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "FastStanding");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner01Skippable_Init () {
    gt_BriefingTHorner01Skippable = TriggerCreate("gt_BriefingTHorner01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner01 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner01PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    PreloadMovie("Assets\\Textures\\briefing_video_thorner01_00.ogv", false);
    ConversationDataPreloadLines("THorner01Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner01PreloadRough_Init () {
    gt_BriefingTHorner01PreloadRough = TriggerCreate("gt_BriefingTHorner01PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTHorner01PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner01_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner01_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner01_03.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner01Preload_Init () {
    gt_BriefingTHorner01Preload = TriggerCreate("gt_BriefingTHorner01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("THorner02", ge_RoomID_RoomBridge, gt_BriefingTHorner02Skippable, gt_BriefingTHorner02Preload);
    UnitSetPropertyFixed(gf_ActorUnit(ge_ActorID_ActorRaynor), c_unitPropMovementSpeed, (UnitGetPropertyFixed(gf_ActorUnit(ge_ActorID_ActorRaynor), c_unitPropMovementSpeed, c_unitPropNormal) / 1.0));
    TextTagDestroy(gv_briefingTHorner02Text);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner02_Init () {
    gt_BriefingTHorner02 = TriggerCreate("gt_BriefingTHorner02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner02Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft1;
    int lv_portaitLeft2;
    int lv_portaitMiddleHan;
    int lv_portaitMiddlePlanet;
    int lv_portaitRight;
    string lv_angryChannel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft1 = c_invalidPortraitId;
    lv_portaitLeft2 = c_invalidPortraitId;
    lv_portaitMiddleHan = c_invalidPortraitId;
    lv_portaitMiddlePlanet = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;
    lv_angryChannel = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner02MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone, true, true, false, false);
    lv_portaitMiddleHan = gf_BriefingCreatePortrait("HanPortrait", "Default", ge_BriefingScreen_Center, false);
    lv_portaitMiddlePlanet = gf_BriefingCreatePortrait("PlanetViewPortZion", "Star2 BattleNetGlue", ge_BriefingScreen_Center, true);
    lv_portaitLeft1 = gf_BriefingCreatePortrait("HanPortrait", "Default", ge_BriefingScreen_Left, false);
    lv_portaitLeft2 = gf_BriefingCreatePortrait("HanPortrait", "Default", ge_BriefingScreen_Left, false);
    CameraApplyInfo(1, CameraInfoFromId(634), 0.0, -1, 10, true);
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(678));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(680));
    PortraitWaitForLoad(lv_portaitMiddlePlanet);
    ActorSend(ActorFromPortrait(lv_portaitMiddlePlanet), "AnimPlay Default Stand PlayForever");
    ActorSend(ActorFromPortrait(lv_portaitMiddlePlanet), "AnimSetTimeScale Default 5.000000");
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner02BriefingHorner00001", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.75, c_timeReal);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(679));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk End", c_animFlagNonLooping, 0.0);
    Wait(2.25, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "SlowHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner02BriefingHorner00011", 0), 0.0, c_transmissionDurationAdd, false);
    CameraApplyInfo(1, CameraInfoFromId(681), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main)), c_animNameDefault, "GLstand", c_animFlagPlayForever, c_animTimeDefault);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(682), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner02BriefingRaynor00018", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gv_briefingTHorner02ITDone = false;
    TriggerExecute(gt_BriefingTHorner02IncomingTransmission, true, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(254), 0.6));
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main)), c_animNameDefault, "Talk 01", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center)), c_animNameDefault, "Talk 01", c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.5, c_timeReal);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(703), 0.0, -1, 10, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main)), c_animNameDefault, 100.0);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    PortraitSetChannel(lv_portaitMiddleHan, 1);
    TriggerExecute(gt_BriefingTHorner02HanText, true, false);
    Wait(0.6, c_timeGame);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitMiddleHan, SoundLink("THorner02BriefingHan00003", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitMiddleHan, SoundLink("THorner02BriefingHan00012", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    CameraApplyInfo(1, CameraInfoFromId(687), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner02BriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    CameraApplyInfo(1, CameraInfoFromId(704), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitMiddleHan, SoundLink("THorner02BriefingHan00005", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(687), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner02BriefingRaynor00006", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTHorner02_00", lv__Room, ge_BriefingScreen_Center, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left)), c_animNameDefault, 100.0);
    PortraitSetChannel(lv_portaitLeft1, 2);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    PortraitDestroy(lv_portaitMiddleHan);
    lv_portaitMiddleHan = c_invalidPortraitId;
    CameraApplyInfo(1, CameraInfoFromId(704), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft1, SoundLink("THorner02BriefingHan00010", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 2.0);
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(956));
    CameraApplyInfo(1, CameraInfoFromId(928), 0.75, -1, 10, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, "Custom Fidget", c_animFlagNonLooping, 1.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, 35.0);
    Wait(2.75, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Fidget", c_animFlagNonLooping, 0.0);
    CameraApplyInfo(1, CameraInfoFromId(935), 0.0, -1, 10, true);
    Wait(1.0, c_timeReal);
    Wait(3.0, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(704), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.57, c_timeReal);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    PortraitDestroy(lv_portaitLeft1);
    lv_portaitLeft1 = c_invalidPortraitId;
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    gf_BriefingPlayVideo("BriefingTHorner02_02", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner02BriefingHorner00007", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(685));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(252));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(253), 0.6));
    CameraApplyInfo(1, CameraInfoFromId(705), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner02BriefingHorner00008", 0), 0.0, c_transmissionDurationAdd, false);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.5);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner02BriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(2.0, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.5);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner02Skippable_Init () {
    gt_BriefingTHorner02Skippable = TriggerCreate("gt_BriefingTHorner02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner02 Han Text
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner02HanText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(ConversationDataStateText("StoryText|StoryText01", "Text"), 32, UnitGetPosition(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center)), 0.0, true, false, PlayerGroupAll());
    gv_briefingTHorner02Text = TextTagLastCreated();
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.0, 0.0);
    TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignBottom);
    TextTagAttachToUnitPoint(TextTagLastCreated(), gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center), "Ref_StatusBar", 0, -60);
    TextTagShowBackground(TextTagLastCreated(), false);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 10.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 9.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner02HanText_Init () {
    gt_BriefingTHorner02HanText = TriggerCreate("gt_BriefingTHorner02HanText_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner02 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner02PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("HanPortrait"), false);
    PreloadObject(c_gameCatalogModel, ("PlanetViewPortZion"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    PreloadMovie("Assets\\Textures\\briefing_video_thorner02_00.ogv", false);
    ConversationDataPreloadLines("THorner02Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner02PreloadRough_Init () {
    gt_BriefingTHorner02PreloadRough = TriggerCreate("gt_BriefingTHorner02PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BriefingTHorner02PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner02_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner02_02.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner02Preload_Init () {
    gt_BriefingTHorner02Preload = TriggerCreate("gt_BriefingTHorner02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner02 Incoming Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner02IncomingTransmission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomBridge;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_BriefingStopVideo(lv__Room, ge_BriefingScreen_Center);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("IncomingTransmission", 0), 0.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Horner02BriefingAlarm", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_briefingSoundPlayed = SoundLastPlayed();
    gv_briefingTHorner02ITDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner02IncomingTransmission_Init () {
    gt_BriefingTHorner02IncomingTransmission = TriggerCreate("gt_BriefingTHorner02IncomingTransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("THorner03", ge_RoomID_RoomBridge, gt_BriefingTHorner03Skippable, gt_BriefingTHorner03Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner03_Init () {
    gt_BriefingTHorner03 = TriggerCreate("gt_BriefingTHorner03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner03Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;
    sound lv_alarmSound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner03MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone, true, true, false, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(82));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(79));
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTHorner03_00", lv__Room, ge_BriefingScreen_Center, false);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("TychusPortrait"), lv_portaitMiddle, SoundLink("THorner03BriefingHorner00001", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(86), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTHorner03_01", lv__Room, ge_BriefingScreen_Center, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner03BriefingHorner00012", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner03BriefingRaynor00013", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(83), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner03BriefingRaynor00005", 0), 0.0, c_transmissionDurationAdd, false);
    Wait((SoundLengthSync(SoundLink("THorner03BriefingRaynor00005", 0)) / 2.0), c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_BriefingPlayVideo("BriefingTHorner03_02", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner03BriefingHorner00014", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner03BriefingHorner00004", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(82), 0.6));
    CameraApplyInfo(1, CameraInfoFromId(110), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner03BriefingHorner00002", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(215), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner03BriefingRaynor00015", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "VerySlowHeadOnlySubtle");
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerExecute(gt_BriefingTHorner03Odin, true, false);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner03BriefingHorner00016", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner03BriefingRaynor00017", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTHorner03_04", lv__Room, ge_BriefingScreen_Center, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner03BriefingHorner00018", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    Wait(2.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("THorner03BriefingTychus00019", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.5, c_timeReal);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner03Skippable_Init () {
    gt_BriefingTHorner03Skippable = TriggerCreate("gt_BriefingTHorner03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner03 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner03PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("TychusPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    PreloadMovie("Assets\\Textures\\briefing_video_thorner03_00.ogv", false);
    ConversationDataPreloadLines("THorner03Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner03PreloadRough_Init () {
    gt_BriefingTHorner03PreloadRough = TriggerCreate("gt_BriefingTHorner03PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner03Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BriefingTHorner03PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner03_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner03_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner03_03.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner03_04.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner03Preload_Init () {
    gt_BriefingTHorner03Preload = TriggerCreate("gt_BriefingTHorner03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner03 Odin
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner03Odin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_BriefingPlayVideo("video_TVHorner03_Odin", ge_RoomID_RoomBridge, ge_BriefingScreen_Center, false);
    Wait(5.0, c_timeReal);
    gf_BriefingPlayVideo("Video_TVHorner03_Shooting", ge_RoomID_RoomBridge, ge_BriefingScreen_Center, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner03Odin_Init () {
    gt_BriefingTHorner03Odin = TriggerCreate("gt_BriefingTHorner03Odin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("THorner04", ge_RoomID_RoomBridge, gt_BriefingTHorner04Skippable, gt_BriefingTHorner04Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner04_Init () {
    gt_BriefingTHorner04 = TriggerCreate("gt_BriefingTHorner04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner04 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner04Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;
    sound lv_alarmSound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner04MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone, true, true, false, false);
    gf_BriefingPlayVideo("BriefingTHorner04_00", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(755), 0.0, -1, 10, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(753));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(754));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), gv_aNIMID_HIGHLIGHT, "Lighting 02 C", c_animFlagPlayForever, 0.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(756), 12.0, 100, 0, true);
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingHorner00001", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    CameraApplyInfo(1, CameraInfoFromId(222), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingHorner00010", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(230), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingRaynor00012", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(637), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingHorner00013", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(2.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(696), 0.6));
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(686), 3.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gf_BriefingPlayVideo("BriefingTHorner04_01", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingHorner00003", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gf_BriefingPlayVideo("BriefingTHorner04_02", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(754));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "VerySlowStanding", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(757), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingHorner00011", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(677), 0.0, 0, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gf_BriefingPlayVideo("BriefingTHorner04_03", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingHorner00005", 0), 0.0, c_transmissionDurationAdd, false);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(696), 0.7));
    Wait(0.3, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(758), 0.0, -1, 10, true);
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(759));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(761));
    TransmissionWait(TransmissionLastSent(), 0.5);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(696), 0.7));
    gf_BriefingPlayVideo("BriefingVideoPortraitHorner04", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingHorner00006", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Custom Walk Right", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(762), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner04BriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner04Skippable_Init () {
    gt_BriefingTHorner04Skippable = TriggerCreate("gt_BriefingTHorner04Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner04 Camera Pan1
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner04CameraPan1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(1.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(686), 3.5, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner04CameraPan1_Init () {
    gt_BriefingTHorner04CameraPan1 = TriggerCreate("gt_BriefingTHorner04CameraPan1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner04 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner04PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    PreloadMovie("Assets\\Textures\\briefing_video_thorner04_00.ogv", false);
    ConversationDataPreloadLines("THorner04Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner04PreloadRough_Init () {
    gt_BriefingTHorner04PreloadRough = TriggerCreate("gt_BriefingTHorner04PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner04 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner04Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BriefingTHorner04PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner04_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner04_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner04_03.ogv", false);
    PreloadMovie("Assets\\Textures\\video_briefingportrait_tthorner04.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner04Preload_Init () {
    gt_BriefingTHorner04Preload = TriggerCreate("gt_BriefingTHorner04Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner05s
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner05s_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("THorner05S", ge_RoomID_RoomBridge, gt_BriefingTHorner05sSkippable, gt_BriefingTHorner05sPreload);
    UIHideTextCrawl(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner05s_Init () {
    gt_BriefingTHorner05s = TriggerCreate("gt_BriefingTHorner05s_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner05s Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner05sSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;
    sound lv_alarmSound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone, true, true, false, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(436));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(437));
    SoundPlay(SoundLink("THorner05sBriefing_EstablishingShot", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_briefingMovieSound = SoundLastPlayed();
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("Assets\\Textures\\video_briefingportrait_thorner05s.ogv", false), libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, false);
    gv_briefingMovieTransmission = TransmissionLastSent();
    UISetWorldVisible(PlayerGroupAll(), false);
    Wait(0.5, c_timeReal);
    TriggerExecute(gt_BriefingTHorner05sTimestamp, true, false);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(3.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner05SBriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    gf_BriefingPlayVideo("BriefingTHorner05_00", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(431), 0.0, -1, 10, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    TransmissionClear(gv_briefingMovieTransmission);
    gv_briefingMovieTransmission = c_invalidTransmissionId;
    Wait(0.25, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(111), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner05SBriefingHorner00008", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner05SBriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(432), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner05SBriefingRaynor00005", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(433), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTHorner05_01", lv__Room, ge_BriefingScreen_Center, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner05SBriefingHorner00011", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(434), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner05SBriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.1, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), "Blink", "Blink", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnlySubtle");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(438));
    CameraApplyInfo(1, CameraInfoFromId(435), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("THorner05SBriefingRaynor00010", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner05sSkippable_Init () {
    gt_BriefingTHorner05sSkippable = TriggerCreate("gt_BriefingTHorner05sSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner05s Timestamp
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner05sTimestamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIShowTextCrawl(PlayerGroupAll(), ConversationDataStateText("Timestamps|Horner05S_Briefing", "Title"), ConversationDataStateText("Timestamps|Horner05S_Briefing", "Description"), 5.0, SoundLink("Silent", -1), SoundLink("TextCrawlType", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner05sTimestamp_Init () {
    gt_BriefingTHorner05sTimestamp = TriggerCreate("gt_BriefingTHorner05sTimestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner05s Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner05sPreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    PreloadMovie("Assets\\Textures\\briefing_video_thorner05s_00.ogv", false);
    ConversationDataPreloadLines("THorner05SBriefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner05sPreloadRough_Init () {
    gt_BriefingTHorner05sPreloadRough = TriggerCreate("gt_BriefingTHorner05sPreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - THorner05s Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTHorner05sPreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BriefingTHorner05sPreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_thorner05s_01.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTHorner05sPreload_Init () {
    gt_BriefingTHorner05sPreload = TriggerCreate("gt_BriefingTHorner05sPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TTosh01", ge_RoomID_RoomBridge, gt_BriefingTTosh01Skippable, gt_BriefingTTosh01Preload);
    UIHideTextCrawl(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh01_Init () {
    gt_BriefingTTosh01 = TriggerCreate("gt_BriefingTTosh01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh01Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone, true, true, false, false);
    lv_portaitLeft = gf_BriefingCreatePortrait("ToshPortrait", "Default", ge_BriefingScreen_Left, true);
    gf_BriefingStopVideo(lv__Room, ge_BriefingScreen_Center);
    SoundPlay(SoundLink("TTosh01Briefing_Hyperion", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_briefingMovieSound = SoundLastPlayed();
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("Assets\\Textures\\video_briefingportrait_ttosh01.ogv", false), libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, false);
    gv_briefingMovieTransmission = TransmissionLastSent();
    UISetWorldVisible(PlayerGroupAll(), false);
    Wait(0.5, c_timeReal);
    TriggerExecute(gt_BriefingTTosh01Timestamp, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(1.5, c_timeGame);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh01BriefingRaynor00002", 0), 1.0, c_transmissionDurationAdd, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh01MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(1, CameraInfoFromId(441), 0.0, -1, 10, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    TransmissionClear(gv_briefingMovieTransmission);
    gv_briefingMovieTransmission = c_invalidTransmissionId;
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh01BriefingRaynor00004", 0), 1.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
    gf_BriefingPlayVideo("BriefingTTosh01_01", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(442), 0.0, -1, 10, true);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ToshPortrait"), lv_portaitLeft, SoundLink("TTosh01BriefingTosh00001", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ToshPortrait"), lv_portaitLeft, SoundLink("TTosh01BriefingTosh00007", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh01BriefingRaynor00003", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ToshPortrait"), lv_portaitLeft, SoundLink("TTosh01BriefingTosh00010", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ToshPortrait"), lv_portaitLeft, SoundLink("TTosh01BriefingTosh00005", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeReal);
    gf_BriefingPlayVideo("BriefingTTosh01_02", lv__Room, ge_BriefingScreen_Center, true);
    CameraApplyInfo(1, CameraInfoFromId(443), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), true, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh01BriefingHorner00011", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), true, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh01BriefingHorner00006", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(439), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh01BriefingRaynor00012", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh01BriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, false);
    Wait((SoundLengthSync(SoundLink("TTosh01BriefingRaynor00008", 0)) / 2.0), c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Custom Turn Walk Right", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), "Blink", "Blink", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "VerySlowHeadOnlySubtle");
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh01Skippable_Init () {
    gt_BriefingTTosh01Skippable = TriggerCreate("gt_BriefingTTosh01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh01 Timestamp
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh01Timestamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIShowTextCrawl(PlayerGroupAll(), ConversationDataStateText("Timestamps|Tosh01_Briefing", "Title"), ConversationDataStateText("Timestamps|Tosh01_Briefing", "Description"), 5.0, SoundLink("Silent", -1), SoundLink("TextCrawlType", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh01Timestamp_Init () {
    gt_BriefingTTosh01Timestamp = TriggerCreate("gt_BriefingTTosh01Timestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh01 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh01PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("ToshPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh01_00.ogv", false);
    ConversationDataPreloadLines("TTosh01Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh01PreloadRough_Init () {
    gt_BriefingTTosh01PreloadRough = TriggerCreate("gt_BriefingTTosh01PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BriefingTTosh01PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh01_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh01_02.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh01Preload_Init () {
    gt_BriefingTTosh01Preload = TriggerCreate("gt_BriefingTTosh01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TTosh02", ge_RoomID_RoomBridge, gt_BriefingTTosh02Skippable, gt_BriefingTTosh02Preload);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_bridgeCommunicator), c_animNameDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh02_Init () {
    gt_BriefingTTosh02 = TriggerCreate("gt_BriefingTTosh02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh02Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh02MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorTosh, ge_ActorID_ActorNone, true, true, false, false);
    lv_portaitMiddle = gf_BriefingCreatePortrait("SwannPortrait", "Default", ge_BriefingScreen_Center, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(445));
    gf_ResetActorToLocation(ge_ActorID_ActorTosh, PointFromId(446));
    gf_BriefingPlayVideo("BriefingTTosh02_00", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(447), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTosh), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingTosh00001", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTosh), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingTosh00011", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.5);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTosh), "SlowHeadOnly", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorTosh)), 1.0, (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorTosh)) + -70.0)), 0.6));
    Wait(1.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, false);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnlySubtle", libNtve_gf_PointWithZOffset(PointFromId(449), 0.7));
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorTosh));
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTTosh02_01", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTosh), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingTosh00003", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    CameraApplyInfo(1, CameraInfoFromId(450), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitSetChannel(lv_portaitMiddle, 1);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_bridgeCommunicator), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingRaynor00005", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(451), 0.4));
    Wait(0.125, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(452), 1.5, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitMiddle, SoundLink("TTosh02BriefingSwann00010", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly");
    Wait(0.125, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(456), 0.5, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTosh));
    gf_BriefingPlayVideo("BriefingTTosh02_03", lv__Room, ge_BriefingScreen_Center, true);
    CameraApplyInfo(1, CameraInfoFromId(453), 0.0, -1, 10, true);
    PortraitDestroy(lv_portaitMiddle);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTosh), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingTosh00006", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorTosh), "SlowHeadOnly");
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(455), (SoundLengthSync(SoundLink("TTosh02BriefingRaynor00007", 0)) + SoundLengthSync(SoundLink("TTosh02BriefingRaynor00008", 0))), -1, 20, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(454), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh02BriefingRaynor00012", 0), 0.0, c_transmissionDurationAdd, true);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh02Skippable_Init () {
    gt_BriefingTTosh02Skippable = TriggerCreate("gt_BriefingTTosh02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh02 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh02PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("SwannPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTosh));
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh02_00.ogv", false);
    ConversationDataPreloadLines("TTosh02Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh02PreloadRough_Init () {
    gt_BriefingTTosh02PreloadRough = TriggerCreate("gt_BriefingTTosh02PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTTosh02PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh02_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh02_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh02_03.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh02Preload_Init () {
    gt_BriefingTTosh02Preload = TriggerCreate("gt_BriefingTTosh02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh03A
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh03A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TTosh03A", ge_RoomID_RoomBridge, gt_BriefingTTosh03ASkippable, gt_BriefingTTosh03APreload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh03A_Init () {
    gt_BriefingTTosh03A = TriggerCreate("gt_BriefingTTosh03A_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh03A Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh03ASkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;
    int lv_portaitMiddlePlanet;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;
    lv_portaitMiddlePlanet = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03AMusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone, true, true, true, false);
    lv_portaitLeft = gf_BriefingCreatePortrait("ToshPortrait", "Default", ge_BriefingScreen_Left, true);
    lv_portaitMiddlePlanet = gf_BriefingCreatePortrait((CatalogFieldValueGet(c_gameCatalogLocation, libWoLC_gf_StoryMapPlanet("TTosh03A"), "BackgroundModel", 1)), "Star2 BattleNetGlue", ge_BriefingScreen_Center, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(465));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(466));
    CameraApplyInfo(1, CameraInfoFromId(467), 0.0, -1, 10, true);
    ActorSend(ActorFromPortrait(lv_portaitMiddlePlanet), "AnimPlay Default Stand PlayForever");
    ActorSend(ActorFromPortrait(lv_portaitMiddlePlanet), "AnimSetTimeScale Default 5.000000");
    Wait(0.5, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03AMusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(1, CameraInfoFromId(766), (SoundLengthSync(SoundLink("TTosh03ABriefingTosh00001", 0)) + SoundLengthSync(SoundLink("TTosh03ABriefingRaynor00002", 0))), -1, 20, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTosh03ABriefingTosh00001", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    SoundPlay(SoundLink("Tosh03ABriefing_Uploading", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_briefingSoundPlayed = SoundLastPlayed();
    TransmissionWait(TransmissionLastSent(), 0.0);
    PortraitDestroy(lv_portaitMiddlePlanet);
    gf_BriefingPlayVideo("BriefingTTosh03a_00", lv__Room, ge_BriefingScreen_Center, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh03ABriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTosh03ABriefingTosh00003", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTTosh03a_01", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(471), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh03ABriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitSetModel(libNtve_gf_FullscreenPortrait(), "ToshPortrait", true);
    PortraitSetCamera(libNtve_gf_FullscreenPortrait(), "CameraWide");
    PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), true, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_FullscreenPortrait(), SoundLink("TTosh03ABriefingTosh00005", 0), 0.0, c_transmissionDurationAdd, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), false, false);
    gf_BriefingPlayVideo("BriefingTTosh03a_02", lv__Room, ge_BriefingScreen_Center, true);
    CameraApplyInfo(1, CameraInfoFromId(473), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh03ABriefingHorner00010", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTosh03ABriefingTosh00011", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTTosh03a_03", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh03ABriefingHorner00006", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh03ABriefingHorner00009", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTTosh03a_04", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(474), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh03ABriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), true, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_FullscreenPortrait(), SoundLink("TTosh03ABriefingTosh00008", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh03ASkippable_Init () {
    gt_BriefingTTosh03ASkippable = TriggerCreate("gt_BriefingTTosh03ASkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh03A Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh03APreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("ToshPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03a_00.ogv", false);
    ConversationDataPreloadLines("TTosh03ABriefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh03APreloadRough_Init () {
    gt_BriefingTTosh03APreloadRough = TriggerCreate("gt_BriefingTTosh03APreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh03A Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh03APreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTTosh03APreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03a_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03a_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03a_03.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh03APreload_Init () {
    gt_BriefingTTosh03APreload = TriggerCreate("gt_BriefingTTosh03APreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh03B
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh03B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TTosh03B", ge_RoomID_RoomBridge, gt_BriefingTTosh03BSkippable, gt_BriefingTTosh03APreload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh03B_Init () {
    gt_BriefingTTosh03B = TriggerCreate("gt_BriefingTTosh03B_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh03B Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh03BSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03BMusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone, true, true, true, false);
    lv_portaitLeft = gf_BriefingCreatePortrait("NovaPortrait", "Default", ge_BriefingScreen_Left, true);
    gf_BriefingPlayVideo("BriefingTTosh03b_00", lv__Room, ge_BriefingScreen_Center, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(651));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(643));
    CameraApplyInfo(1, CameraInfoFromId(652), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03BMusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(2.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh03BBriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(721), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTosh03BBriefingNova00002", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTTosh03b_01", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTosh03BBriefingNova00003", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTTosh03b_02", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTosh03BBriefingNova00004", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(724));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(725));
    gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(ge_ActorID_ActorHorner), "Listen", false, c_animTimeDefault);
    gf_BriefingPlayVideo("BriefingTTosh03b_03", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTosh03BBriefingNova00005", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(723), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTosh03BBriefingRaynor00006", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, "Fidget 02", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(ge_ActorID_ActorHorner), "Listen", true, c_animTimeDefault);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(727));
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Listen", false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Custom Talk B Start", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    CameraApplyInfo(1, CameraInfoFromId(726), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTTosh03b_04", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTosh03BBriefingNova00007", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, 53.0);
    CameraApplyInfo(1, CameraInfoFromId(731), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTTosh03b_05", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, ""), c_invalidPortraitId, SoundLink("TTosh03BBriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    CameraApplyInfo(1, CameraInfoFromId(733), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink("TTosh03BBriefingNova00009", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(2.0, c_timeGame);
    gf_BriefingPlayVideo("BriefingTTosh03b_06", lv__Room, ge_BriefingScreen_Center, true);
    Wait(2.0, c_timeGame);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTosh03BBriefingNova00012", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTosh03BBriefingNova00010", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh03BSkippable_Init () {
    gt_BriefingTTosh03BSkippable = TriggerCreate("gt_BriefingTTosh03BSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh03B Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh03BPreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("NovaPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03b_00.ogv", false);
    ConversationDataPreloadLines("TTosh03BBriefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh03BPreloadRough_Init () {
    gt_BriefingTTosh03BPreloadRough = TriggerCreate("gt_BriefingTTosh03BPreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTosh03B Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTosh03BPreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTTosh03BPreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03b_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03b_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03b_03.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03b_04.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03b_05.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttosh03b_06.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTosh03BPreload_Init () {
    gt_BriefingTTosh03BPreload = TriggerCreate("gt_BriefingTTosh03BPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TTychus01", ge_RoomID_RoomBridge, gt_BriefingTTychus01Skippable, gt_BriefingTTychus01Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus01_Init () {
    gt_BriefingTTychus01 = TriggerCreate("gt_BriefingTTychus01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus01Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;
    sound lv_staticSound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus01MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorTychus, ge_ActorID_ActorNone, true, true, false, false);
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(940));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(257));
    gf_BriefingPlayVideo("BriefingTTychus01_00", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(954), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(955), 15.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus01BriefingTychus00011", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTTychus01_01", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus01BriefingRaynor00012", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TTychus01BriefingAdjutant00014", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus01BriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(613));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus01BriefingTychus00002", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(255), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus01BriefingRaynor00003", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus01BriefingTychus00006", 0), 0.0, c_transmissionDurationAdd, false);
    Wait((SoundLengthSync(SoundLink("TTychus01BriefingTychus00006", 0)) / 2.0), c_timeGame);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "MedStanding", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus01BriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.25, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(941), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_BriefingApplyCamera(lv__Room, ge_BriefingCamera_ScreenMedium, 0.0);
    gf_BriefingApplyCamera(lv__Room, ge_BriefingCamera_ScreenClose, 5.0);
    gf_BriefingPlayVideo("BriefingTTychus01_02", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus01BriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_BriefingPlayVideo("BriefingTTychus01_03", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus01BriefingRaynor00010", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTTychus01_04", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus01BriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, true);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus01Skippable_Init () {
    gt_BriefingTTychus01Skippable = TriggerCreate("gt_BriefingTTychus01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus01 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus01PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus01_00.ogv", false);
    ConversationDataPreloadLines("TTychus01Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus01PreloadRough_Init () {
    gt_BriefingTTychus01PreloadRough = TriggerCreate("gt_BriefingTTychus01PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTTychus01PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus01_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus01_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus01_03.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus01_04.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus01Preload_Init () {
    gt_BriefingTTychus01Preload = TriggerCreate("gt_BriefingTTychus01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TTychus02", ge_RoomID_RoomBridge, gt_BriefingTTychus02Skippable, gt_BriefingTTychus02Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus02_Init () {
    gt_BriefingTTychus02 = TriggerCreate("gt_BriefingTTychus02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus02Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus02MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorTychus, ge_ActorID_ActorNone, true, true, false, false);
    lv_portaitLeft = gf_BriefingCreatePortrait("AdjutantPortrait_L", "Default", ge_BriefingScreen_Left, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(938));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(60));
    gf_BriefingPlayVideo("BriefingTTychus02_00", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(62), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(606), 22.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(614), 0.5));
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus02BriefingTychus00007", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeReal);
    gf_BriefingPlayVideo("BriefingTTychus02_01", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus02BriefingTychus00009", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.5, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "VerySlowHeadOnly");
    Wait((12.0 - 1.5), c_timeReal);
    gf_BriefingPlayVideo("BriefingTTychus02_02", lv__Room, ge_BriefingScreen_Center, true);
    TransmissionWait(TransmissionLastSent(), 1.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus02BriefingRaynor00011", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.25);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(612));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(610), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus02BriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(611), 2.5, 0, 20, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus02BriefingTychus00002", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "SlowStandingSubtle", libNtve_gf_PointWithZOffset(PointFromId(939), 1.0));
    Wait(1.0, c_timeReal);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus02Skippable_Init () {
    gt_BriefingTTychus02Skippable = TriggerCreate("gt_BriefingTTychus02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus02 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus02PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("AdjutantPortrait_L"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus02_00.ogv", false);
    ConversationDataPreloadLines("TTychus02Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus02PreloadRough_Init () {
    gt_BriefingTTychus02PreloadRough = TriggerCreate("gt_BriefingTTychus02PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTTychus02PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus02_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus02_02.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus02Preload_Init () {
    gt_BriefingTTychus02Preload = TriggerCreate("gt_BriefingTTychus02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TTychus03", ge_RoomID_RoomBridge, gt_BriefingTTychus03Skippable, gt_BriefingTTychus03Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus03_Init () {
    gt_BriefingTTychus03 = TriggerCreate("gt_BriefingTTychus03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus03Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus03MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorTychus, ge_ActorID_ActorNone, true, true, true, false);
    lv_portaitLeft = gf_BriefingCreatePortrait("NarudPortrait", "Default", ge_BriefingScreen_Left, true);
    CameraApplyInfo(1, CameraInfoFromId(770), 0.0, -1, 10, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(768));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(767));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(696), 0.6));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(696), 0.6));
    Wait(0.5, c_timeReal);
    gf_BriefingPlayVideo("BriefingTTychus03_00", lv__Room, ge_BriefingScreen_Center, false);
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTychus03BriefingNarud00001", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTychus03BriefingNarud00005", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(771));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus03BriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.75, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(769), 0.0, -1, 10, true);
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "FastStanding", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 2.0);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "FastStanding", libNtve_gf_PointWithZOffset(PointFromId(696), 0.6));
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_BriefingPlayVideo("BriefingTTychus03_01", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTychus03BriefingNarud00003", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.25, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_BriefingPlayVideo("BriefingTTychus03_02", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTychus03BriefingNarud00004", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.125);
    SoundPlay(SoundLink("SMTVStatic", 0), PlayerGroupAll(), 30.0, 0.0);
    gv_briefingSoundPlayed = SoundLastPlayed();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main)), gv_aNIMID_BRIEFINGSCREENFUZZY, "Attack 01", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center)), gv_aNIMID_BRIEFINGSCREENFUZZY, "Attack 01", c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.125, c_timeReal);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    Wait(0.125, c_timeReal);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    Wait(0.0625, c_timeReal);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    Wait(0.125, c_timeReal);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    Wait(0.25, c_timeReal);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    Wait(0.125, c_timeReal);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    Wait(0.125, c_timeReal);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    Wait(0.125, c_timeReal);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    Wait(0.0625, c_timeReal);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    Wait(0.125, c_timeReal);
    Wait(0.125, c_timeReal);
    Wait(1.16, c_timeReal);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    Wait(0.0625, c_timeReal);
    gf_BriefingPlayVideo("BriefingTTychus03_03", lv__Room, ge_BriefingScreen_Center, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main)), gv_aNIMID_BRIEFINGSCREENFUZZY, "Attack 02", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center)), gv_aNIMID_BRIEFINGSCREENFUZZY, "Attack 02", c_animFlagNonLooping, c_animTimeDefault);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    Wait(2.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink("TTychus03BriefingAdjutant00012", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFINGSCREENFUZZY, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFINGSCREENFUZZY, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main)), gv_aNIMID_BRIEFINGSCREENFUZZY, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main)), gv_aNIMID_BRIEFINGSCREENFUZZY, 100.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center)), gv_aNIMID_BRIEFINGSCREENFUZZY, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center)), gv_aNIMID_BRIEFINGSCREENFUZZY, 100.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(774));
    SoundSetVolume(gv_briefingSoundPlayed, 10.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus03BriefingRaynor00006", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus03BriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.75, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(776), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus03Skippable_Init () {
    gt_BriefingTTychus03Skippable = TriggerCreate("gt_BriefingTTychus03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus03 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus03PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("NarudPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus03_00.ogv", false);
    ConversationDataPreloadLines("TTychus03Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus03PreloadRough_Init () {
    gt_BriefingTTychus03PreloadRough = TriggerCreate("gt_BriefingTTychus03PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus03Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTTychus03PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus03_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus03_02.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus03Preload_Init () {
    gt_BriefingTTychus03Preload = TriggerCreate("gt_BriefingTTychus03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TTychus04", ge_RoomID_RoomBridge, gt_BriefingTTychus04Skippable, gt_BriefingTTychus04Preload);
    TriggerStop(gt_BriefingTTychus04RaynorBentDownAnimation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus04_Init () {
    gt_BriefingTTychus04 = TriggerCreate("gt_BriefingTTychus04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus04 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus04Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus04MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorTychus, true, true, false, false);
    CameraApplyInfo(1, CameraInfoFromId(844), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(873), (SoundLengthSync(SoundLink("TTychus04Briefing2Tychus00001", 0)) + 1.0), -1, 20, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(870));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(872));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(871));
    gf_BriefingPlayVideo("BriefingTTychus04_00", lv__Room, ge_BriefingScreen_Center, false);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, "Fidget 02", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Tychus00001", 0), 0.0, c_transmissionDurationAdd, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Horner00002", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    SoundPlay(SoundLink("Tychus04BriefingAlarm", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_briefingSoundPlayed = SoundLastPlayed();
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_BriefingPlayVideo("BriefingVideoPortraitTychus04", ge_RoomID_RoomBridge, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Horner00016", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(2.0, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Horner00005", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(2.5, c_timeReal);
    UISetWorldVisible(PlayerGroupAll(), true);
    CameraApplyInfo(1, CameraInfoFromId(878), 0.0, -1, 10, true);
    TransmissionClear(gv_briefingMovieTransmission);
    gv_briefingMovieTransmission = c_invalidTransmissionId;
    TransmissionWait(TransmissionLastSent(), 1.5);
    CameraApplyInfo(1, CameraInfoFromId(877), 0.0, -1, 10, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedStandingSubtle", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Raynor00011", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(878), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Horner00012", 0), 0.0, c_transmissionDurationAdd, false);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.5);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTTychus04_01", lv__Room, ge_BriefingScreen_Center, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Horner00007", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Raynor00003", 0), 0.0, c_transmissionDurationAdd, true);
    TransmissionClear(gv_briefingMovieTransmission);
    gv_briefingMovieTransmission = c_invalidTransmissionId;
    UISetWorldVisible(PlayerGroupAll(), true);
    CameraApplyInfo(1, CameraInfoFromId(880), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Horner00009", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "MedStanding");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(881));
    TriggerExecute(gt_BriefingTTychus04RaynorBentDownAnimation, true, false);
    CameraApplyInfo(1, CameraInfoFromId(882), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(957), 2.0, -1, 10, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Raynor00010", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTTychus04_03", lv__Room, ge_BriefingScreen_Center, false);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Tychus00006", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTTychus04_04", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(653), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Raynor00008", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Tychus00013", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(946), 0.0, -1, 10, true);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(948), 0.7));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(945), 0.7));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Raynor00014", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "MedStanding", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), "Listen");
    CameraApplyInfo(1, CameraInfoFromId(947), 1.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "MedStanding", libNtve_gf_PointWithZOffset(PointFromId(945), 0.7));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus04Briefing2Tychus00004", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(945), 0.7));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Talk B End", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Stand", 0, 1.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus04Skippable_Init () {
    gt_BriefingTTychus04Skippable = TriggerCreate("gt_BriefingTTychus04Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus04 Raynor Bent Down Animation
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus04RaynorBentDownAnimation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Custom Talk B Start", c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, 28.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, 1.0);
    Wait(7.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Talk B Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, 1.0);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(945), 0.7));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus04RaynorBentDownAnimation_Init () {
    gt_BriefingTTychus04RaynorBentDownAnimation = TriggerCreate("gt_BriefingTTychus04RaynorBentDownAnimation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus04 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus04PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus04_00.ogv", false);
    ConversationDataPreloadLines("TTychus04Briefing2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus04PreloadRough_Init () {
    gt_BriefingTTychus04PreloadRough = TriggerCreate("gt_BriefingTTychus04PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus04 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus04Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTTychus04PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus04_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus04_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus04_03.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus04Preload_Init () {
    gt_BriefingTTychus04Preload = TriggerCreate("gt_BriefingTTychus04Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus05
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TTychus05", ge_RoomID_RoomBridge, gt_BriefingTTychus05Skippable, gt_BriefingTTychus05Preload);
    gf_CloseDoor(ge_RoomID_RoomBridge, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus05_Init () {
    gt_BriefingTTychus05 = TriggerCreate("gt_BriefingTTychus05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus05 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus05Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;
    int lv_tempTransmission;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;
    lv_tempTransmission = c_invalidTransmissionId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomBridge;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus05MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_ScreenFar, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorTychus, true, true, false, false);
    lv_portaitMiddle = gf_BriefingCreatePortrait("ValerianPortrait", "Default", ge_BriefingScreen_Center, true);
    lv_portaitLeft = gf_BriefingCreatePortrait("ValerianPortrait", "Default", ge_BriefingScreen_Left, true);
    CameraApplyInfo(1, CameraInfoFromId(738), 0.0, -1, 10, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(735));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(737));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(853));
    Wait(0.5, c_timeReal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ValerianPortrait"), lv_portaitMiddle, SoundLink("TTychus05BriefingValerian00001", 0), 0.0, c_transmissionDurationAdd, false);
    lv_tempTransmission = TransmissionLastSent();
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(736));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, "Custom Walk End", c_animFlagPlayForever, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, 10.0);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_BriefingTTychus05GreenReticleSound, true, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromMovie("Assets\\Textures\\video_briefingportrait_ttychus05.ogv", false), libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, false);
    gv_briefingMovieTransmission = TransmissionLastSent();
    UISetWorldVisible(PlayerGroupAll(), false);
    TransmissionWait(lv_tempTransmission, 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(739));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(854));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorHorner));
    CameraApplyInfo(1, CameraInfoFromId(855), 0.0, -1, 10, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    TransmissionClear(gv_briefingMovieTransmission);
    gv_briefingMovieTransmission = c_invalidTransmissionId;
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus05BriefingRaynor00003", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitDestroy(lv_portaitMiddle);
    lv_portaitMiddle = c_invalidPortraitId;
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left)), c_animNameDefault, 100.0);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    CameraApplyInfo(1, CameraInfoFromId(743), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(741), SoundLengthSync(SoundLink("TTychus05BriefingValerian00004", 0)), -1, 20, true);
    gf_BriefingPlayVideo("BriefingTTychus05_00", lv__Room, ge_BriefingScreen_Center, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTychus05BriefingValerian00004", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTTychus05_01", lv__Room, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTychus05BriefingValerian00013", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(746));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(742));
    CameraApplyInfo(1, CameraInfoFromId(744), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus05BriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    gf_BriefingPlayVideo("BriefingTTychus05_02", lv__Room, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(745), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TTychus05BriefingValerian00006", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Center));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "MedStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(747), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus05BriefingTychus00007", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(748), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus05BriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(750));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(854));
    CameraApplyInfo(1, CameraInfoFromId(749), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(751), SoundLengthSync(SoundLink("TTychus05BriefingTychus00009", 0)), -1, 20, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus05BriefingTychus00009", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(858));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(861));
    CameraApplyInfo(1, CameraInfoFromId(857), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus05BriefingRaynor00012", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 3.25);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Talk 00", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.25, c_timeReal);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorTychus), "FastHeadOnly");
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStandingSubtle", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TTychus05BriefingTychus00010", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.25, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), c_animNameDefault, "Custom Walk Angry", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.75, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(860), 6.0, -1, 10, true);
    Wait(4.0, c_timeReal);
    gf_OpenDoor(ge_RoomID_RoomBridge, false);
    Wait(MinF((6.33 - (1.0 + 0.2 + 0.25 + 0.75 + 4.0)), (SoundLengthSync(SoundLink("TTychus05BriefingTychus00010", 0)) - (0.25 + 0.75 + 4.0))), c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "SlowStanding");
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStandingSubtle", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
    Wait(0.2, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnlySubtle");
    Wait(0.25, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "FastStandingSubtle");
    CameraApplyInfo(1, CameraInfoFromId(862), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, ""), c_invalidPortraitId, SoundLink("TTychus05BriefingRaynor00011", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 3.0);
    gf_CloseDoor(ge_RoomID_RoomBridge, false);
    Wait(1.0, c_timeGame);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "VerySlowHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(256), 0.4));
    TransmissionWait(TransmissionLastSent(), 0.5);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus05Skippable_Init () {
    gt_BriefingTTychus05Skippable = TriggerCreate("gt_BriefingTTychus05Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus05 Green Reticle Sound
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus05GreenReticleSound_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_timingOld;
    fixed lv_timingCur;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timingCur = 0.0;
    lv_timingOld = lv_timingCur;
    lv_timingCur = (2.0 / 30.0);
    Wait((lv_timingCur - lv_timingOld), c_timeReal);
    SoundPlay(SoundLink("Tychus05Briefing_GreenReticle1", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_timingOld = lv_timingCur;
    lv_timingCur = (14.0 / 30.0);
    Wait((lv_timingCur - lv_timingOld), c_timeReal);
    SoundPlay(SoundLink("Tychus05Briefing_GreenReticle2", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_timingOld = lv_timingCur;
    lv_timingCur = (27.0 / 30.0);
    Wait((lv_timingCur - lv_timingOld), c_timeReal);
    SoundPlay(SoundLink("Tychus05Briefing_GreenReticle1", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_timingOld = lv_timingCur;
    lv_timingCur = (40.0 / 30.0);
    Wait((lv_timingCur - lv_timingOld), c_timeReal);
    SoundPlay(SoundLink("Tychus05Briefing_GreenReticle2", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_timingOld = lv_timingCur;
    lv_timingCur = (63.0 / 30.0);
    Wait((lv_timingCur - lv_timingOld), c_timeReal);
    SoundPlay(SoundLink("Tychus05Briefing_GreenReticle1", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_timingOld = lv_timingCur;
    lv_timingCur = (98.0 / 30.0);
    Wait((lv_timingCur - lv_timingOld), c_timeReal);
    SoundPlay(SoundLink("Tychus05Briefing_GreenReticle1", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_timingOld = lv_timingCur;
    lv_timingCur = (110.0 / 30.0);
    Wait((lv_timingCur - lv_timingOld), c_timeReal);
    SoundPlay(SoundLink("Tychus05Briefing_GreenReticle2", 0), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus05GreenReticleSound_Init () {
    gt_BriefingTTychus05GreenReticleSound = TriggerCreate("gt_BriefingTTychus05GreenReticleSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus05 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus05PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomBridge, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomBridge);
    PreloadObject(c_gameCatalogModel, ("ValerianPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus05_00.ogv", false);
    ConversationDataPreloadLines("TTychus05Briefing");
    libNtve_gf_PreloadSoundObject("Tychus05Briefing_GreenReticle1", false);
    libNtve_gf_PreloadSoundObject("Tychus05Briefing_GreenReticle2", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus05PreloadRough_Init () {
    gt_BriefingTTychus05PreloadRough = TriggerCreate("gt_BriefingTTychus05PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TTychus05 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTTychus05Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTTychus05PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus05_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus05_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_ttychus05_03.ogv", false);
    PreloadSound("LocalizedData\\Sounds\\TerranVO\\CampaignVO\\TTychus05BriefingValerian00004.wav", false);
    SoundLengthQuery(SoundLink("TTychus05BriefingValerian00004", 0));
    PreloadSound("LocalizedData\\Sounds\\TerranVO\\CampaignVO\\TTychus05BriefingTychus00009.wav", false);
    SoundLengthQuery(SoundLink("TTychus05BriefingTychus00009", 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTTychus05Preload_Init () {
    gt_BriefingTTychus05Preload = TriggerCreate("gt_BriefingTTychus05Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TZeratul01", ge_RoomID_RoomLab, gt_BriefingTZeratul01Skippable, gt_BriefingTZeratul01Preload);
    gf_BriefingTZeratulClear();
    if ((gv_debug_BriefingCheating == false) && (libWoLC_gf_MissionStatusCheck("TZeratul01", libWoLC_ge_MissionStatus_Completed) == false)) {
        TriggerExecute(gt_Rendered01OldRivals, true, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul01_Init () {
    gt_BriefingTZeratul01 = TriggerCreate("gt_BriefingTZeratul01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul01Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomLab;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul01MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_twoshots04, ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_ActorID_ActorNone, false, false, false, false);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomLab, ge_BriefingScreen_Main));
    CameraApplyInfo(1, CameraInfoFromId(479), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(480), (SoundLengthSync(SoundLink("TZeratul01BriefingRaynor00001", 0)) + 5.5), -1, 25, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(605), 0.5));
    Wait(0.5, c_timeReal);
    SoundPlayAtPoint(SoundLink("Emitter_IhanCrystal_Loop", 0), PlayerGroupAll(), PointFromId(605), 0.5, 100.0, 0.0);
    gv_briefingSoundPlayed = SoundLastPlayed();
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(1.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TZeratul01BriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_labCrystal), gv_aNIMID_HIGHLIGHT, "Highlight Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_labCrystal), gv_aNIMID_HIGHLIGHT, 0.7);
    libNtve_gf_CreateModelAtPoint("ZeratulCrystalCharge", PointFromId(605));
    gv_briefingTZeratulCrystalEffect = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowStanding", libNtve_gf_PointWithZOffset(PointFromId(605), 0.6));
    Wait(0.5, c_timeReal);
    SoundPlay(SoundLink("FlashBack", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CustomFadeInOut(false, 1.5, true);
    libNtve_gf_KillModel(gv_briefingTZeratulCrystalEffect);
    gv_briefingTZeratulCrystalEffect = null;
    SoundStop(gv_briefingSoundPlayed, true);
    gv_briefingSoundPlayed = null;
    gf_RemoveVisibleUnits(false, gv_labRoomUnits);
    gf_BriefingTZeratulCreateScreen("TZeratul01");
    UISetWorldVisible(PlayerGroupAll(), false);
    ActorSend(ActorFromPortrait(gv_briefing_TZeratulPortraitZeratul), "AnimPlay Briefing Birth 0 0.000000");
    gf_CustomFadeInOut(true, 2.5, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul01BriefingZeratul00002", 0), 0.0, c_transmissionDurationAdd, false);
    Wait((SoundLengthSync(SoundLink("TZeratul01BriefingZeratul00002", 0)) / 2.0), c_timeGame);
    gf_BriefingTZeratulVideoFadeIn();
    gf_BriefingTZeratulPlayVideo("BriefingTZeratul01_03", false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul01BriefingZeratul00007", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingTZeratulPlayVideo("BriefingTZeratul01_04", false);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul01BriefingZeratul00003", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingTZeratulPlayVideo("BriefingTZeratul01_00", true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul01BriefingZeratul00004", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul01BriefingZeratul00009", -1), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul01Skippable_Init () {
    gt_BriefingTZeratul01Skippable = TriggerCreate("gt_BriefingTZeratul01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul01 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul01PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomLab, true);
    libNtve_gf_PreloadModelObject("SMZeratulBriefingBorder", false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    PreloadMovie("Assets\\Textures\\video_briefingportrait_zeratul_1a.ogv", false);
    ConversationDataPreloadLines("TZeratul01Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul01PreloadRough_Init () {
    gt_BriefingTZeratul01PreloadRough = TriggerCreate("gt_BriefingTZeratul01PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTZeratul01PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\video_briefingportrait_zeratul_1b.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_tzeratul01_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul01Preload_Init () {
    gt_BriefingTZeratul01Preload = TriggerCreate("gt_BriefingTZeratul01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TZeratul02", ge_RoomID_RoomLab, gt_BriefingTZeratul02Skippable, gt_BriefingTZeratul02Preload);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, 1.0);
    gf_BriefingTZeratulClear();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul02_Init () {
    gt_BriefingTZeratul02 = TriggerCreate("gt_BriefingTZeratul02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul02Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_modelPortrait;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_modelPortrait = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomLab;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul02MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_twoshots04, ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_ActorID_ActorNone, false, false, false, false);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomLab, ge_BriefingScreen_Main));
    CameraApplyInfo(1, CameraInfoFromId(487), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(489), (SoundLengthSync(SoundLink("TZeratul02BriefingRaynor00001", 0)) + 5.5), -1, 25, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(605), 0.5));
    Wait(0.5, c_timeReal);
    SoundPlayAtPoint(SoundLink("Emitter_IhanCrystal_Loop", 0), PlayerGroupAll(), PointFromId(605), 0.5, 100.0, 0.0);
    gv_briefingSoundPlayed = SoundLastPlayed();
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TZeratul02BriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, false);
    Wait((SoundLengthSync(SoundLink("TZeratul02BriefingRaynor00001", 0)) * 0.4), c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, "Fidget 08", c_animFlagFullMatch | c_animFlagNonLooping, 1.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_BRIEFING, 0.5);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_labCrystal), gv_aNIMID_HIGHLIGHT, "Highlight Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_labCrystal), gv_aNIMID_HIGHLIGHT, 0.7);
    libNtve_gf_CreateModelAtPoint("ZeratulCrystalCharge", PointFromId(605));
    gv_briefingTZeratulCrystalEffect = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowStanding", libNtve_gf_PointWithZOffset(PointFromId(605), 0.6));
    Wait(0.5, c_timeReal);
    SoundPlay(SoundLink("FlashBack", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CustomFadeInOut(false, 1.5, true);
    libNtve_gf_KillModel(gv_briefingTZeratulCrystalEffect);
    gv_briefingTZeratulCrystalEffect = null;
    SoundStop(gv_briefingSoundPlayed, true);
    gv_briefingSoundPlayed = null;
    gf_RemoveVisibleUnits(false, gv_labRoomUnits);
    gf_BriefingTZeratulCreateScreen("TZeratul02");
    UISetWorldVisible(PlayerGroupAll(), false);
    gf_BriefingTZeratulVideoFadeIn();
    gf_BriefingTZeratulPlayVideo("BriefingTZeratul02_01", false);
    gf_CustomFadeInOut(true, 2.5, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul02BriefingZeratul00002", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingTZeratulPlayVideo("BriefingTZeratul02_00", true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul02BriefingZeratul00004", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul02BriefingZeratul00003", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.5, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul02Skippable_Init () {
    gt_BriefingTZeratul02Skippable = TriggerCreate("gt_BriefingTZeratul02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul02 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul02PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomLab, true);
    libNtve_gf_PreloadModelObject("SMZeratulBriefingBorder", false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    PreloadMovie("Assets\\Textures\\video_briefingportrait_zeratul_2.ogv", false);
    ConversationDataPreloadLines("TZeratul02Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul02PreloadRough_Init () {
    gt_BriefingTZeratul02PreloadRough = TriggerCreate("gt_BriefingTZeratul02PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTZeratul02PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_tzeratul02_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul02Preload_Init () {
    gt_BriefingTZeratul02Preload = TriggerCreate("gt_BriefingTZeratul02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TZeratul03", ge_RoomID_RoomLab, gt_BriefingTZeratul03Skippable, gt_BriefingTZeratul03Preload);
    gf_BriefingTZeratulClear();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul03_Init () {
    gt_BriefingTZeratul03 = TriggerCreate("gt_BriefingTZeratul03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul03Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomLab;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul03MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_twoshots04, ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_ActorID_ActorNone, false, false, false, false);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomLab, ge_BriefingScreen_Center));
    CameraApplyInfo(1, CameraInfoFromId(357), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(358), 20.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(605), 0.5));
    Wait(0.5, c_timeReal);
    SoundPlayAtPoint(SoundLink("Emitter_IhanCrystal_Loop", 0), PlayerGroupAll(), PointFromId(605), 0.5, 100.0, 0.0);
    gv_briefingSoundPlayed = SoundLastPlayed();
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TZeratul03BriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_labCrystal), gv_aNIMID_HIGHLIGHT, "Highlight Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_labCrystal), gv_aNIMID_HIGHLIGHT, 0.7);
    libNtve_gf_CreateModelAtPoint("ZeratulCrystalCharge", PointFromId(605));
    gv_briefingTZeratulCrystalEffect = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowStanding", libNtve_gf_PointWithZOffset(PointFromId(605), 0.6));
    Wait(0.5, c_timeReal);
    SoundPlay(SoundLink("FlashBack", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CustomFadeInOut(false, 1.5, true);
    libNtve_gf_KillModel(gv_briefingTZeratulCrystalEffect);
    gv_briefingTZeratulCrystalEffect = null;
    SoundStop(gv_briefingSoundPlayed, true);
    gv_briefingSoundPlayed = null;
    gf_RemoveVisibleUnits(false, gv_labRoomUnits);
    gf_BriefingTZeratulCreateScreen("TZeratul03");
    UISetWorldVisible(PlayerGroupAll(), false);
    gf_BriefingTZeratulVideoFadeIn();
    gf_BriefingTZeratulPlayVideo("BriefingTZeratul03_00", false);
    gf_CustomFadeInOut(true, 2.5, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul03BriefingZeratul00002", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingTZeratulPlayVideo("BriefingTZeratul03_01", false);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul03BriefingZeratul00004", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul03BriefingZeratul00007", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul03BriefingZeratul00008", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul03BriefingZeratul00006", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul03Skippable_Init () {
    gt_BriefingTZeratul03Skippable = TriggerCreate("gt_BriefingTZeratul03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul03 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul03PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomLab, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomLab);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    PreloadMovie("Assets\\Textures\\briefing_video_tzeratul03_00.ogv", false);
    ConversationDataPreloadLines("TZeratul03Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul03PreloadRough_Init () {
    gt_BriefingTZeratul03PreloadRough = TriggerCreate("gt_BriefingTZeratul03PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul03Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTZeratul03PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_tzeratul03_01.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul03Preload_Init () {
    gt_BriefingTZeratul03Preload = TriggerCreate("gt_BriefingTZeratul03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul04
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TZeratul04", ge_RoomID_RoomLab, gt_BriefingTZeratul04Skippable, gt_BriefingTZeratul04Preload);
    gf_BriefingTZeratulClear();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul04_Init () {
    gt_BriefingTZeratul04 = TriggerCreate("gt_BriefingTZeratul04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul04 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul04Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomLab;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul04MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_twoshots04, ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_ActorID_ActorNone, false, false, false, false);
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomLab, ge_BriefingScreen_Main));
    CameraApplyInfo(1, CameraInfoFromId(484), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(486), (SoundLengthSync(SoundLink("TZeratul04BriefingRaynor00001", 0)) + 5.5), -1, 25, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(605), 0.5));
    Wait(0.5, c_timeReal);
    SoundPlayAtPoint(SoundLink("Emitter_IhanCrystal_Loop", 0), PlayerGroupAll(), PointFromId(605), 0.5, 100.0, 0.0);
    gv_briefingSoundPlayed = SoundLastPlayed();
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("TZeratul04BriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 4.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_labCrystal), gv_aNIMID_HIGHLIGHT, "Highlight Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_labCrystal), gv_aNIMID_HIGHLIGHT, 0.7);
    libNtve_gf_CreateModelAtPoint("ZeratulCrystalCharge", PointFromId(605));
    gv_briefingTZeratulCrystalEffect = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowStanding", libNtve_gf_PointWithZOffset(PointFromId(605), 0.6));
    Wait(1.5, c_timeReal);
    SoundPlay(SoundLink("FlashBack", 0), PlayerGroupAll(), 100.0, 0.0);
    gf_CustomFadeInOut(false, 1.5, true);
    libNtve_gf_KillModel(gv_briefingTZeratulCrystalEffect);
    gv_briefingTZeratulCrystalEffect = null;
    SoundStop(gv_briefingSoundPlayed, true);
    gv_briefingSoundPlayed = null;
    gf_RemoveVisibleUnits(false, gv_labRoomUnits);
    gf_BriefingTZeratulCreateScreen("TZeratul04");
    UISetWorldVisible(PlayerGroupAll(), false);
    gf_CustomFadeInOut(true, 2.5, true);
    Wait(1.5, c_timeReal);
    gf_BriefingTZeratulVideoFadeIn();
    gf_BriefingTZeratulPlayVideo("BriefingTZeratul04_00", false);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul04BriefingOvermind00009", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingTZeratulPlayVideo("BriefingTZeratul04_01", true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul04BriefingOvermind00010", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("TZeratul04BriefingOvermind00008", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(2.0, c_timeReal);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul04Skippable_Init () {
    gt_BriefingTZeratul04Skippable = TriggerCreate("gt_BriefingTZeratul04Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul04 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul04PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomLab, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomLab);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    PreloadMovie("Assets\\Textures\\briefing_video_tzeratul04_00.ogv", false);
    ConversationDataPreloadLines("TZeratul04Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul04PreloadRough_Init () {
    gt_BriefingTZeratul04PreloadRough = TriggerCreate("gt_BriefingTZeratul04PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TZeratul04 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTZeratul04Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTZeratul04PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_tzeratul04_01.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTZeratul04Preload_Init () {
    gt_BriefingTZeratul04Preload = TriggerCreate("gt_BriefingTZeratul04Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TValerian01", ge_RoomID_RoomChar, gt_BriefingTValerian01Skippable, gt_BriefingTValerian01Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian01_Init () {
    gt_BriefingTValerian01 = TriggerCreate("gt_BriefingTValerian01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian01Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;
    int lv_marineTransmission;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;
    lv_marineTransmission = c_invalidTransmissionId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomChar;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian01MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_twoshots04, ge_ActorID_ActorRaynorMarine, ge_ActorID_ActorTychus, ge_ActorID_ActorNone, true, true, false, false);
    lv_portaitLeft = gf_BriefingCreatePortrait("HornerPortrait", "Default", ge_BriefingScreen_Left, true);
    lv_portaitMiddle = gf_BriefingCreatePortrait("KerriganPortrait", "Default", ge_BriefingScreen_Center, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(617));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(618));
    CameraApplyInfo(1, CameraInfoFromId(1035), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingVideoPortraitValerian01", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(1, CameraInfoFromId(1036), (1.5 + SoundLengthSync(SoundLink("TValerian01BriefingMarine00013", 0)) + SoundLengthSync(SoundLink("TValerian01BriefingMarine00012", 0)) + SoundLengthSync(SoundLink("TValerian01BriefingMarine00014", 0)) + SoundLengthSync(SoundLink("TValerian01BriefingMarine00015", 0)) + SoundLengthSync(SoundLink("TValerian01BriefingMarine00016", 0))), -1, 20, true);
    Wait(1.5, c_timeReal);
    Wait(1.5, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", SoundLink("TValerian01BriefingMarine00013", 0), null, null, 0.0, c_transmissionDurationAdd, false);
    lv_marineTransmission = TransmissionLastSent();
    Wait(3.0, c_timeReal);
    gf_BriefingPlayVideo("BriefingTValerian01_00", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "Talk", SoundLink("TValerian01BriefingMarine00012", 0), null, null, 0.0, c_transmissionDurationAdd, true);
    TransmissionWait(lv_marineTransmission, 1.0);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "Talk", SoundLink("TValerian01BriefingMarine00014", 0), null, null, 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "Talk", SoundLink("TValerian01BriefingMarine00015", 0), null, null, 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "Talk", SoundLink("TValerian01BriefingMarine00016", 0), null, null, 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    CameraApplyInfo(1, CameraInfoFromId(1038), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(1039), (SoundLengthSync(SoundLink("TValerian01BriefingMarine00017", 0))), -1, 20, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "Talk", SoundLink("TValerian01BriefingMarine00017", 0), null, null, 0.0, c_transmissionDurationAdd, false);
    gf_BriefingPlayVideo("BriefingVideoPortraitValerian01", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    Wait(0.5, c_timeReal);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_ActorUnit(ge_ActorID_ActorRaynor), c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(1040), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian01BriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(1042));
    CameraApplyInfo(1, CameraInfoFromId(1041), 0.0, -1, 10, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "MedStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian01BriefingTychus00002", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Main));
    PortraitSetChannel(lv_portaitMiddle, 1);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("KerriganPortrait"), lv_portaitMiddle, SoundLink("TValerian01BriefingKerrigan00004", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "MedStanding", libNtve_gf_PointWithZOffset(PointFromId(722), 0.6));
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(781), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(780), (SoundLengthSync(SoundLink("TValerian01BriefingKerrigan00004", 0)) - 1.0), -1, 20, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantHeadOnly");
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(683));
    CameraApplyInfo(1, CameraInfoFromId(720), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("KerriganPortrait"), lv_portaitMiddle, SoundLink("TValerian01BriefingKerrigan00010", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(701), (SoundLengthSync(SoundLink("TValerian01BriefingKerrigan00010", 0)) - 1.5), -1, 20, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("KerriganPortrait"), lv_portaitMiddle, SoundLink("TValerian01BriefingKerrigan00005", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(565));
    CameraApplyInfo(1, CameraInfoFromId(784), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(732), (SoundLengthSync(SoundLink("TValerian01BriefingTychus00006", 0)) + 0.0), -1, 20, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian01BriefingTychus00006", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitDestroy(lv_portaitMiddle);
    gf_BriefingPlayVideo("BriefingTValerian01_01", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(789), 0.0, -1, 10, true);
    UnitIssueOrder(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(788)), c_orderQueueReplace);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian01BriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.5);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, ge_BriefingScreen_Left)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(785), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TValerian01BriefingHorner00008", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(617));
    CameraApplyInfo(1, CameraInfoFromId(786), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian01BriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    UnitIssueOrder(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(787)), c_orderQueueReplace);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gf_ActorUnit(ge_ActorID_ActorTychus), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(791)), c_orderQueueReplace);
    Wait(0.5, c_timeReal);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian01Skippable_Init () {
    gt_BriefingTValerian01Skippable = TriggerCreate("gt_BriefingTValerian01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian01 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian01PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomChar, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomChar);
    PreloadObject(c_gameCatalogModel, ("KerriganPortrait"), false);
    PreloadObject(c_gameCatalogModel, ("HornerPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    PreloadMovie("Assets\\Textures\\video_briefingportrait_tvalerian01.ogv", false);
    ConversationDataPreloadLines("TValerian01Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian01PreloadRough_Init () {
    gt_BriefingTValerian01PreloadRough = TriggerCreate("gt_BriefingTValerian01PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTValerian01PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian01_00.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian01_01.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian01Preload_Init () {
    gt_BriefingTValerian01Preload = TriggerCreate("gt_BriefingTValerian01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian02A
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian02A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TValerian02A", ge_RoomID_RoomChar, gt_BriefingTValerian02ASkippable, gt_BriefingTValerian02APreload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian02A_Init () {
    gt_BriefingTValerian02A = TriggerCreate("gt_BriefingTValerian02A_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian02A Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian02ASkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomChar;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_twoshots04, ge_ActorID_ActorRaynorMarine, ge_ActorID_ActorTychus, ge_ActorID_ActorWarfield, true, true, true, false);
    lv_portaitLeft = gf_BriefingCreatePortrait("AdjutantPortrait_L", "Default", ge_BriefingScreen_Left, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(792));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(793));
    gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(794));
    gf_BriefingAddActor(ge_RoomID_RoomBridge, ge_ActorID_ActorStetmann);
    gf_ResetActorToLocation(ge_ActorID_ActorStetmann, PointFromId(845));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorStetmann)), c_animNameDefault, "Talk", c_animFlagPlayForever, c_animTimeDefault);
    gf_BriefingAddActor(ge_RoomID_RoomBridge, ge_ActorID_ActorSwann);
    gf_ResetActorToLocation(ge_ActorID_ActorSwann, PointFromId(846));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorSwann)), c_animNameDefault, "Talk", c_animFlagPlayForever, c_animTimeDefault);
    gf_BriefingPlayVideo("BriefingTValerian02a_00", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TValerian02ABriefingAdjutant00001", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02ABriefingRaynor00002", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(795), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TValerian02ABriefingAdjutant00003", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(3.0, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(807));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02ABriefingTychus00004", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(798), 0.0, -1, 10, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "VerySlowStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_BriefingPlayVideo("BriefingTValerian02a_01", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02ABriefingRaynor00005", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantHeadOnlySubtle");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02ABriefingRaynor00011", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTValerian02a_02", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(800));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorWarfield), "InstantStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(801), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02ABriefingWarfield00006", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorTychus));
    CameraApplyInfo(1, CameraInfoFromId(847), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02ABriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 4.75);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "SlowStanding", libNtve_gf_PointWithZOffset(PointFromId(964), 0.4));
    Wait(0.25, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(848), 2.5, -1, 20, true);
    Wait(2.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorStetmann)), c_animNameDefault, "Fidget 06", c_animFlagFullMatch | c_animFlagNonLooping, 0.75);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(986), 0.75, -1, 10, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorSwann)), c_animNameDefault, "Fidget 09", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.5, c_timeReal);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "InstantStanding");
    gf_BriefingPlayVideo("BriefingTValerian02a_03", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02ABriefingWarfield00009", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02ABriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine)), c_animNameDefault, "Fidget 01", c_animFlagFullMatch, c_animTimeDefault);
    CameraApplyInfo(1, CameraInfoFromId(808), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian02ASkippable_Init () {
    gt_BriefingTValerian02ASkippable = TriggerCreate("gt_BriefingTValerian02ASkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian02A Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian02APreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomChar, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomChar);
    PreloadObject(c_gameCatalogModel, ("AdjutantPortrait_L"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorWarfield));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorSwann));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorStetmann));
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian2a_00.ogv", false);
    ConversationDataPreloadLines("TValerian02ABriefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian02APreloadRough_Init () {
    gt_BriefingTValerian02APreloadRough = TriggerCreate("gt_BriefingTValerian02APreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian02A Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian02APreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTValerian02APreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian2a_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian2a_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian2a_03.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian02APreload_Init () {
    gt_BriefingTValerian02APreload = TriggerCreate("gt_BriefingTValerian02APreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian02B
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian02B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TValerian02B", ge_RoomID_RoomChar, gt_BriefingTValerian02BSkippable, gt_BriefingTValerian02BPreload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian02B_Init () {
    gt_BriefingTValerian02B = TriggerCreate("gt_BriefingTValerian02B_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian02B Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian02BSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomChar;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_twoshots04, ge_ActorID_ActorRaynorMarine, ge_ActorID_ActorTychus, ge_ActorID_ActorWarfield, true, true, false, false);
    lv_portaitLeft = gf_BriefingCreatePortrait("AdjutantPortrait_L", "Default", ge_BriefingScreen_Left, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(811));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(812));
    gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(828));
    gf_BriefingPlayVideo("BriefingTValerian02b_00", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02BMusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02BBriefingWarfield00001", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(814), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02BBriefingWarfield00008", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(813));
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTValerian02b_01", ge_RoomID_RoomChar, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02BBriefingWarfield00002", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(820), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02BBriefingRaynor00003", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTValerian02b_02", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Left)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Left));
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TValerian02BBriefingAdjutant00004", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTValerian02b_03", ge_RoomID_RoomChar, ge_BriefingScreen_Center, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitLeft, SoundLink("TValerian02BBriefingAdjutant00011", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    CameraApplyInfo(1, CameraInfoFromId(822), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_BriefingPlayVideo("BriefingTValerian02b_04", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02BBriefingRaynor00005", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "MedStanding", libNtve_gf_PointWithZOffset(PointFromId(988), 0.6));
    Wait(3.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02BBriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(823), 0.0, -1, 10, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorWarfield), "MedStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02BBriefingWarfield00006", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(829));
    CameraApplyInfo(1, CameraInfoFromId(822), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02BBriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "MedStanding");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian02BBriefingRaynor00010", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian02BSkippable_Init () {
    gt_BriefingTValerian02BSkippable = TriggerCreate("gt_BriefingTValerian02BSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian02B Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian02BPreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomChar, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomChar);
    PreloadObject(c_gameCatalogModel, ("AdjutantPortrait_L"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorWarfield));
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian02b_00.ogv", false);
    ConversationDataPreloadLines("TValerian02BBriefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian02BPreloadRough_Init () {
    gt_BriefingTValerian02BPreloadRough = TriggerCreate("gt_BriefingTValerian02BPreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian02B Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian02BPreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTValerian02BPreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian02b_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian02b_02.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian02BPreload_Init () {
    gt_BriefingTValerian02BPreload = TriggerCreate("gt_BriefingTValerian02BPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TValerian03", ge_RoomID_RoomChar, gt_BriefingTValerian03Skippable, gt_BriefingTValerian03Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian03_Init () {
    gt_BriefingTValerian03 = TriggerCreate("gt_BriefingTValerian03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian03Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomChar;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, ge_BriefingCamera_twoshots04, ge_ActorID_ActorRaynorMarine, ge_ActorID_ActorTychus, ge_ActorID_ActorWarfieldAOD, true, true, false, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(815));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(816));
    gf_ResetActorToLocation(ge_ActorID_ActorWarfieldAOD, PointFromId(817));
    gf_BriefingPlayVideo("BriefingTValerian03_00", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(192), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfieldAOD), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingWarfield00001", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfieldAOD), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingWarfield00002", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeGame);
    gf_BriefingPlayVideo("BriefingTValerian03_01", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfieldAOD), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingWarfield00005", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfieldAOD), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingWarfield00006", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(1005), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(1006), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfieldAOD), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingWarfield00012", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 2.0);
    gf_BriefingPlayVideo("BriefingTValerian03_02", ge_RoomID_RoomChar, ge_BriefingScreen_Center, false);
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    Wait(3.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingRaynor00014", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfieldAOD), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingWarfield00013", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfieldAOD), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingWarfield00009", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTValerian03_03", ge_RoomID_RoomChar, ge_BriefingScreen_Center, true);
    CameraApplyInfo(1, CameraInfoFromId(961), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingRaynor00010", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(214), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(518), (SoundLengthSync(SoundLink("TValerian03BriefingTychus00011", 0)) + 2.0), -1, 20, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("TValerian03BriefingTychus00011", 0), 0.0, c_transmissionDurationAdd, true);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian03Skippable_Init () {
    gt_BriefingTValerian03Skippable = TriggerCreate("gt_BriefingTValerian03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian03 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian03PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomChar, true);
    gf_BriefingPreloadScreens(ge_RoomID_RoomChar);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorWarfieldAOD));
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian03_00.ogv", false);
    ConversationDataPreloadLines("TValerian03Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian03PreloadRough_Init () {
    gt_BriefingTValerian03PreloadRough = TriggerCreate("gt_BriefingTValerian03PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TValerian03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTValerian03Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTValerian03PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian03_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian03_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_tvalerian03_03.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTValerian03Preload_Init () {
    gt_BriefingTValerian03Preload = TriggerCreate("gt_BriefingTValerian03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - Button Click
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceButtonClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto97FF3237_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto97FF3237_val = EventDialogControl();
    if (auto97FF3237_val == gv_aBChoiceButtonA) {
        if ((gv_aBChoiceButtonACallback != null)) {
            TriggerExecute(gv_aBChoiceButtonACallback, true, false);
        }

    }
    else if (auto97FF3237_val == gv_aBChoiceButtonB) {
        if ((gv_aBChoiceButtonBCallback != null)) {
            TriggerExecute(gv_aBChoiceButtonBCallback, true, false);
        }

    }
    else if (auto97FF3237_val == gv_aBChoiceButtonReplay) {
        if ((gv_aBChoiceButtonReplayCallback != null)) {
            TriggerExecute(gv_aBChoiceButtonReplayCallback, true, false);
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceButtonClick_Init () {
    gt_ABChoiceButtonClick = TriggerCreate("gt_ABChoiceButtonClick_Func");
    TriggerAddEventDialogControl(gt_ABChoiceButtonClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - THanson03
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTHanson03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_selendisPortrait;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selendisPortrait = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_abChoiceCurrent = "THanson03A";
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceScriptedScene);
    gf_SetIdleState(ge_IdleState_Busy);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    TriggerExecute(gt_ABChoiceTHanson03Preload, true, true);
    gf_GoToRoom(ge_RoomID_RoomBridge, false);
    gf_RoomScenePrepare(ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorHanson, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ABChoiceCreatePanel("THanson03A", gt_ABChoiceTHanson03A, "THanson03B", gt_ABChoiceTHanson03B, gt_ABChoiceTHanson03Replay, gt_ABChoiceTHanson03Back);
    gv_aBChoiceTHanson03PortraitPlanet = gf_BriefingCreatePortrait("PlanetViewHaven", "Default", ge_BriefingScreen_Center, false);
    gv_aBChoiceTHanson03PortraitSelendis = gf_BriefingCreatePortrait("SelendisPortrait", "Star2CameraRight", ge_BriefingScreen_Center, false);
    while (true) {
        gf_HideAllActors(false);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
        gf_BridgeRaynorAnimation(true, false, true);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
        gf_BridgeHornerAnimation(true, false, true);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHanson));
        gv_aBChoiceReplaying = false;
        TriggerExecute(gt_ABChoiceTHanson03Skippable, true, true);
        TriggerExecute(gt_StopSoundtrackMultiple, true, false);
        gf_StopAllTransmissionConversation();
        if ((gv_aBChoiceSoundPlayed != null)) {
            SoundStop(gv_aBChoiceSoundPlayed, true);
        }

        gf_BriefingPrepare(ge_RoomID_RoomBridge, ge_BriefingCamera_None, ge_ActorID_ActorNone, ge_ActorID_ActorNone, ge_ActorID_ActorNone, true, true, false, false);
        PortraitSetChannel(gv_aBChoiceTHanson03PortraitPlanet, 4);
        PortraitSetChannel(gv_aBChoiceTHanson03PortraitSelendis, 1);
        gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
        gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorHorner));
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHanson));
        gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(921));
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantStanding");
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
        CameraApplyInfo(1, CameraInfoFromId(147), 0.0, -1, 10, true);
        CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), true);
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationDefault);
        if ((gv_aBChoiceSaved == false)) {
            gv_aBChoiceSaved = true;
            gf_ABChoiceCreateAutoSave();
        }

        UISetCursorVisible(PlayerGroupAll(), true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, true);
        gv_aBChoiceOn = true;
        while (!(((gv_aBChoiceOn == false) || (gv_aBChoiceReplaying == true)))) {
            Wait(0.5, c_timeReal);
        }
        if ((gv_aBChoiceOn == false)) {
            TriggerExecute(gt_StopSoundtrackMultiple, true, false);
            break;
        }

    }
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    gf_BriefingRemoveAllActors();
    gf_BriefingDestoryAllPortraits();
    gf_ABChoiceDestoryPanel();
    gv_abChoiceCurrent = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTHanson03_Init () {
    gt_ABChoiceTHanson03 = TriggerCreate("gt_ABChoiceTHanson03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - THanson03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTHanson03Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    gf_BriefingRemoveAllActors();
    gf_BriefingPrepare(ge_RoomID_RoomBridge, ge_BriefingCamera_None, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorHanson, true, true, false, false);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(908));
    gf_BridgeRaynorAnimation(true, false, true);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(909));
    gf_BridgeHornerAnimation(true, false, true);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(915));
    PortraitSetChannel(gv_aBChoiceTHanson03PortraitSelendis, 5);
    PortraitSetChannel(gv_aBChoiceTHanson03PortraitPlanet, 1);
    if ((gv_aBChoiceSaved2 == true)) {
        gv_aBChoiceSaved2 = false;
        return true;
    }

    CameraApplyInfo(1, CameraInfoFromId(910), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03MusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHorner00049", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    SoundPlay(SoundLink("HansonABChoiceAlarm", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_aBChoiceSoundPlayed = SoundLastPlayed();
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", PointFromId(258));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHorner00051", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHanson)), c_animNameDefault, "Stand Listen", c_animFlagNonLooping, c_animTimeDefault);
    CameraApplyInfo(1, CameraInfoFromId(917), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHorner00052", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(440), 1.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHanson00050", 0), 0.0, c_transmissionDurationAdd, false);
    Wait((SoundLengthSync(SoundLink("ScriptedScenesBridgeHanson00050", 0)) / 2.0), c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(918), 0.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", PointFromId(258));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00007", 0), 0.0, c_transmissionDurationAdd, false);
    Wait((SoundLengthSync(SoundLink("ScriptedScenesBridgeRaynor00007", 0)) / 4.0), c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedStanding");
    TransmissionWait(TransmissionLastSent(), 1.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center)), "BriefingVideoSwap", "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlay(SoundLink("UI_PortraitPopUp", -1), PlayerGroupAll(), 100.0, 0.0);
    PortraitSetChannel(gv_aBChoiceTHanson03PortraitPlanet, 4);
    PortraitSetChannel(gv_aBChoiceTHanson03PortraitSelendis, 1);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_aBChoiceTHanson03PortraitSelendis, SoundLink("ScriptedScenesBridgeSelendis00008", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(914), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00009", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(923), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SelendisPortrait"), gv_aBChoiceTHanson03PortraitSelendis, SoundLink("ScriptedScenesBridgeSelendis00010", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.5);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(921));
    UnitSetFacing(gf_ActorUnit(ge_ActorID_ActorHanson), (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorHanson)) + 30.0), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHanson)), c_animNameDefault, "Custom Walk End", c_animFlagNonLooping, 0.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHanson00011", 0), 1.0, c_transmissionDurationSub, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_aBChoiceTHanson03PortraitSelendis, SoundLink("ScriptedScenesBridgeSelendis00038", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(259), 0.6));
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHanson00042", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_aBChoiceTHanson03PortraitSelendis, SoundLink("ScriptedScenesBridgeSelendis00041", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(924), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_aBChoiceTHanson03PortraitSelendis, SoundLink("ScriptedScenesBridgeSelendis00006", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTHanson03Skippable_Init () {
    gt_ABChoiceTHanson03Skippable = TriggerCreate("gt_ABChoiceTHanson03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - THanson03 Back
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTHanson03Back_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_GoToRoom(ge_RoomID_RoomGalaxy, false);
    gf_SetMissionABChoiceResult(null);
    gv_aBChoiceOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTHanson03Back_Init () {
    gt_ABChoiceTHanson03Back = TriggerCreate("gt_ABChoiceTHanson03Back_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - THanson03 Replay
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTHanson03Replay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeLetterboxed, c_transitionDurationImmediate);
    gv_aBChoiceReplaying = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTHanson03Replay_Init () {
    gt_ABChoiceTHanson03Replay = TriggerCreate("gt_ABChoiceTHanson03Replay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - THanson03 A
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTHanson03A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeLetterboxed, c_transitionDurationImmediate);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHanson));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(908));
    gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(933));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantStanding", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TriggerExecute(gt_ABChoiceTHanson03ASkippable, true, true);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_StopAllTransmissionConversation();
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantStanding");
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
    gf_SetMissionABChoiceResult("THanson03A");
    gv_aBChoiceOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTHanson03A_Init () {
    gt_ABChoiceTHanson03A = TriggerCreate("gt_ABChoiceTHanson03A_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - THanson03 A Skippable
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTHanson03ASkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(914), 0.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03AMusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00012", 0), 0.0, c_transmissionDurationAdd, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(259), 0.6));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(923), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SelendisPortrait"), gv_aBChoiceTHanson03PortraitSelendis, SoundLink("ScriptedScenesBridgeSelendis00026", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center)), "BriefingVideoSwap", "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    PortraitSetChannel(gv_aBChoiceTHanson03PortraitSelendis, 4);
    PortraitSetChannel(gv_aBChoiceTHanson03PortraitPlanet, 1);
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(923), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHanson00013", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTHanson03ASkippable_Init () {
    gt_ABChoiceTHanson03ASkippable = TriggerCreate("gt_ABChoiceTHanson03ASkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - THanson03 B
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTHanson03B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    PortraitSetVisible(gv_aBChoicePortraitA, PlayerGroupAll(), false, false);
    PortraitSetVisible(gv_aBChoicePortraitB, PlayerGroupAll(), false, false);
    UISetMode(PlayerGroupAll(), c_uiModeLetterboxed, c_transitionDurationImmediate);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHanson));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(908));
    gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(933));
    TriggerExecute(gt_ABChoiceTHanson03BSkippable, true, true);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_StopAllTransmissionConversation();
    gf_CloseDoor(ge_RoomID_RoomBridge, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "FastStanding");
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHanson), "FastStanding");
    gf_SetMissionABChoiceResult("THanson03B");
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHanson)), c_animNameDefault);
    gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(ge_ActorID_ActorHanson), "Angry", false, 0.0);
    gv_aBChoiceOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTHanson03B_Init () {
    gt_ABChoiceTHanson03B = TriggerCreate("gt_ABChoiceTHanson03B_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - THanson03 B Skippable
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTHanson03BSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libNtve_gf_MakeUnitFacePoint(gf_ActorUnit(ge_ActorID_ActorHorner), PointFromId(696), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(295), 0.0, -1, 10, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson03BMusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(1, CameraInfoFromId(296), SoundLengthSync(SoundLink("ScriptedScenesBridgeRaynor00014", 0)), -1, 15, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00014", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(933), 0.45));
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(919), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00053", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeGame);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "VerySlowHeadOnly", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorHanson)), 1.0, (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorHanson)) + 15.0)), 0.4));
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(296), 0.0, -1, 10, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00054", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(696), 0.6));
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHanson)), "Angry");
    CameraApplyInfo(1, CameraInfoFromId(147), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHanson00027", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorHanson), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(296), 0.0, -1, 10, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "FastStanding", gf_ActorUnit(ge_ActorID_ActorHanson), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00001", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(147), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHanson), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHanson00004", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHanson)), c_animNameDefault, "Custom Walk Right", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.5, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHanson), "FastStanding");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SelendisPortrait"), gv_aBChoiceTHanson03PortraitSelendis, SoundLink("ScriptedScenesBridgeSelendis00015", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.5, c_timeReal);
    gf_OpenDoor(ge_RoomID_RoomBridge, false);
    Wait(0.5, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTHanson03BSkippable_Init () {
    gt_ABChoiceTHanson03BSkippable = TriggerCreate("gt_ABChoiceTHanson03BSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - THanson03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTHanson03Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadObject(c_gameCatalogModel, ("PlanetViewHaven"), false);
    PreloadObject(c_gameCatalogModel, ("SelendisPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHanson));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHall));
    ConversationDataPreloadLines("ScriptedScenesBridge");
    gf_PreloadUnitStoryMap(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center));
    SoundLengthQueryWait();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTHanson03Preload_Init () {
    gt_ABChoiceTHanson03Preload = TriggerCreate("gt_ABChoiceTHanson03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TTosh03
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTTosh03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_abChoiceCurrent = "TTosh03A";
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceScriptedScene);
    gf_SetIdleState(ge_IdleState_Busy);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    TriggerExecute(gt_ABChoiceTTosh03Preload, true, true);
    gf_GoToRoom(ge_RoomID_RoomBridge, false);
    gf_RoomScenePrepare(ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ABChoiceCreatePanel("TTosh03A", gt_ABChoiceTTosh03A, "TTosh03B", gt_ABChoiceTTosh03B, gt_ABChoiceTTosh03Replay, gt_ABChoiceTTosh03Back);
    gv_aBChoiceTTosh03PortraitNova = gf_BriefingCreatePortrait("NovaPortrait", "CameraWide", ge_BriefingScreen_Center, false);
    gv_aBChoiceTTosh03PortraitNova_Right = gf_BriefingCreatePortrait("NovaPortrait", "CameraWide", ge_BriefingScreen_Right, false);
    gv_aBChoiceTTosh03PortraitTosh = gf_BriefingCreatePortrait("ToshPortrait", "CameraWide", ge_BriefingScreen_Center, false);
    gv_aBChoiceTTosh03PortraitToshLeft = gf_BriefingCreatePortrait("ToshPortrait", "CameraWide", ge_BriefingScreen_Left, false);
    while (true) {
        gf_HideAllActors(false);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
        gf_BridgeRaynorAnimation(true, false, true);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
        gf_BridgeHornerAnimation(true, false, true);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
        PortraitSetChannel(gv_aBChoiceTTosh03PortraitToshLeft, 4);
        PortraitSetChannel(gv_aBChoiceTTosh03PortraitNova_Right, 5);
        gv_aBChoiceReplaying = false;
        gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main), 0.0);
        gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center), 0.0);
        gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFING, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main), 0.0);
        gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFING, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center), 0.0);
        TriggerExecute(gt_ABChoiceTTosh03Skippable, true, true);
        TriggerExecute(gt_StopSoundtrackMultiple, true, false);
        gf_StopAllTransmissionConversation();
        if ((gv_aBChoiceSoundPlayed != null)) {
            SoundStop(gv_aBChoiceSoundPlayed, true);
        }

        PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), false, false);
        UISetWorldVisible(PlayerGroupAll(), true);
        gf_BriefingPrepare(ge_RoomID_RoomBridge, ge_BriefingCamera_None, ge_ActorID_ActorNone, ge_ActorID_ActorNone, ge_ActorID_ActorNone, true, true, false, false);
        libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center));
        libNtve_gf_PlayMovieTextureOnUnitActor(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center), "video_static");
        libNtve_gf_SendActorMessageToUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center), "TextureVideoPlay video 30 Looping,Synced");
        gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
        gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorHorner));
        gf_RemoveVisibleUnit(true, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center));
        gf_RemoveVisibleUnit(true, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main)), c_animNameDefault, "Stand Alternate", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center)), c_animNameDefault, "Stand Alternate", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
        PortraitSetChannel(gv_aBChoiceTTosh03PortraitToshLeft, 2);
        PortraitSetChannel(gv_aBChoiceTTosh03PortraitNova_Right, 3);
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
        CameraApplyInfo(1, CameraInfoFromId(931), 0.0, -1, 10, true);
        CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), true);
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationDefault);
        if ((gv_aBChoiceSaved == false)) {
            gv_aBChoiceSaved = true;
            gf_ABChoiceCreateAutoSave();
        }

        UISetCursorVisible(PlayerGroupAll(), true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, true);
        gv_aBChoiceOn = true;
        while (!(((gv_aBChoiceOn == false) || (gv_aBChoiceReplaying == true)))) {
            Wait(0.5, c_timeReal);
        }
        if ((gv_aBChoiceOn == false)) {
            TriggerExecute(gt_StopSoundtrackMultiple, true, false);
            break;
        }

    }
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_RoomSceneClearAll();
    gf_ActorSceneClearAll();
    gf_BriefingRemoveAllActors();
    gf_BriefingDestoryAllPortraits();
    PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), false, false);
    gf_ABChoiceDestoryPanel();
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Left), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Right), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFING, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFING, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFING, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Left), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFING, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Right), 0.0);
    gv_abChoiceCurrent = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTTosh03_Init () {
    gt_ABChoiceTTosh03 = TriggerCreate("gt_ABChoiceTTosh03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TTosh03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTTosh03Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_BriefingRemoveAllActors();
    gf_BriefingPrepare(ge_RoomID_RoomBridge, ge_BriefingCamera_None, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone, true, true, true, true);
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center));
    libNtve_gf_PlayMovieTextureOnUnitActor(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center), "video_static");
    libNtve_gf_SendActorMessageToUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center), "TextureVideoPlay video 30 Looping,Synced");
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Left));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Right));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_BridgeRaynorAnimation(true, false, true);
    gf_TurnActorFidgetOnOffInstantly(ge_ActorID_ActorRaynor, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(887));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_BridgeHornerAnimation(true, true, true);
    gf_TurnActorFidgetOnOffInstantly(ge_ActorID_ActorHorner, false);
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(888));
    gf_MakeUnitLookAtUnitWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    if ((gv_aBChoiceSaved2 == true)) {
        gv_aBChoiceSaved2 = false;
        return true;
    }

    CameraApplyInfo(1, CameraInfoFromId(889), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03MusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00002", 0), 0.0, c_transmissionDurationAdd, false);
    Wait((SoundLengthSync(SoundLink("ScriptedScenesBridgeRaynor00002", 0)) / 2.0), c_timeReal);
    gf_MakeUnitLookAtUnitWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(667), 1.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHorner00003", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), gv_aNIMID_BRIEFING, "Stand B", c_animFlagFullMatch | c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.5, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnly");
    gf_MakeUnitLookAtPointWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(696), 0.2));
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHorner), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeHorner00043", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.5, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 1.0);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    CameraApplyInfo(1, CameraInfoFromId(890), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00017", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.75, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(490));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(929));
    gf_BridgeHornerAnimation(true, false, true);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main));
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center));
    PortraitSetChannel(gv_aBChoiceTTosh03PortraitTosh, 5);
    PortraitSetChannel(gv_aBChoiceTTosh03PortraitNova, 1);
    CameraApplyInfo(1, CameraInfoFromId(891), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_aBChoiceTTosh03PortraitNova, SoundLink("ScriptedScenesBridgeNova00018", 0), 0.0, c_transmissionDurationAdd, false);
    Wait((SoundLengthSync(SoundLink("ScriptedScenesBridgeNova00018", -1)) / 3.0), c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, "Fidget 02", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00019", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtUnitWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_aBChoiceTTosh03PortraitNova, SoundLink("ScriptedScenesBridgeNova00020", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnlySubtle");
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(930));
    CameraApplyInfo(1, CameraInfoFromId(893), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00005", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.3, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main)), c_animNameDefault, "Stand Alternate", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center)), c_animNameDefault, "Stand Alternate", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
    Wait(0.5, c_timeReal);
    PortraitSetChannel(gv_aBChoiceTTosh03PortraitNova_Right, 3);
    CameraApplyInfo(1, CameraInfoFromId(932), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    PortraitSetChannel(gv_aBChoiceTTosh03PortraitToshLeft, 2);
    Wait(0.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_aBChoiceTTosh03PortraitToshLeft, SoundLink("ScriptedScenesBridgeTosh00021", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitSetModel(libNtve_gf_FullscreenPortrait(), "NovaPortrait", true);
    PortraitSetCamera(libNtve_gf_FullscreenPortrait(), "CameraWide");
    PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), true, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_FullscreenPortrait(), SoundLink("ScriptedScenesBridgeNova00033", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitSetModel(libNtve_gf_FullscreenPortrait(), "ToshPortrait", true);
    PortraitSetCamera(libNtve_gf_FullscreenPortrait(), "CameraWide");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_FullscreenPortrait(), SoundLink("ScriptedScenesBridgeTosh00044", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitSetModel(libNtve_gf_FullscreenPortrait(), "NovaPortrait", true);
    PortraitSetCamera(libNtve_gf_FullscreenPortrait(), "CameraWide");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_FullscreenPortrait(), SoundLink("ScriptedScenesBridgeNova00034", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitSetModel(libNtve_gf_FullscreenPortrait(), "NovaPortrait", true);
    PortraitSetCamera(libNtve_gf_FullscreenPortrait(), "CameraWide");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_FullscreenPortrait(), SoundLink("ScriptedScenesBridgeNova00045", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitSetModel(libNtve_gf_FullscreenPortrait(), "ToshPortrait", true);
    PortraitSetModel(libNtve_gf_FullscreenPortrait(), "ToshPortrait", true);
    PortraitSetCamera(libNtve_gf_FullscreenPortrait(), "CameraWide");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_FullscreenPortrait(), SoundLink("ScriptedScenesBridgeTosh00046", 0), 0.0, c_transmissionDurationAdd, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    CameraApplyInfo(1, CameraInfoFromId(894), 0.0, -1, 10, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), false, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeNova00047", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_aBChoicePortraitA, SoundLink("ScriptedScenesBridgeTosh00039", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(782), 0.6));
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTTosh03Skippable_Init () {
    gt_ABChoiceTTosh03Skippable = TriggerCreate("gt_ABChoiceTTosh03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TTosh03 Back
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTTosh03Back_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_GoToRoom(ge_RoomID_RoomGalaxy, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_SetMissionABChoiceResult(null);
    gv_aBChoiceOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTTosh03Back_Init () {
    gt_ABChoiceTTosh03Back = TriggerCreate("gt_ABChoiceTTosh03Back_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TTosh03 Replay
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTTosh03Replay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeLetterboxed, c_transitionDurationImmediate);
    gv_aBChoiceReplaying = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTTosh03Replay_Init () {
    gt_ABChoiceTTosh03Replay = TriggerCreate("gt_ABChoiceTTosh03Replay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TTosh03 A
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTTosh03A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeLetterboxed, c_transitionDurationImmediate);
    TriggerExecute(gt_ABChoiceTTosh03ASkippable, true, true);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_StopAllTransmissionConversation();
    gf_SetMissionABChoiceResult("TTosh03A");
    gv_aBChoiceOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTTosh03A_Init () {
    gt_ABChoiceTTosh03A = TriggerCreate("gt_ABChoiceTTosh03A_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TTosh03 A Skippable
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTTosh03ASkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(930));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(929));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    CameraApplyInfo(1, CameraInfoFromId(491), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(493), (0.5 + SoundLengthSync(SoundLink("ScriptedScenesBridgeRaynor00023", 0)) + SoundLengthSync(SoundLink("ScriptedScenesBridgeRaynor00032", 0)) + SoundLengthSync(SoundLink("ScriptedScenesBridgeRaynor00035", 0))), -1, 20, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03AMusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(0.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00023", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00032", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00035", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(496), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("NovaPortrait"), gv_aBChoiceTTosh03PortraitNova_Right, SoundLink("ScriptedScenesBridgeNova00028", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    PortraitSetChannel(gv_aBChoiceTTosh03PortraitNova_Right, 5);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_aBChoiceTTosh03PortraitToshLeft, SoundLink("ScriptedScenesBridgeTosh00025", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTTosh03ASkippable_Init () {
    gt_ABChoiceTTosh03ASkippable = TriggerCreate("gt_ABChoiceTTosh03ASkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TTosh03 B
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTTosh03B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeLetterboxed, c_transitionDurationImmediate);
    TriggerExecute(gt_ABChoiceTTosh03BSkippable, true, true);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_StopAllTransmissionConversation();
    PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), false, false);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
    gf_SetMissionABChoiceResult("TTosh03B");
    gv_aBChoiceOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTTosh03B_Init () {
    gt_ABChoiceTTosh03B = TriggerCreate("gt_ABChoiceTTosh03B_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TTosh03 B Skippable
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTTosh03BSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(930));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(929));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    CameraApplyInfo(1, CameraInfoFromId(491), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(493), (SoundLengthSync(SoundLink("ScriptedScenesBridgeRaynor00022", 0)) + 0.5), -1, 20, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03BMusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00022", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(496), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_aBChoiceTTosh03PortraitToshLeft, SoundLink("ScriptedScenesBridgeTosh00048", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    PortraitSetChannel(gv_aBChoiceTTosh03PortraitToshLeft, 5);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(491), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesBridgeRaynor00040", 0), 0.0, c_transmissionDurationAdd, true);
    PortraitSetModel(libNtve_gf_FullscreenPortrait(), "NovaPortrait", true);
    PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), true, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_FullscreenPortrait(), SoundLink("ScriptedScenesBridgeNova00037", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_FullscreenPortrait(), SoundLink("ScriptedScenesBridgeNova00030", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_FullscreenPortrait(), SoundLink("ScriptedScenesBridgeNova00024", 0), 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTTosh03BSkippable_Init () {
    gt_ABChoiceTTosh03BSkippable = TriggerCreate("gt_ABChoiceTTosh03BSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TTosh03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTTosh03Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadObject(c_gameCatalogModel, ("ToshPortrait"), false);
    PreloadObject(c_gameCatalogModel, ("NovaPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorHorner));
    ConversationDataPreloadLines("ScriptedScenesBridge");
    gf_PreloadUnitStoryMap(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Main));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Center));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Left));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(ge_RoomID_RoomBridge, ge_BriefingScreen_Right));
    SoundLengthQueryWait();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTTosh03Preload_Init () {
    gt_ABChoiceTTosh03Preload = TriggerCreate("gt_ABChoiceTTosh03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TValerian02
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTValerian02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_offsetX;
    int lv_offsetY;
    int lv_portraitWidth;
    int lv_portraitHeight;
    int lv_buttonOffsetY;
    fixed lv_scale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_abChoiceCurrent = "TValerian02A";
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceScriptedScene);
    gf_SetIdleState(ge_IdleState_Busy);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    SoundLengthQueryWait();
    TriggerExecute(gt_ABChoiceTValerian02Preload, true, true);
    gf_GoToRoom(ge_RoomID_RoomChar, false);
    gf_RoomScenePrepare(ge_RoomID_RoomChar, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynorMarine, ge_ActorID_ActorNone, ge_RoomID_RoomChar, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorTychus, ge_ActorID_ActorNone, ge_RoomID_RoomChar, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorWarfield, ge_ActorID_ActorNone, ge_RoomID_RoomChar, ge_SceneType_Scene);
    gf_HideAllActors(false);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorWarfield));
    gf_ABChoiceCreatePanel("TValerian02A", gt_ABChoiceTValerian02A, "TValerian02B", gt_ABChoiceTValerian02B, gt_ABChoiceTValerian02Replay, gt_ABChoiceTValerian02Back);
    lv_scale = gv_aBChoicePortraitScale;
    lv_offsetX = FixedToInt((IntToFixed(gv_aBChoicePortraitOffsetX) * lv_scale));
    lv_offsetY = FixedToInt((IntToFixed(gv_aBChoicePortraitOffsetY) * lv_scale));
    lv_portraitWidth = FixedToInt((IntToFixed(gv_aBChoicePortraitWidth) * lv_scale));
    lv_portraitHeight = FixedToInt((IntToFixed(gv_aBChoicePortraitHeight) * lv_scale));
    while (true) {
        gv_aBChoiceReplaying = false;
        TriggerExecute(gt_ABChoiceTValerian02Skippable, true, true);
        TriggerExecute(gt_StopSoundtrackMultiple, true, false);
        gf_StopAllTransmissionConversation();
        if ((gv_aBChoiceSoundPlayed != null)) {
            SoundStop(gv_aBChoiceSoundPlayed, true);
        }

        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "InstantStanding");
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStanding");
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorWarfield), "InstantStanding");
        gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorWarfield));
        if ((gv_aBChoiceTValerian02BriefingCompleted == false)) {
            gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(539));
            gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(540));
        }

        CameraApplyInfo(1, CameraInfoFromId(531), 0.0, -1, 10, true);
        CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), true);
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationDefault);
        if ((gv_aBChoiceSaved == false)) {
            gv_aBChoiceSaved = true;
            gf_ABChoiceCreateAutoSave();
        }

        UISetCursorVisible(PlayerGroupAll(), true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, true);
        gv_aBChoiceOn = true;
        while (!(((gv_aBChoiceOn == false) || (gv_aBChoiceReplaying == true)))) {
            Wait(0.5, c_timeReal);
        }
        if ((gv_aBChoiceOn == false)) {
            TriggerExecute(gt_StopSoundtrackMultiple, true, false);
            break;
        }

    }
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomChar)), gv_aNIMID_ACTORLIGHTING);
    gf_RoomSceneClearAll();
    gf_ActorSceneClearAll();
    gf_ABChoiceDestoryPanel();
    gv_abChoiceCurrent = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTValerian02_Init () {
    gt_ABChoiceTValerian02 = TriggerCreate("gt_ABChoiceTValerian02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TValerian02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTValerian02Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_aBChoiceTValerian02BriefingCompleted = false;
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorWarfield));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(525));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(299));
    gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(526));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(790), 0.3));
    if ((gv_aBChoiceSaved2 == true)) {
        gv_aBChoiceSaved2 = false;
        return true;
    }

    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(790), 0.5));
    UnitIssueOrder(gf_ActorUnit(ge_ActorID_ActorTychus), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(527)), c_orderQueueReplace);
    CameraApplyInfo(1, CameraInfoFromId(298), 0.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(790), 0.5));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02MusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(790), 0.5));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharTychus00001", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), "SlowStandingSubtle", gf_ActorUnit(ge_ActorID_ActorWarfield), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharRaynor00002", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(527));
    CameraApplyInfo(1, CameraInfoFromId(300), 0.0, -1, 10, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(302));
    gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(303));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharTychus00003", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStanding");
    CameraApplyInfo(1, CameraInfoFromId(301), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharRaynor00004", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharWarfield00005", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharRaynor00006", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(306));
    gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(307));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    CameraApplyInfo(1, CameraInfoFromId(304), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharWarfield00007", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharTychus00008", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorWarfield), "SlowStanding", libNtve_gf_PointWithZOffset(PointFromId(963), 0.6));
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(981), 2.0, -1, 20, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(531), 0.0, -1, 10, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorWarfield), "MedStanding");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharWarfield00009", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.0);
    UnitIssueOrder(gf_ActorUnit(ge_ActorID_ActorTychus), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(539)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    gv_aBChoiceTValerian02BriefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTValerian02Skippable_Init () {
    gt_ABChoiceTValerian02Skippable = TriggerCreate("gt_ABChoiceTValerian02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TValerian02 Back
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTValerian02Back_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_GoToRoom(ge_RoomID_RoomGalaxy, false);
    gf_SetMissionABChoiceResult(null);
    gv_aBChoiceOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTValerian02Back_Init () {
    gt_ABChoiceTValerian02Back = TriggerCreate("gt_ABChoiceTValerian02Back_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TValerian02 Replay
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTValerian02Replay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeLetterboxed, c_transitionDurationImmediate);
    gv_aBChoiceReplaying = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTValerian02Replay_Init () {
    gt_ABChoiceTValerian02Replay = TriggerCreate("gt_ABChoiceTValerian02Replay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TValerian02 A
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTValerian02A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeLetterboxed, c_transitionDurationImmediate);
    TriggerExecute(gt_ABChoiceTValerian02ASkippable, true, true);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_StopAllTransmissionConversation();
    gf_SetMissionABChoiceResult("TValerian02A");
    gv_aBChoiceOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTValerian02A_Init () {
    gt_ABChoiceTValerian02A = TriggerCreate("gt_ABChoiceTValerian02A_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TValerian02 A Skippable
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTValerian02ASkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(302));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(314));
    gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(308));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    CameraApplyInfo(1, CameraInfoFromId(309), 0.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02AMusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(0.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharRaynor00010", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(310), (SoundLengthSync(SoundLink("ScriptedScenesCharRaynor00010", 0)) - 1.0), -1, 20, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    CameraApplyInfo(1, CameraInfoFromId(311), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharWarfield00011", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(312), 2.0, -1, 20, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharTychus00012", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTValerian02ASkippable_Init () {
    gt_ABChoiceTValerian02ASkippable = TriggerCreate("gt_ABChoiceTValerian02ASkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TValerian02 B
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTValerian02B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    DialogSetVisible(gv_aBChoicePanel, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeLetterboxed, c_transitionDurationImmediate);
    TriggerExecute(gt_ABChoiceTValerian02BSkippable, true, true);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_StopAllTransmissionConversation();
    gf_SetMissionABChoiceResult("TValerian02B");
    gv_aBChoiceOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTValerian02B_Init () {
    gt_ABChoiceTValerian02B = TriggerCreate("gt_ABChoiceTValerian02B_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TValerian02 B Skippable
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTValerian02BSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynorMarine, PointFromId(302));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(539));
    gf_ResetActorToLocation(ge_ActorID_ActorWarfield, PointFromId(315));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    CameraApplyInfo(1, CameraInfoFromId(309), 0.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02BMusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(0.5, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharRaynor00013", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(310), (SoundLengthSync(SoundLink("ScriptedScenesCharRaynor00013", 0)) - 1.0), -1, 20, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    CameraApplyInfo(1, CameraInfoFromId(316), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorTychus), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharTychus00014", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(317), 1.5, -1, 20, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorWarfield), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesCharWarfield00015", 0), 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTValerian02BSkippable_Init () {
    gt_ABChoiceTValerian02BSkippable = TriggerCreate("gt_ABChoiceTValerian02BSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ABChoice - TValerian02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_ABChoiceTValerian02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorRaynorMarine));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorWarfield));
    gf_PreloadUnitStoryMap(gf_ActorUnit(ge_ActorID_ActorTychus));
    ConversationDataPreloadLines("ScriptedScenesChar");
    SoundLengthQueryWait();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ABChoiceTValerian02Preload_Init () {
    gt_ABChoiceTValerian02Preload = TriggerCreate("gt_ABChoiceTValerian02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing Lab/Cantina Opened
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingLabCantinaOpened_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playLabLine;
    bool lv_playCantinaLine;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debriefingLabCantinaOpenedDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_RoomIsEnabled(ge_RoomID_RoomLab) == true) && (libWoLC_gf_StoryState("LabHornerLinePlayed") == false)) {
        lv_playLabLine = true;
    }
    else {
        lv_playLabLine = false;
    }
    if ((gf_RoomIsEnabled(ge_RoomID_RoomCantina) == true) && (libWoLC_gf_StoryState("CantinaHornerLinePlayed") == false)) {
        lv_playCantinaLine = true;
    }
    else {
        lv_playCantinaLine = false;
    }
    if ((lv_playLabLine == false) && (lv_playCantinaLine == false)) {
        return true;
    }

    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
    gf_PlayFidget("WhenRoomsOpen", ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    if ((lv_playLabLine == true)) {
        libWoLC_gf_SetStoryStateBoolean("LabHornerLinePlayed", true);
    }

    if ((lv_playCantinaLine == true)) {
        libWoLC_gf_SetStoryStateBoolean("CantinaHornerLinePlayed", true);
    }

    gv_debriefingLabCantinaOpenedDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingLabCantinaOpened_Init () {
    gt_DebriefingLabCantinaOpened = TriggerCreate("gt_DebriefingLabCantinaOpened_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing Communicator Unlocked
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingCommunicatorUnlocked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libWoLC_gf_LastMission() == "TTychus04") && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Sucessful) == true) && (libWoLC_gf_LastMissionConditionCheck(libWoLC_ge_MissionCondition_Simulation) == false)) {
        gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Speech);
        gf_PlayFidget("CommunicatorUnlocked", ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
        gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingCommunicatorUnlocked_Init () {
    gt_DebriefingCommunicatorUnlocked = TriggerCreate("gt_DebriefingCommunicatorUnlocked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TRaynor03
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTRaynor03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomBridge);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ActorScenePrepare(ge_ActorID_ActorTychus, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    libNtve_gf_CreateUnitsAtPoint2(1, "SMBralik", 0, 0, PointFromId(528));
    gv_debriefingTRaynor03WalkingOfficer = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "SMCade", 0, 0, PointFromId(1076));
    gv_debriefingTRaynor03StarmapOfficer = UnitLastCreated();
    UnitSetState(UnitFromId(1028), c_unitStateFidget, false);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorStetmann));
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, gv_bridgeHornerCameras, ge_ActorID_ActorNone, null, null, null);
    gf_ConvoPositionActors(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    TriggerExecute(gt_DebriefingTRaynor03Skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitRemove(gv_debriefingTRaynor03WalkingOfficer);
    UnitRemove(gv_debriefingTRaynor03StarmapOfficer);
    gf_ConvoClearCamera(ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    gf_ActorSceneClearAll();
    gf_DebriefingCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTRaynor03_Init () {
    gt_DebriefingTRaynor03 = TriggerCreate("gt_DebriefingTRaynor03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TRaynor03 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTRaynor03Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor03MusicDebrief", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(24));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, gv_bridgeHornerCameras, ge_ActorID_ActorNone, null, null, gt_DebriefingTRaynor03CameraChange);
    gf_UseConversationCamera(ge_RoomID_RoomBridge, ge_ActorID_ActorHorner, ge_ConvoCameraType_ConvoCameraChar1Medium, gv_bridgeHornerCameras);
    UnitIssueOrder(gv_debriefingTRaynor03WalkingOfficer, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(529)), c_orderQueueReplace);
    CameraUseModel(1, UnitFromId(1068), "SM_HyperionBridgeTRaynor03BriefingCamera", 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1068)), gv_aNIMID_ZOOM, "Spell", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1028)), c_animNameDefault, "Fidget 05", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(UnitFromId(1028)), c_animNameDefault, 15.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTRaynor03Skippable_Init () {
    gt_DebriefingTRaynor03Skippable = TriggerCreate("gt_DebriefingTRaynor03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TRaynor03 Camera Change
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTRaynor03CameraChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto1EBF556B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_DebriefingTRaynor03CameraChangeNoWait, true, false);
    auto1EBF556B_val = ConversationDataActiveSound();
    if (auto1EBF556B_val == "DebriefsHorner00032") {
        gv_convoCameraChangeResult = false;
        Wait(0.5, c_timeReal);
        Wait(2.0, c_timeReal);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTRaynor03CameraChange_Init () {
    gt_DebriefingTRaynor03CameraChange = TriggerCreate("gt_DebriefingTRaynor03CameraChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TRaynor03 Camera Change No Wait
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTRaynor03CameraChangeNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoEB551780_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    autoEB551780_val = ConversationDataActiveSound();
    if (autoEB551780_val == "DebriefsHorner00032") {
        Wait(0.75, c_timeReal);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_debriefingTRaynor03StarmapOfficer), c_animNameDefault, "Fidget 02", c_animFlagFullMatch, 1.0);
    }
    else if (autoEB551780_val == "DebriefsHorner00058") {
        Wait((SoundLengthSync(SoundLink("DebriefsHorner00058", 0)) / 2.0), c_timeReal);
        gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(476), 0.6));
        Wait(1.0, c_timeReal);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
        CameraApplyInfo(1, CameraInfoFromId(475), 0.0, -1, 10, true);
        Wait(1.0, c_timeReal);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), c_animNameDefault, "Custom Fidget", c_animFlagNonLooping, 1.0);
        Wait(3.5, c_timeGame);
        CameraApplyInfo(1, CameraInfoFromId(355), 0.0, -1, 10, true);
    }
    else if (autoEB551780_val == "DebriefsRaynor00059") {
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
        CameraApplyInfo(1, CameraInfoFromId(475), 0.0, -1, 10, true);
        gv_convoCameraChangeResult = false;
        Wait(2.0, c_timeGame);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTRaynor03CameraChangeNoWait_Init () {
    gt_DebriefingTRaynor03CameraChangeNoWait = TriggerCreate("gt_DebriefingTRaynor03CameraChangeNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THanson01
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHanson01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomBridge);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(13));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(17));
    libNtve_gf_MakeUnitFacePoint(gf_ActorUnit(ge_ActorID_ActorHorner), PointFromId(19), 0.0);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ActorScenePrepare(ge_ActorID_ActorHanson, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(19));
    libNtve_gf_MakeUnitFacePoint(gf_ActorUnit(ge_ActorID_ActorHanson), PointFromId(17), 0.0);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHanson));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorStetmann));
    TriggerExecute(gt_DebriefingTHanson01Skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorHanson, ge_ActorID_ActorHorner);
    gf_CloseDoor(ge_RoomID_RoomBridge, true);
    gf_ActorSceneClearAll();
    gf_DebriefingCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHanson01_Init () {
    gt_DebriefingTHanson01 = TriggerCreate("gt_DebriefingTHanson01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THanson01 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHanson01Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson01MusicDebrief", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(1, CameraInfoFromId(32), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_OpenDoor(ge_RoomID_RoomBridge, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk Start", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.5, c_timeGame);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorHanson), "Ref_Head");
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    libNtve_gf_MakeUnitFacePoint(gf_ActorUnit(ge_ActorID_ActorHorner), PointFromId(8), 0.0);
    libNtve_gf_MakeUnitFacePoint(gf_ActorUnit(ge_ActorID_ActorHanson), PointFromId(8), 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(675));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk End", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    CameraApplyInfo(1, CameraInfoFromId(3), 0.0, -1, 10, true);
    Wait(0.1, c_timeReal);
    Wait(0.5, c_timeGame);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnly");
    Wait(0.5, c_timeGame);
    gf_CloseDoor(ge_RoomID_RoomBridge, false);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHanson), "MedHeadOnly");
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHanson, null, ge_ActorID_ActorHorner, null, null, gt_DebriefingTHanson01CameraChange);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHanson", gf_ActorUnit(ge_ActorID_ActorHanson));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    Wait(1.5, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHanson01Skippable_Init () {
    gt_DebriefingTHanson01Skippable = TriggerCreate("gt_DebriefingTHanson01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THanson01 Camera Change
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHanson01CameraChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_convoCameraChangeResult = false;
    TriggerExecute(gt_DebriefingTHanson01CameraChangeNoWait, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHanson01CameraChange_Init () {
    gt_DebriefingTHanson01CameraChange = TriggerCreate("gt_DebriefingTHanson01CameraChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THanson01 Camera Change No Wait
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHanson01CameraChangeNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto3A0B2C30_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    auto3A0B2C30_val = ConversationDataActiveSound();
    if (auto3A0B2C30_val == "DebriefsHorner00022") {
        Wait(3.5, c_timeReal);
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorHanson), "Ref_Head");
    }
    else if (auto3A0B2C30_val == "DebriefsHanson00025") {
        CameraApplyInfo(1, CameraInfoFromId(28), 0.0, -1, 10, true);
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(8));
        libNtve_gf_MakeUnitFacePoint(gf_ActorUnit(ge_ActorID_ActorRaynor), UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorHanson)), 0.0);
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    }
    else if (auto3A0B2C30_val == "DebriefsRaynor00021") {
        CameraApplyInfo(1, CameraInfoFromId(31), 0.0, -1, 10, true);
    }
    else if (auto3A0B2C30_val == "DebriefsHanson00023") {
        CameraApplyInfo(1, CameraInfoFromId(28), 0.0, -1, 10, true);
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(675));
        libNtve_gf_MakeUnitFacePoint(gf_ActorUnit(ge_ActorID_ActorRaynor), UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorHanson)), 0.0);
    }
    else if (auto3A0B2C30_val == "DebriefsRaynor00024") {
        CameraApplyInfo(1, CameraInfoFromId(3), 0.0, -1, 10, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHanson01CameraChangeNoWait_Init () {
    gt_DebriefingTHanson01CameraChangeNoWait = TriggerCreate("gt_DebriefingTHanson01CameraChangeNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THanson02_1
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHanson02_1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceTV);
    gf_SetIdleState(ge_IdleState_Busy);
    libCamp_gf_HideStoryUI(false, true);
    gf_ChangeRoom(ge_RoomID_RoomCantina, false);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    gf_RoomScenePrepare(ge_RoomID_RoomCantina, ge_SceneType_TV);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_TVNewsPreload("THanson02");
    gf_TurnAnimationPropertiesOnOffInstantly(gv_cantinaProps, "A", false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(154));
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Cover", true);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "C", true);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomCantina, ge_SceneType_TV);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorTychus, ge_ActorID_ActorNone, ge_RoomID_RoomCantina, ge_SceneType_TV);
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    ConversationDataStateSetValue("Hotspots|CantinaTV", 1);
    gv_tVNewsCurrentThread = gt_TVNewsHanson02Skippable;
    TriggerEnable(gt_TVNewsBack2, true);
    TriggerExecute(gv_tVNewsCurrentThread, true, true);
    TriggerEnable(gt_TVNewsBack2, false);
    gv_tVNewsCurrentThread = null;
    gf_StopAllTransmissionConversation();
    libNtve_gf_StopAllVideoTexturesOnUnit(gv_cantinaTV);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 0, ""));
    UIClearMessages(PlayerGroupAll(), c_messageAreaSubtitle);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    gf_ViewRoomCamera(ge_RoomID_RoomCantina, PlayerGroupAll(), 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_PauseNewItemInfo(false);
    libCamp_gf_HideStoryUI(true, true);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    gf_TVNewsSetWatched("THanson02");
    if ((gv_returned == true)) {
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        gf_PauseFlashing(false);
        gf_TurnClickablesOnOff(gv_clickables, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHanson02_1_Init () {
    gt_DebriefingTHanson02_1 = TriggerCreate("gt_DebriefingTHanson02_1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THanson02_2
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHanson02_2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomBridge);
    TriggerExecute(gt_BridgeWindowInitNose, true, false);
    gf_RemoveVisibleUnit(false, gv_bridgeStarmapHolomap);
    gf_HideFullScreenImage(false);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ActorScenePrepare(ge_ActorID_ActorHanson, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHanson));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    TriggerExecute(gt_DebriefingTHanson02_2Skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorHanson, ge_ActorID_ActorHorner);
    gf_CloseDoor(ge_RoomID_RoomBridge, true);
    gf_ActorSceneClearAll();
    gf_DebriefingCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHanson02_2_Init () {
    gt_DebriefingTHanson02_2 = TriggerCreate("gt_DebriefingTHanson02_2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THanson02_2 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHanson02_2Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicDebrief", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    ConversationDataRegisterUnit("Characters|CharHanson", gf_ActorUnit(ge_ActorID_ActorHanson));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraRaynorMedium, CameraInfoFromId(886));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar1Medium, CameraInfoFromId(503));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar2Medium, CameraInfoFromId(503));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, gv_bridgeHornerCameras, ge_ActorID_ActorHanson, gv_bridgeHansonCameras, null, gt_DebriefingTHanson02_2CameraChanged);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(190));
    gf_ResetActorToLocation(ge_ActorID_ActorHanson, PointFromId(237));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(504));
    CameraApplyInfo(1, CameraInfoFromId(498), 0.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHanson02_2Skippable_Init () {
    gt_DebriefingTHanson02_2Skippable = TriggerCreate("gt_DebriefingTHanson02_2Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THanson02_2 Camera Changed
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHanson02_2CameraChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto37100CA3_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_DebriefingTHanson02_2CameraChangedNoWait, true, false);
    auto37100CA3_val = ConversationDataActiveSound();
    if (auto37100CA3_val == "DebriefsRaynor00085") {
        gv_convoCameraChangeResult = false;
        CameraApplyInfo(1, CameraInfoFromId(498), 0.0, -1, 10, true);
    }
    else if (auto37100CA3_val == "DebriefsHanson00086") {
        gv_convoCameraChangeResult = false;
        CameraApplyInfo(1, CameraInfoFromId(499), 0.0, -1, 10, true);
    }
    else if (auto37100CA3_val == "DebriefsHorner00088") {
        gv_convoCameraChangeResult = false;
        gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(506));
        Wait(0.5, c_timeReal);
    }
    else if (auto37100CA3_val == "DebriefsHanson00090") {
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    }
    else if (auto37100CA3_val == "DebriefsRaynor00091") {
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHanson), "InstantStanding");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHanson02_2CameraChanged_Init () {
    gt_DebriefingTHanson02_2CameraChanged = TriggerCreate("gt_DebriefingTHanson02_2CameraChanged_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THanson02_2 Camera Changed No Wait
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHanson02_2CameraChangedNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoCEC5702F_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    autoCEC5702F_val = ConversationDataActiveSound();
    if (autoCEC5702F_val == "DebriefsHorner00088") {
        Wait(1.0, c_timeReal);
        CameraApplyInfo(1, CameraInfoFromId(515), 0.0, -1, 10, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHanson02_2CameraChangedNoWait_Init () {
    gt_DebriefingTHanson02_2CameraChangedNoWait = TriggerCreate("gt_DebriefingTHanson02_2CameraChangedNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner01
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomBridge);
    gv_debriefingTHorner01FirstPartCompleted = false;
    TriggerExecute(gt_DebriefingTHorner01_1, true, true);
    if ((gv_debriefingTHorner01FirstPartCompleted == true)) {
        TriggerExecute(gt_DebriefingTHorner01_2, true, true);
    }

    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    gf_DebriefingCleanup(ge_RoomID_RoomLab);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner01_Init () {
    gt_DebriefingTHorner01 = TriggerCreate("gt_DebriefingTHorner01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner01_1
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner01_1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RoomScenePrepare(ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorHorner, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    TriggerExecute(gt_DebriefingTHorner01_1Skippable, true, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner01_1_Init () {
    gt_DebriefingTHorner01_1 = TriggerCreate("gt_DebriefingTHorner01_1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner01_1 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner01_1Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, gv_bridgeHornerCameras, ge_ActorID_ActorNone, null, null, null);
    gf_ConvoPositionActors(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    CameraApplyInfo(1, CameraInfoFromId(52), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    ConversationDataStateSetValue("DebriefRoomChange|DebriefRoomChange01", 0);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    gv_debriefingTHorner01FirstPartCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner01_1Skippable_Init () {
    gt_DebriefingTHorner01_1Skippable = TriggerCreate("gt_DebriefingTHorner01_1Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner01_2
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner01_2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(ge_RoomID_RoomLab, false);
    gf_RoomScenePrepare(ge_RoomID_RoomLab, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomLab, ge_SceneType_Scene);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_ACTORLIGHTING, "Lighting 05 D", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorAdjutantConfederate, ge_ActorID_ActorNone, ge_RoomID_RoomLab, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate));
    TriggerExecute(gt_DebriefingTHorner01_2Skippable, true, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorAdjutantConfederate, ge_ActorID_ActorNone);
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner01_2_Init () {
    gt_DebriefingTHorner01_2 = TriggerCreate("gt_DebriefingTHorner01_2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner01_2 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner01_2Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner01MusicDebriefB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundLengthQuery(SoundLink("DebriefsConfederateAdjutant00050", 0));
    SoundLengthQueryWait();
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharConfederateAdjutant", gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate));
    gf_ConvoSetting(ge_RoomID_RoomLab, ge_ActorID_ActorRaynor, ge_ActorID_ActorAdjutantConfederate, gv_labAdjutantCameras, ge_ActorID_ActorNone, null, null, gt_DebriefingTHorner01_2CameraChange);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(345));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(346), 0.9));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), c_animNameDefault, "Stand B", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes B", c_animFlagPlayForever, c_animTimeDefault);
    CameraApplyInfo(1, CameraInfoFromId(347), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    ConversationDataStateSetValue("DebriefRoomChange|DebriefRoomChange01", 1);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner01_2Skippable_Init () {
    gt_DebriefingTHorner01_2Skippable = TriggerCreate("gt_DebriefingTHorner01_2Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner01_2 Camera Change
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner01_2CameraChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoB5888A35_val;
    const int auto262BB0BE_n = 2;
    int auto262BB0BE_i;
    const int autoAF084ABD_n = 2;
    int autoAF084ABD_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_DebriefingTHorner01_2CameraChangeNoWait, true, false);
    autoB5888A35_val = ConversationDataActiveSound();
    if (autoB5888A35_val == "DebriefsRaynor00049") {
        Wait(1.0, c_timeReal);
        CameraApplyInfo(1, CameraInfoFromId(347), 0.0, -1, 10, true);
    }
    else if (autoB5888A35_val == "DebriefsConfederateAdjutant00050") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes A", c_animFlagPlayForever, c_animTimeDefault);
        Wait(0.4, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes B", c_animFlagPlayForever, c_animTimeDefault);
        Wait(0.6, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), c_animNameDefault, "Fidget B", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), c_animNameDefault, 0.5);
        for (auto262BB0BE_i = 1; auto262BB0BE_i <= auto262BB0BE_n; auto262BB0BE_i += 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes A", c_animFlagPlayForever, c_animTimeDefault);
            Wait(0.2, c_timeGame);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes B", c_animFlagPlayForever, c_animTimeDefault);
            Wait(0.5, c_timeGame);
        }
        for (autoAF084ABD_i = 1; autoAF084ABD_i <= autoAF084ABD_n; autoAF084ABD_i += 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes A", c_animFlagPlayForever, c_animTimeDefault);
            Wait(0.4, c_timeGame);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes B", c_animFlagPlayForever, c_animTimeDefault);
            Wait(0.4, c_timeGame);
        }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes A", c_animFlagPlayForever, c_animTimeDefault);
        Wait(0.3, c_timeReal);
        CameraApplyInfo(1, CameraInfoFromId(364), (SoundLengthSync(SoundLink("DebriefsConfederateAdjutant00050", 0))), -1, 25, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner01_2CameraChange_Init () {
    gt_DebriefingTHorner01_2CameraChange = TriggerCreate("gt_DebriefingTHorner01_2CameraChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner01_2 Camera Change No Wait
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner01_2CameraChangeNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoACA1F85E_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_convoCameraChangeResult = false;
    autoACA1F85E_val = ConversationDataActiveSound();
    if (autoACA1F85E_val == "DebriefsRaynor00051") {
        CameraApplyInfo(1, CameraInfoFromId(348), 0.0, -1, 10, true);
    }
    else if (autoACA1F85E_val == "DebriefsRaynor00053") {
        CameraApplyInfo(1, CameraInfoFromId(349), 0.0, -1, 10, true);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes B", c_animFlagPlayForever, c_animTimeDefault);
        Wait(0.2, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes A", c_animFlagPlayForever, c_animTimeDefault);
        Wait(0.2, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes B", c_animFlagPlayForever, c_animTimeDefault);
        Wait(0.5, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes A", c_animFlagPlayForever, c_animTimeDefault);
        Wait(0.2, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes B", c_animFlagPlayForever, c_animTimeDefault);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner01_2CameraChangeNoWait_Init () {
    gt_DebriefingTHorner01_2CameraChangeNoWait = TriggerCreate("gt_DebriefingTHorner01_2CameraChangeNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner02
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomBridge);
    gv_debriefingTHorner02FirstPartCompleted = false;
    TriggerExecute(gt_DebriefingTHorner02_1, true, true);
    if ((gv_debriefingTHorner01FirstPartCompleted == true)) {
        TriggerExecute(gt_DebriefingTHorner02_2, true, true);
    }

    gf_DebriefingCleanup(ge_RoomID_RoomLab);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner02_Init () {
    gt_DebriefingTHorner02 = TriggerCreate("gt_DebriefingTHorner02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner02_1
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner02_1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RoomScenePrepare(ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    TriggerExecute(gt_DebriefingTHorner02_1Skippable, true, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner02_1_Init () {
    gt_DebriefingTHorner02_1 = TriggerCreate("gt_DebriefingTHorner02_1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner02_1 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner02_1Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, gv_bridgeHornerCameras, ge_ActorID_ActorNone, null, null, null);
    gf_ConvoPositionActors(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    CameraApplyInfo(1, CameraInfoFromId(52), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    ConversationDataStateSetValue("DebriefRoomChange|DebriefRoomChange01", 0);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    gv_debriefingTHorner01FirstPartCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner02_1Skippable_Init () {
    gt_DebriefingTHorner02_1Skippable = TriggerCreate("gt_DebriefingTHorner02_1Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner02_2
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner02_2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(ge_RoomID_RoomLab, false);
    gf_RoomScenePrepare(ge_RoomID_RoomLab, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomLab, ge_SceneType_Scene);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), gv_aNIMID_ACTORLIGHTING, "Lighting 05 D", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorAdjutantConfederate, ge_ActorID_ActorNone, ge_RoomID_RoomLab, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate));
    TriggerExecute(gt_DebriefingTHorner02_2Skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorAdjutantConfederate, ge_ActorID_ActorNone);
    gf_ActorSceneClearAll();
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye");
    gf_RoomSceneClearAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner02_2_Init () {
    gt_DebriefingTHorner02_2 = TriggerCreate("gt_DebriefingTHorner02_2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner02_2 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner02_2Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner02MusicDebriefB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundLengthQuery(SoundLink("DebriefsRaynor00002", 0));
    SoundLengthQuery(SoundLink("DebriefsConfederateAdjutant00003", 0));
    SoundLengthQuery(SoundLink("DebriefsDuke00028", 0));
    SoundLengthQuery(SoundLink("DebriefsKerrigan00029", 0));
    SoundLengthQuery(SoundLink("DebriefsArcturus00030", 0));
    SoundLengthQuery(SoundLink("DebriefsKerrigan00043", 0));
    SoundLengthQuery(SoundLink("DebriefsRaynor00044", 0));
    SoundLengthQuery(SoundLink("DebriefsArcturus00045", 0));
    SoundLengthQuery(SoundLink("DebriefsArcturus00046", 0));
    SoundLengthQueryWait();
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharFlashbackRaynor", gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate));
    ConversationDataRegisterUnit("Characters|CharFlashbackDuke", gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate));
    ConversationDataRegisterUnit("Characters|CharFlashbackKerrigan", gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate));
    ConversationDataRegisterUnit("Characters|CharFlashbackArcturus", gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate));
    gf_ConvoSetting(ge_RoomID_RoomLab, ge_ActorID_ActorRaynor, ge_ActorID_ActorAdjutantConfederate, null, ge_ActorID_ActorNone, null, null, gt_DebriefingTHorner02_2CameraChange);
    ConversationDataRegisterCamera("Cameras|Medium", "Characters|CharFlashbackRaynor", null, gt_ConvoCameraTriggerCharacter1Medium, false);
    ConversationDataRegisterCamera("Cameras|Medium", "Characters|CharFlashbackDuke", null, gt_ConvoCameraTriggerCharacter1Medium, false);
    ConversationDataRegisterCamera("Cameras|Medium", "Characters|CharFlashbackKerrigan", null, gt_ConvoCameraTriggerCharacter1Medium, false);
    ConversationDataRegisterCamera("Cameras|Medium", "Characters|CharFlashbackArcturus", null, gt_ConvoCameraTriggerCharacter1Medium, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes B", c_animFlagPlayForever, c_animTimeDefault);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(318));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(320), 0.9));
    CameraApplyInfo(1, CameraInfoFromId(319), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    ConversationDataStateSetValue("DebriefRoomChange|DebriefRoomChange01", 1);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner02_2Skippable_Init () {
    gt_DebriefingTHorner02_2Skippable = TriggerCreate("gt_DebriefingTHorner02_2Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner02_2 Camera Change
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner02_2CameraChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto19C94782_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_DebriefingTHorner02_2CameraChangeNoWait, true, false);
    auto19C94782_val = ConversationDataActiveSound();
    if (auto19C94782_val == "DebriefsConfederateAdjutant00003") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), c_animNameDefault, "Fidget C", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes A", c_animFlagPlayForever, c_animTimeDefault);
        Wait(1.0, c_timeGame);
    }
    else if (auto19C94782_val == "DebriefsConfederateAdjutant00016") {
        gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
        CameraApplyInfo(1, CameraInfoFromId(321), 0.0, -1, 10, true);
    }
    else if (auto19C94782_val == "DebriefsRaynor00047") {
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
        CameraApplyInfo(1, CameraInfoFromId(326), 0.0, -1, 10, true);
        Wait(1.0, c_timeReal);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner02_2CameraChange_Init () {
    gt_DebriefingTHorner02_2CameraChange = TriggerCreate("gt_DebriefingTHorner02_2CameraChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner02_2 Camera Change No Wait
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner02_2CameraChangeNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto8CF6BC48_val;
    const int autoEDC078E3_n = 3;
    int autoEDC078E3_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_convoCameraChangeResult = false;
    auto8CF6BC48_val = ConversationDataActiveSound();
    if (auto8CF6BC48_val == "DebriefsRaynor00002") {
        CameraApplyInfo(1, CameraInfoFromId(319), 0.0, -1, 10, true);
        CameraApplyInfo(1, CameraInfoFromId(344), (SoundLengthSync(SoundLink("DebriefsRaynor00002", 0)) + SoundLengthSync(SoundLink("DebriefsConfederateAdjutant00003", 0)) + 1.0), -1, 20, true);
    }
    else if (auto8CF6BC48_val == "DebriefsDuke00028") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes D", c_animFlagPlayForever, c_animTimeDefault);
    }
    else if (auto8CF6BC48_val == "DebriefsKerrigan00029") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes E", c_animFlagPlayForever, c_animTimeDefault);
        Wait(1.0, c_timeReal);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
        gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(320), 0.6));
        CameraApplyInfo(1, CameraInfoFromId(326), 0.0, -1, 10, true);
        Wait(0.5, c_timeReal);
        gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointFromId(320), 0.9));
        Wait(1.0, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Stand Angry", 0, c_animTimeDefault);
    }
    else if (auto8CF6BC48_val == "DebriefsArcturus00030") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes C", c_animFlagPlayForever, c_animTimeDefault);
    }
    else if (auto8CF6BC48_val == "DebriefsKerrigan00043") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes E", c_animFlagPlayForever, c_animTimeDefault);
        gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
        CameraApplyInfo(1, CameraInfoFromId(321), 0.0, -1, 10, true);
        CameraApplyInfo(1, CameraInfoFromId(322), (SoundLengthSync(SoundLink("DebriefsKerrigan00043", 0)) + SoundLengthSync(SoundLink("DebriefsRaynor00044", 0)) + SoundLengthSync(SoundLink("DebriefsArcturus00045", 0))), -1, 20, true);
    }
    else if (auto8CF6BC48_val == "DebriefsRaynor00044") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes F", c_animFlagPlayForever, c_animTimeDefault);
    }
    else if (auto8CF6BC48_val == "DebriefsArcturus00045") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes C", c_animFlagPlayForever, c_animTimeDefault);
        Wait((SoundLengthSync(SoundLink("DebriefsArcturus00045", 0)) - 1.0), c_timeReal);
        for (autoEDC078E3_i = 1; autoEDC078E3_i <= autoEDC078E3_n; autoEDC078E3_i += 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes A", c_animFlagPlayForever, 0.0);
            Wait(0.2, c_timeReal);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes C", c_animFlagPlayForever, 0.0);
            Wait(0.2, c_timeReal);
        }
    }
    else if (auto8CF6BC48_val == "DebriefsArcturus00046") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorAdjutantConfederate)), "HappyEye", "HappyEyes C", c_animFlagPlayForever, c_animTimeDefault);
        Wait((((SoundLengthSync(SoundLink("DebriefsArcturus00046", 0)) / 1.0)) - 3.5), c_timeReal);
        gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Stand Angry", 0, 1.0);
        CameraApplyInfo(1, CameraInfoFromId(326), 0.0, -1, 10, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner02_2CameraChangeNoWait_Init () {
    gt_DebriefingTHorner02_2CameraChangeNoWait = TriggerCreate("gt_DebriefingTHorner02_2CameraChangeNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner03
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomCantina);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorTychus, ge_RoomID_RoomCantina, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorTychus, ge_ActorID_ActorNone, ge_RoomID_RoomCantina, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharTychus", gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_ConvoSetting(ge_RoomID_RoomCantina, ge_ActorID_ActorRaynor, ge_ActorID_ActorTychus, gv_cantinaTychusCameras, ge_ActorID_ActorNone, null, null, null);
    gf_ConvoPositionActors(ge_RoomID_RoomCantina, ge_ActorID_ActorRaynor, ge_ActorID_ActorTychus, ge_ActorID_ActorNone);
    TriggerExecute(gt_DebriefingTHorner03Skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorTychus, ge_ActorID_ActorNone);
    gf_ActorSceneClearAll();
    gf_DebriefingCleanup(ge_RoomID_RoomCantina);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner03_Init () {
    gt_DebriefingTHorner03 = TriggerCreate("gt_DebriefingTHorner03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner03 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner03Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_UseConversationCamera(ge_RoomID_RoomCantina, ge_ActorID_ActorTychus, ge_ConvoCameraType_ConvoCameraMaster, gv_cantinaTychusCameras);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner03MusicDebriefA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner03Skippable_Init () {
    gt_DebriefingTHorner03Skippable = TriggerCreate("gt_DebriefingTHorner03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner05S
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner05S_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomBridge);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    TriggerExecute(gt_DebriefingTHorner05SSkippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorHanson, ge_ActorID_ActorHorner);
    gf_ActorSceneClearAll();
    gf_DebriefingCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner05S_Init () {
    gt_DebriefingTHorner05S = TriggerCreate("gt_DebriefingTHorner05S_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing THorner05S (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTHorner05SSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner05SMusicDebriefA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, gv_bridgeHornerCameras, ge_ActorID_ActorNone, null, null, null);
    gf_ConvoPositionActors(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    gf_UseConversationCamera(ge_RoomID_RoomBridge, ge_ActorID_ActorHorner, ge_ConvoCameraType_ConvoCameraRaynorMedium, gv_bridgeHornerCameras);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTHorner05SSkippable_Init () {
    gt_DebriefingTHorner05SSkippable = TriggerCreate("gt_DebriefingTHorner05SSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh01
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomBridge);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ActorScenePrepare(ge_ActorID_ActorTosh, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTosh));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    TriggerExecute(gt_DebriefingTTosh01Skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnlySubtle");
    gf_ConvoClearCamera(ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    gf_ActorSceneClearAll();
    gf_DebriefingCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh01_Init () {
    gt_DebriefingTTosh01 = TriggerCreate("gt_DebriefingTTosh01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh01 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh01Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh01MusicDebrief", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, gv_bridgeHornerCameras, ge_ActorID_ActorNone, null, null, null);
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar1Shoulder, CameraInfoFromId(558));
    ConversationDataRegisterCamera("Cameras|CustomCamera01", "Characters|CharRaynor", null, gt_DebriefingTTosh01RaynorCustomCamera, true);
    gf_ConvoPositionActors(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    gf_ResetActorToLocation(ge_ActorID_ActorTosh, PointFromId(54));
    gf_UseConversationCamera(ge_RoomID_RoomBridge, ge_ActorID_ActorHorner, ge_ConvoCameraType_ConvoCameraMaster, gv_bridgeHornerCameras);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh01Skippable_Init () {
    gt_DebriefingTTosh01Skippable = TriggerCreate("gt_DebriefingTTosh01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh01 Raynor Custom Camera
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh01RaynorCustomCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_DebriefingTTosh01RaynorCustomCameraNoWait, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh01RaynorCustomCamera_Init () {
    gt_DebriefingTTosh01RaynorCustomCamera = TriggerCreate("gt_DebriefingTTosh01RaynorCustomCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh01 Raynor Custom Camera No Wait
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh01RaynorCustomCameraNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorRaynor)), 1.0, (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorRaynor)) + 60.0)), 0.4));
    Wait(0.4, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(58), 0.0, -1, 10, true);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnlySubtle");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh01RaynorCustomCameraNoWait_Init () {
    gt_DebriefingTTosh01RaynorCustomCameraNoWait = TriggerCreate("gt_DebriefingTTosh01RaynorCustomCameraNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh02
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomBridge);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ActorScenePrepare(ge_ActorID_ActorTosh, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTosh));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    TriggerExecute(gt_DebriefingTTosh02Skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    gf_CloseDoor(ge_RoomID_RoomBridge, true);
    gf_ActorSceneClearAll();
    gf_DebriefingCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh02_Init () {
    gt_DebriefingTTosh02 = TriggerCreate("gt_DebriefingTTosh02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh02 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh02Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh02MusicDebrief", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    ConversationDataRegisterUnit("Characters|CharTosh", gf_ActorUnit(ge_ActorID_ActorTosh));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, null, ge_ActorID_ActorTosh, null, null, gt_DebriefingTTosh02ChangeCamera);
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraRaynorMedium, CameraInfoFromId(48));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(38));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(638));
    gf_ResetActorToLocation(ge_ActorID_ActorTosh, PointFromId(594));
    CameraApplyInfo(1, CameraInfoFromId(37), 0.0, -1, 10, true);
    Wait(0.2, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorTosh), "Ref_Head");
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTosh), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, "Custom Walk End", c_animFlagNonLooping, c_animTimeDefault);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh02Skippable_Init () {
    gt_DebriefingTTosh02Skippable = TriggerCreate("gt_DebriefingTTosh02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh02 Change Camera
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh02ChangeCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_DebriefingTTosh02ChangeCameraNoWait, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh02ChangeCamera_Init () {
    gt_DebriefingTTosh02ChangeCamera = TriggerCreate("gt_DebriefingTTosh02ChangeCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh02 Change Camera No Wait
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh02ChangeCameraNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoAF7221B0_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_convoCameraChangeResult = false;
    autoAF7221B0_val = ConversationDataActiveSound();
    if (autoAF7221B0_val == "DebriefsHorner00031") {
        Wait(0.2, c_timeReal);
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
        Wait(0.8, c_timeReal);
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTosh), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
        Wait(0.3, c_timeReal);
        CameraApplyInfo(1, CameraInfoFromId(639), 1.0, -1, 20, true);
        Wait((SoundLengthSync(SoundLink("DebriefsHorner00031", 0)) - 3.8), c_timeReal);
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTosh), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    }
    else if (autoAF7221B0_val == "DebriefsTosh00079") {
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTosh), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
        Wait(0.3, c_timeReal);
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorTosh), "Ref_Head");
        Wait(0.2, c_timeReal);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTosh)), c_animNameDefault, "Fidget 06", c_animFlagFullMatch, c_animTimeDefault);
        Wait(0.15, c_timeReal);
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorTosh), "Ref_Head");
        Wait(0.5, c_timeReal);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, "Fidget 01", c_animFlagFullMatch, c_animTimeDefault);
    }
    else if (autoAF7221B0_val == "DebriefsTosh00080") {
        CameraApplyInfo(1, CameraInfoFromId(640), 0.0, -1, 20, true);
    }
    else if (autoAF7221B0_val == "DebriefsRaynor00081") {
        CameraApplyInfo(1, CameraInfoFromId(641), 0.0, -1, 20, true);
        Wait((SoundLengthSync(SoundLink("DebriefsRaynor00081", 0)) / 2.0), c_timeReal);
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "SlowHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    }
    else if (autoAF7221B0_val == "DebriefsHorner00082") {
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
        CameraApplyInfo(1, CameraInfoFromId(655), 0.0, -1, 20, true);
        Wait(((SoundLengthSync(SoundLink("DebriefsHorner00082", 0)) / 2.0) - 2.0), c_timeReal);
        Wait(2.0, c_timeReal);
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    }
    else if (autoAF7221B0_val == "DebriefsTosh00083") {
        CameraApplyInfo(1, CameraInfoFromId(654), 0.0, -1, 20, true);
    }
    else if (autoAF7221B0_val == "DebriefsRaynor00084") {
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStandingSubtle", gf_ActorUnit(ge_ActorID_ActorTosh), "Ref_Head");
        CameraApplyInfo(1, CameraInfoFromId(657), 0.0, -1, 20, true);
    }
    else if (autoAF7221B0_val == "DebriefsTosh00089") {
        CameraApplyInfo(1, CameraInfoFromId(674), 0.0, -1, 20, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh02ChangeCameraNoWait_Init () {
    gt_DebriefingTTosh02ChangeCameraNoWait = TriggerCreate("gt_DebriefingTTosh02ChangeCameraNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh03B
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh03B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomBridge);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Convo);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    TriggerExecute(gt_DebriefingTTosh03BSkippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    gf_ActorSceneClearAll();
    gf_DebriefingCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh03B_Init () {
    gt_DebriefingTTosh03B = TriggerCreate("gt_DebriefingTTosh03B_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh03B (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh03BSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03BMusicDebrief", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, gv_bridgeHornerCameras, ge_ActorID_ActorNone, null, null, null);
    ConversationDataRegisterCamera("Cameras|CustomCamera01", "Characters|CharRaynor", null, gt_DebriefingTTosh03BRaynorCustomCamera, false);
    gf_ConvoPositionActors(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorNone);
    gf_UseConversationCamera(ge_RoomID_RoomBridge, ge_ActorID_ActorHorner, ge_ConvoCameraType_ConvoCameraChar1Medium, gv_bridgeHornerCameras);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh03BSkippable_Init () {
    gt_DebriefingTTosh03BSkippable = TriggerCreate("gt_DebriefingTTosh03BSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTosh03B Raynor Custom Camera
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTosh03BRaynorCustomCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(1, CameraInfoFromId(58), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTosh03BRaynorCustomCamera_Init () {
    gt_DebriefingTTosh03BRaynorCustomCamera = TriggerCreate("gt_DebriefingTTosh03BRaynorCustomCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus01
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomBridge);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorStetmann));
    TriggerExecute(gt_DebriefingTTychus01Skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorHanson, ge_ActorID_ActorHorner);
    gf_CloseDoor(ge_RoomID_RoomBridge, true);
    gf_ActorSceneClearAll();
    gf_DebriefingCleanup(ge_RoomID_RoomBridge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus01_Init () {
    gt_DebriefingTTychus01 = TriggerCreate("gt_DebriefingTTychus01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus01 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus01Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus01MusicDebrief", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CameraApplyInfo(1, CameraInfoFromId(834), 0.0, -1, 10, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(832));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Hover", c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorHorner));
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(830));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, "Custom Walk End", c_animFlagNonLooping, 0.0);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_OpenDoor(ge_RoomID_RoomBridge, false);
    CameraApplyInfo(1, CameraInfoFromId(834), 1.5, -1, 10, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Hover End", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(ge_ActorID_ActorHorner), libNtve_gf_AnimBlendTimeApply(0.25));
    Wait(0.5, c_timeReal);
    Wait(1.0, c_timeReal);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraRaynorMedium, CameraInfoFromId(838));
    gf_SetConvensationCamera(ge_ConvoCameraType_ConvoCameraChar1Medium, CameraInfoFromId(837));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, gv_bridgeHornerCameras, ge_ActorID_ActorNone, null, gt_DebriefingTTychus01HornerCustomCamera, gt_DebriefingTTychus01CameraChanged);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus01Skippable_Init () {
    gt_DebriefingTTychus01Skippable = TriggerCreate("gt_DebriefingTTychus01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus01 Horner Custom Camera
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus01HornerCustomCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(831));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, "Custom Walk End", c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), c_animNameDefault, 40.0);
    gf_CloseDoor(ge_RoomID_RoomBridge, false);
    CameraApplyInfo(1, CameraInfoFromId(839), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(837), 1.25, -1, 10, true);
    Wait(0.5, c_timeReal);
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(ge_ActorID_ActorHorner), libNtve_gf_AnimBlendTimeApply(0.25));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus01HornerCustomCamera_Init () {
    gt_DebriefingTTychus01HornerCustomCamera = TriggerCreate("gt_DebriefingTTychus01HornerCustomCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus01 Camera Changed
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus01CameraChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_DebriefingTTychus01CameraChangedNoWait, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus01CameraChanged_Init () {
    gt_DebriefingTTychus01CameraChanged = TriggerCreate("gt_DebriefingTTychus01CameraChanged_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus01 Camera Changed No Wait
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus01CameraChangedNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoD4C93C1F_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    autoD4C93C1F_val = ConversationDataActiveSound();
    if (autoD4C93C1F_val == "DebriefsRaynor00066") {
        gv_convoCameraChangeResult = false;
        Wait(1.0, c_timeReal);
        CameraApplyInfo(1, CameraInfoFromId(838), 0.0, -1, 10, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus01CameraChangedNoWait_Init () {
    gt_DebriefingTTychus01CameraChangedNoWait = TriggerCreate("gt_DebriefingTTychus01CameraChangedNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus02
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DebriefingPrepare(ge_RoomID_RoomLab);
    gf_HideAllActors(false);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomLab, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    TriggerExecute(gt_DebriefingTTychus02Skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    SoundStop(gv_briefingSoundPlayed, true);
    gv_briefingSoundPlayed = null;
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_KillModel(gv_debriefingTTychus02CrystalEffect);
    gf_ActorSceneClearAll();
    gf_DebriefingCleanup(ge_RoomID_RoomLab);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_labCrystal), gv_aNIMID_HIGHLIGHT);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_labCrystal), gv_aNIMID_HIGHLIGHT, 1.0);
    gf_StopAllTransmissionConversation();
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_PauseNewItemInfo(false);
    libCamp_gf_HideStoryUI(true, true);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    if ((gv_returned == true)) {
        gf_GoToRoom(ge_RoomID_RoomLab, false);
        gf_EnterRoom(ge_RoomID_RoomLab, false);
        Wait(0.5, c_timeReal);
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        gf_TurnClickablesOnOff(gv_clickables, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus02_Init () {
    gt_DebriefingTTychus02 = TriggerCreate("gt_DebriefingTTychus02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus02 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus02Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LabCrystalMusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(402));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(605), 0.55));
    SoundPlayAtPoint(SoundLink("Emitter_IhanCrystal_Loop", 0), PlayerGroupAll(), PointFromId(605), 0.5, 100.0, 0.0);
    gv_briefingSoundPlayed = SoundLastPlayed();
    CameraApplyInfo(1, CameraInfoFromId(409), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(410), (SoundLengthSync(SoundLink("ScriptedsceneslabRaynor00007", 0)) + 3.0), -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Talk 03", c_animFlagFullMatch | c_animFlagNonLooping, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedsceneslabRaynor00007", 0), 0.0, c_transmissionDurationAdd, true);
    CinematicFade(false, 0.75, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    CameraApplyInfo(1, CameraInfoFromId(407), 0.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
    CameraApplyInfo(1, CameraInfoFromId(406), (SoundLengthSync(SoundLink("ScriptedsceneslabRaynor00008", 0)) + 1.0), -1, 10, true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorRaynor));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedsceneslabRaynor00008", 0), 0.0, c_transmissionDurationAdd, true);
    CinematicFade(false, 0.75, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    CameraApplyInfo(1, CameraInfoFromId(119), 0.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
    CameraApplyInfo(1, CameraInfoFromId(408), (SoundLengthSync(SoundLink("ScriptedsceneslabRaynor00009", 0)) + 1.0), -1, 10, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Stand Talk Fidget", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedsceneslabRaynor00009", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus02Skippable_Init () {
    gt_DebriefingTTychus02Skippable = TriggerCreate("gt_DebriefingTTychus02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DebriefingTTychus04Preload, true, false);
    gf_DebriefingPrepare(ge_RoomID_RoomLab);
    TriggerExecute(gt_DebriefingTTychus04_1, true, true);
    TriggerExecute(gt_DebriefingTTychus04_2, true, true);
    gf_DebriefingCleanup(ge_RoomID_RoomBridge);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_Init () {
    gt_DebriefingTTychus04 = TriggerCreate("gt_DebriefingTTychus04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04 Preload
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DebriefingTTychus04_1Preload, true, false);
    TriggerExecute(gt_DebriefingTTychus04_2Preload, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04Preload_Init () {
    gt_DebriefingTTychus04Preload = TriggerCreate("gt_DebriefingTTychus04Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04_1
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(ge_RoomID_RoomLab, false);
    gf_RoomScenePrepare(ge_RoomID_RoomLab, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(false, gv_labConsole);
    gf_HideAllActors(false);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomLab, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_HideFullScreenImage(false);
    gv_debriefingTTychus04_1_Completed = false;
    TriggerExecute(gt_DebriefingTTychus04_1Skippable, true, true);
    if ((gv_debriefingTTychus04_1_Completed == true)) {
        CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }
    else {
        CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }
    gf_ConvoClearCamera(ge_ActorID_ActorNone, ge_ActorID_ActorNone);
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, 1.0);
    UnitRemove(gv_debriefingTTychus04_1_KerriganPhoto);
    gv_debriefingTTychus04_1_KerriganPhoto = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_1_Init () {
    gt_DebriefingTTychus04_1 = TriggerCreate("gt_DebriefingTTychus04_1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04_1 Preload
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_1Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ConversationDataStateSetValue("DebriefRoomChange|DebriefRoomChange01", 0);
    ConversationDataPreloadLines("Debriefs");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_1Preload_Init () {
    gt_DebriefingTTychus04_1Preload = TriggerCreate("gt_DebriefingTTychus04_1Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04_1 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_1Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus04MusicDebriefA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_ConvoSetting(ge_RoomID_RoomLab, ge_ActorID_ActorNone, ge_ActorID_ActorNone, null, ge_ActorID_ActorNone, null, null, gt_DebriefingTTychus04_1CameraChange);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(59));
    CameraApplyInfo(1, CameraInfoFromId(458), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(457), (SoundLengthSync(SoundLink("DebriefsValerian00034", 0)) + 2.0), -1, 20, true);
    ConversationDataStateSetValue("DebriefRoomChange|DebriefRoomChange01", 0);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    Wait(1.0, c_timeReal);
    gv_debriefingTTychus04_1_Completed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_1Skippable_Init () {
    gt_DebriefingTTychus04_1Skippable = TriggerCreate("gt_DebriefingTTychus04_1Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04_1 Camera Change
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_1CameraChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoB2A9180B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    autoB2A9180B_val = ConversationDataActiveSound();
    if (autoB2A9180B_val == "DebriefsValerian00010") {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus04MusicDebriefB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        UnitCreate(1, "SMKerriganPhoto", 0, 0, UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorRaynor)), UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorRaynor)));
        gv_debriefingTTychus04_1_KerriganPhoto = UnitLastCreated();
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_debriefingTTychus04_1_KerriganPhoto), c_animNameDefault, "Custom Talk 02", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_ShowHideUnit(gv_debriefingTTychus04_1_KerriganPhoto, false);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Talk 02", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        CameraApplyInfo(1, CameraInfoFromId(459), 0.0, -1, 10, true);
        CameraApplyInfo(1, CameraInfoFromId(461), (1.5 + (SoundLengthSync(SoundLink("DebriefsValerian00010", 0)) / 2.0)), -1, 20, true);
        Wait(1.0, c_timeReal);
        CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }
    else {
    }
    TriggerExecute(gt_DebriefingTTychus04_1CameraChangeNoWait, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_1CameraChange_Init () {
    gt_DebriefingTTychus04_1CameraChange = TriggerCreate("gt_DebriefingTTychus04_1CameraChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04_1 Camera Change No Wait
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_1CameraChangeNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto76F6FB62_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_convoCameraChangeResult = false;
    auto76F6FB62_val = ConversationDataActiveSound();
    if (auto76F6FB62_val == "DebriefsValerian00034") {
        Wait(3.0, c_timeReal);
        CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    }
    else if (auto76F6FB62_val == "DebriefsValerian00010") {
        Wait((SoundLengthSync(SoundLink("DebriefsValerian00010", 0)) / 2.0), c_timeGame);
        libNtve_gf_ShowHideUnit(gv_debriefingTTychus04_1_KerriganPhoto, true);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_debriefingTTychus04_1_KerriganPhoto), c_animNameDefault, "Custom Talk 02", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gv_debriefingTTychus04_1_KerriganPhoto), c_animNameDefault, 60.0);
        libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_debriefingTTychus04_1_KerriganPhoto), c_animNameDefault, 0.5);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Talk 02", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, 60.0);
        libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, 0.5);
        CameraApplyInfo(1, CameraInfoFromId(462), 0.0, -1, 10, true);
        CameraApplyInfo(1, CameraInfoFromId(463), ((SoundLengthSync(SoundLink("DebriefsValerian00010", 0)) / 2.0) + 1.0), -1, 15, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_1CameraChangeNoWait_Init () {
    gt_DebriefingTTychus04_1CameraChangeNoWait = TriggerCreate("gt_DebriefingTTychus04_1CameraChangeNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04_2
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(ge_RoomID_RoomBridge, false);
    gf_RoomScenePrepare(ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHorner, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHorner)), "Angry");
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHorner));
    gf_ActorScenePrepare(ge_ActorID_ActorTychus, ge_ActorID_ActorNone, ge_RoomID_RoomBridge, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_ResetActorToLocation(ge_ActorID_ActorHall, PointFromId(189));
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHall));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorBridgeBG1));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorBridgeBG2));
    gf_HideFullScreenImage(false);
    TriggerExecute(gt_DebriefingTTychus04_2Skippable, true, true);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ConvoClearCamera(ge_ActorID_ActorHanson, ge_ActorID_ActorHorner);
    gf_CloseDoor(ge_RoomID_RoomBridge, true);
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_2_Init () {
    gt_DebriefingTTychus04_2 = TriggerCreate("gt_DebriefingTTychus04_2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04_2 Preload
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_2Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ConversationDataStateSetValue("DebriefRoomChange|DebriefRoomChange01", 1);
    ConversationDataPreloadLines("Debriefs");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_2Preload_Init () {
    gt_DebriefingTTychus04_2Preload = TriggerCreate("gt_DebriefingTTychus04_2Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04_2 (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_2Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus04MusicDebriefC", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(ge_ActorID_ActorRaynor));
    ConversationDataRegisterUnit("Characters|CharHorner", gf_ActorUnit(ge_ActorID_ActorHorner));
    ConversationDataRegisterUnit("Characters|CharTychus", gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_ConvoSetting(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, gv_bridgeHornerCameras, ge_ActorID_ActorTychus, gv_bridgeTychusCameras, null, gt_DebriefingTTychus04_2CameraChange);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(906));
    gf_ResetActorToLocation(ge_ActorID_ActorHorner, PointFromId(903));
    gf_ResetActorToLocation(ge_ActorID_ActorTychus, PointFromId(904));
    CameraApplyInfo(1, CameraInfoFromId(905), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(0.3, c_timeReal);
    gf_OpenDoor(ge_RoomID_RoomBridge, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.4, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHorner), "MedStandingSubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Target");
    Wait(0.3, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorTychus), "MedHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    Wait(0.3, c_timeReal);
    ConversationDataStateSetValue("DebriefRoomChange|DebriefRoomChange01", 1);
    ConversationDataRun("Debriefs", PlayerGroupAll(), c_conversationSkipSimple, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_2Skippable_Init () {
    gt_DebriefingTTychus04_2Skippable = TriggerCreate("gt_DebriefingTTychus04_2Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04_2 Camera Change
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_2CameraChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_DebriefingTTychus04_2CameraChangeNoWait, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_2CameraChange_Init () {
    gt_DebriefingTTychus04_2CameraChange = TriggerCreate("gt_DebriefingTTychus04_2CameraChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TTychus04_2 Camera Change No Wait
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTTychus04_2CameraChangeNoWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto2C9BAFAB_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    auto2C9BAFAB_val = ConversationDataActiveSound();
    if (auto2C9BAFAB_val == "DebriefsHorner00012") {
        gv_convoCameraChangeResult = false;
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorHorner), "Ref_Head");
        Wait(1.5, c_timeReal);
        gf_CloseDoor(ge_RoomID_RoomBridge, false);
        Wait(1.0, c_timeReal);
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(134));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk End", c_animFlagNonLooping, 0.0);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, 60.0);
        CameraApplyInfo(1, CameraInfoFromId(183), 0.0, -1, 10, true);
        gf_ResetActorToLocation(ge_ActorID_ActorTychus, gf_ActorPoint(ge_RoomID_RoomBridge, gf_ConvoGetActorLocatioinActor(ge_RoomID_RoomBridge, ge_ActorID_ActorTychus), ge_ActorID_ActorRaynor));
    }
    else if (auto2C9BAFAB_val == "DebriefsTychus00013") {
        gv_convoCameraChangeResult = false;
        Wait(0.3, c_timeReal);
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedStanding", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
        Wait(0.6, c_timeReal);
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorHorner), "InstantStanding");
        libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorTychus), "InstantStanding");
        gf_ConvoPositionActors(ge_RoomID_RoomBridge, ge_ActorID_ActorRaynor, ge_ActorID_ActorHorner, ge_ActorID_ActorTychus);
        gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(901));
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
        CameraApplyInfo(1, CameraInfoFromId(464), 0.0, -1, 10, true);
    }
    else if (auto2C9BAFAB_val == "DebriefsRaynor00015") {
        gv_convoCameraChangeResult = false;
        CameraApplyInfo(1, CameraInfoFromId(902), 0.0, -1, 10, true);
    }
    else if (auto2C9BAFAB_val == "DebriefsHorner00054") {
        gv_convoCameraChangeResult = false;
        Wait(0.8, c_timeReal);
        gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedStanding", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorRaynor)), 1.0, (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorRaynor)) + -15.0)), 0.7));
        Wait(0.6, c_timeReal);
        CameraApplyInfo(1, CameraInfoFromId(580), 0.0, -1, 10, true);
    }
    else if (auto2C9BAFAB_val == "DebriefsRaynor00055") {
        gv_convoCameraChangeResult = false;
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Talk A", c_animFlagNonLooping, c_animTimeDefault);
        CameraApplyInfo(1, CameraInfoFromId(902), 0.0, -1, 10, true);
    }
    else if (auto2C9BAFAB_val == "DebriefsTychus00056") {
        gv_convoCameraChangeResult = false;
        Wait(1.0, c_timeReal);
        gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedStanding", gf_ActorUnit(ge_ActorID_ActorTychus), "Ref_Head");
        Wait(0.6, c_timeReal);
        CameraApplyInfo(1, CameraInfoFromId(464), 0.0, -1, 10, true);
    }
    else if (auto2C9BAFAB_val == "DebriefsRaynor00057") {
        gv_convoCameraChangeResult = false;
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Talk B", c_animFlagNonLooping, c_animTimeDefault);
        CameraApplyInfo(1, CameraInfoFromId(209), 0.0, -1, 10, true);
        Wait(2.5, c_timeReal);
        Wait(0.5, c_timeReal);
        gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedStanding", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(ge_ActorID_ActorRaynor)), 1.0, (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorRaynor)) + -15.0)), 0.7));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTTychus04_2CameraChangeNoWait_Init () {
    gt_DebriefingTTychus04_2CameraChangeNoWait = TriggerCreate("gt_DebriefingTTychus04_2CameraChangeNoWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TZeratul04
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTZeratul04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing("TZeratul04", ge_RoomID_RoomLab, gt_DebriefingTZeratul04Skippable, gt_DebriefingTZeratul04Preload);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    gf_BriefingTZeratulClear();
    gf_DebriefingCleanup(ge_RoomID_RoomVoid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTZeratul04_Init () {
    gt_DebriefingTZeratul04 = TriggerCreate("gt_DebriefingTZeratul04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TZeratul04 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTZeratul04Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__Room = ge_RoomID_RoomNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = ge_RoomID_RoomLab;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul04MusicDebrief", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_CustomFadeInOut(false, 0.0, true);
    gf_BriefingTZeratulCreateScreen("TZeratul03");
    UISetWorldVisible(PlayerGroupAll(), false);
    gf_BriefingTZeratulVideoFadeIn();
    gf_BriefingTZeratulPlayVideo("DebriefingTZeratul04_00", false);
    gf_CustomFadeInOut(true, 2.5, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("DebriefsZeratul00076", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingTZeratulPlayVideo("DebriefingTZeratul04_01", false);
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("DebriefsZeratul00077", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingTZeratulVideoFadeOut();
    libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink("DebriefsZeratul00078", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gf_CustomFadeInOut(false, 1.5, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTZeratul04Skippable_Init () {
    gt_DebriefingTZeratul04Skippable = TriggerCreate("gt_DebriefingTZeratul04Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TZeratul04 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTZeratul04PreloadRough_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(ge_RoomID_RoomLab, true);
    libNtve_gf_PreloadModelObject("SMZeratulBriefingBorder", false);
    PreloadMovie("Assets\\Textures\\debriefing_video_tzeratul04_00.ogv", false);
    ConversationDataPreloadLines("Debriefs");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTZeratul04PreloadRough_Init () {
    gt_DebriefingTZeratul04PreloadRough = TriggerCreate("gt_DebriefingTZeratul04PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debriefing TZeratul04 Preload
//--------------------------------------------------------------------------------------------------
bool gt_DebriefingTZeratul04Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DebriefingTZeratul04PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\debriefing_video_tzeratul04_01.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebriefingTZeratul04Preload_Init () {
    gt_DebriefingTZeratul04Preload = TriggerCreate("gt_DebriefingTZeratul04Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScriptScene - Lab Intro
//--------------------------------------------------------------------------------------------------
bool gt_ScriptSceneLabIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    gf_StopAllTransmissionConversation();
    gf_HideFullScreenImage(false);
    gf_Debug_RoomChangeTimerStart2(ge_RoomID_RoomLab, false);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceScriptedScene);
    gf_SetIdleState(ge_IdleState_Busy);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_GoToRoom(ge_RoomID_RoomLab, false);
    gf_HideAllActors(false);
    gf_RoomScenePrepare(ge_RoomID_RoomLab, ge_SceneType_Scene);
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomLab, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorStetmann, ge_ActorID_ActorNone, ge_RoomID_RoomLab, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorStetmann));
    TriggerExecute(gt_ScriptSceneLabIntroSkippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_CloseDoor(ge_RoomID_RoomLab, true);
    gf_ActorSceneClearAll();
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorStetmann), "Cover", false);
    gf_RoomSceneClearAll();
    gf_StopAllTransmissionConversation();
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_GoToRoom(ge_RoomID_RoomLab, false);
    gf_EnterRoom(ge_RoomID_RoomLab, false);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    TriggerExecute(gt_TipLabResearch, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScriptSceneLabIntro_Init () {
    gt_ScriptSceneLabIntro = TriggerCreate("gt_ScriptSceneLabIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScriptScene - Lab Intro (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_ScriptSceneLabIntroSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(125));
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorStetmann), "Cover", true);
    gf_ResetActorToLocation(ge_ActorID_ActorStetmann, PointFromId(129));
    CameraApplyInfo(1, CameraInfoFromId(130), 0.0, -1, 10, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorStetmann)), c_animNameDefault, "Custom Fidget", 0, 0.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LabResearchMusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_OpenDoor(ge_RoomID_RoomLab, false);
    Wait(0.5, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk Start", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorStetmann), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    Wait(0.7, c_timeGame);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding", gf_ActorUnit(ge_ActorID_ActorStetmann), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorStetmann), false, false, "Custom Talk A"), c_invalidPortraitId, SoundLink("ScriptedsceneslabStetmann00001", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    gf_CloseDoor(ge_RoomID_RoomLab, false);
    UnitSetFacing(gf_ActorUnit(ge_ActorID_ActorStetmann), (UnitGetFacing(gf_ActorUnit(ge_ActorID_ActorStetmann)) + 15.0), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(146), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 1.26);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedsceneslabRaynor00002", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(138));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk End", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorStetmann), "InstantStanding");
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    CameraApplyInfo(1, CameraInfoFromId(380), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(143), 1.75, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_ResetActorToLocation(ge_ActorID_ActorStetmann, PointFromId(139));
    CameraApplyInfo(1, CameraInfoFromId(141), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorStetmann), false, false, "Custom Talk B"), c_invalidPortraitId, SoundLink("ScriptedsceneslabStetmann00003", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedsceneslabRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(152), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorStetmann), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedsceneslabStetmann00005", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(356), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedsceneslabRaynor00006", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScriptSceneLabIntroSkippable_Init () {
    gt_ScriptSceneLabIntroSkippable = TriggerCreate("gt_ScriptSceneLabIntroSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScriptScene - Merc Intro
//--------------------------------------------------------------------------------------------------
bool gt_ScriptSceneMercIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    unitgroup auto63C44504_g;
    int auto63C44504_u;
    unit auto63C44504_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    gf_StopAllTransmissionConversation();
    gf_HideFullScreenImage(false);
    gf_Debug_RoomChangeTimerStart2(ge_RoomID_RoomCantina, false);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceScriptedScene);
    gf_SetIdleState(ge_IdleState_Busy);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_GoToRoom(ge_RoomID_RoomCantina, false);
    libCamp_gf_UpdateRoomChangePanel();
    gf_RoomScenePrepare(ge_RoomID_RoomCantina, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorTychus));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorTosh));
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomCantina, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorHillMercContact, ge_ActorID_ActorNone, ge_RoomID_RoomCantina, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorHillMercContact));
    libNtve_gf_PreloadUnit("SMAnnabelle", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "SMAnnabelle", 0, 0, PointFromId(958));
    gv_scriptSceneMercIntroAnnabelle = UnitLastCreated();
    UnitGroupAdd(lv_group, UnitLastCreated());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Talk", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PreloadUnit("SMBralik", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "SMBralik", 0, 0, PointFromId(959));
    UnitGroupAdd(lv_group, UnitLastCreated());
    gf_TurnAnimationPropertiesOnOff(UnitLastCreated(), "Cover", true, 0.0);
    libNtve_gf_PreloadUnit("SMHall", false);
    libNtve_gf_CreateUnitsAtPoint2(1, "SMHall", 0, 0, PointFromId(960));
    UnitGroupAdd(lv_group, UnitLastCreated());
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "CantinaMusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_ScriptSceneMercIntroSkippable, true, true);
    CinematicFade(false, 0.2, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    gf_CloseDoor(ge_RoomID_RoomCantina, true);
    gf_ActorSceneClearAll();
    auto63C44504_g = lv_group;
    auto63C44504_u = UnitGroupCount(auto63C44504_g, c_unitCountAll);
    for (;; auto63C44504_u -= 1) {
        auto63C44504_var = UnitGroupUnitFromEnd(auto63C44504_g, auto63C44504_u);
        if (auto63C44504_var == null) { break; }
        UnitRemove(auto63C44504_var);
    }
    gf_RoomSceneClearAll();
    gf_StopAllTransmissionConversation();
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    UISetCursorVisible(PlayerGroupAll(), true);
    gf_ScriptSceneMercIntroDisplayUI(false);
    UISetCursorVisible(PlayerGroupAll(), false);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    libCamp_gf_HideStoryUI(true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScriptSceneMercIntro_Init () {
    gt_ScriptSceneMercIntro = TriggerCreate("gt_ScriptSceneMercIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScriptScene - Merc Intro (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_ScriptSceneMercIntroSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(156));
    gf_ResetActorToLocation(ge_ActorID_ActorHillMercContact, PointFromId(70));
    CameraApplyInfo(1, CameraInfoFromId(165), 0.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gf_OpenDoor(ge_RoomID_RoomCantina, false);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gf_ActorUnit(ge_ActorID_ActorRaynor), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(170)), c_orderQueueReplace);
    Wait(1.5, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHillMercContact), "MedHeadOnlySubtle", libNtve_gf_PointWithZOffset(PointFromId(162), 0.7));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHillMercContact)), c_animNameDefault, "Talk Cover Four", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(507), 0.0, -1, 10, true);
    gf_CloseDoor(ge_RoomID_RoomCantina, false);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHillMercContact), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedscenesCantinaHill00001", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_scriptSceneMercIntroAnnabelle), c_animNameDefault, "Fidget 04", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.5);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(105));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk End", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, 30.0);
    Wait(0.5, c_timeReal);
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), libNtve_gf_AnimBlendTimeApply(0.25));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorHillMercContact), "InstantHeadOnlySubtle", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    CameraApplyInfo(1, CameraInfoFromId(198), 0.0, -1, 10, true);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "FastStanding", gf_ActorUnit(ge_ActorID_ActorHillMercContact), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedscenesCantinaRaynor00002", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHillMercContact)), c_animNameDefault, "Stand Cover Listen", 0, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(168), 0.0, -1, 10, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(105));
    gf_ResetActorToLocation(ge_ActorID_ActorHillMercContact, PointFromId(167));
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorHillMercContact)), c_animNameDefault);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorHillMercContact), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedscenesCantinaHill00003", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(199), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedscenesCantinaRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScriptSceneMercIntroSkippable_Init () {
    gt_ScriptSceneMercIntroSkippable = TriggerCreate("gt_ScriptSceneMercIntroSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScriptScene - Armory Intro
//--------------------------------------------------------------------------------------------------
bool gt_ScriptSceneArmoryIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_armoryStage02;
    unitgroup lv_bGGroup;

    // Automatic Variable Declarations
    unitgroup autoD0829B89_g;
    int autoD0829B89_u;
    unit autoD0829B89_var;

    // Variable Initialization
    lv_bGGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    gf_StopAllTransmissionConversation();
    gf_HideFullScreenImage(false);
    gf_Debug_RoomChangeTimerStart2(ge_RoomID_RoomArmory, false);
    gf_SetWorldMode(ge_WorldMode_WorldModeSubspaceScriptedScene);
    gf_SetIdleState(ge_IdleState_Busy);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Cinematic);
    gf_GoToRoom(ge_RoomID_RoomArmory, false);
    gf_RoomScenePrepare(ge_RoomID_RoomArmory, ge_SceneType_Scene);
    gf_HideAllActors(false);
    UnitCreate(1, "SMHyperionArmoryStage1Set02", 0, 0, UnitGetPosition(gf_RoomUnit(ge_RoomID_RoomArmory)), UnitGetFacing(gf_RoomUnit(ge_RoomID_RoomArmory)));
    lv_armoryStage02 = UnitLastCreated();
    libNtve_gf_PreloadUnit(UnitGetType(gf_ActorUnit(ge_ActorID_ActorKachinsky)), false);
    libNtve_gf_PreloadUnit(UnitGetType(gf_ActorUnit(ge_ActorID_ActorEarl)), false);
    libNtve_gf_PreloadUnit(UnitGetType(gf_ActorUnit(ge_ActorID_ActorAnnabelle)), false);
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(gf_ActorUnit(ge_ActorID_ActorKachinsky)), 0, 0, PointFromId(660));
    UnitGroupAdd(lv_bGGroup, UnitLastCreated());
    gv_armoryIntroBGUnit_Walkup = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(gf_ActorUnit(ge_ActorID_ActorEarl)), 0, 0, PointFromId(661));
    UnitGroupAdd(lv_bGGroup, UnitLastCreated());
    gv_armoryIntroBGUnit_Walk = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1045)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(gf_ActorUnit(ge_ActorID_ActorEarl)), 0, 0, PointFromId(662));
    UnitGroupAdd(lv_bGGroup, UnitLastCreated());
    gv_armoryIntroBGUnit_Wave = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(gf_ActorUnit(ge_ActorID_ActorAnnabelle)), 0, 0, PointFromId(665));
    UnitGroupAdd(lv_bGGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(gf_ActorUnit(ge_ActorID_ActorKachinsky)), 0, 0, PointFromId(666));
    UnitGroupAdd(lv_bGGroup, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    gv_armoryIntroBGUnit_Fidget = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(gf_ActorUnit(ge_ActorID_ActorAnnabelle)), 0, 0, PointFromId(664));
    UnitGroupAdd(lv_bGGroup, UnitLastCreated());
    gf_ActorScenePrepare(ge_ActorID_ActorRaynor, ge_ActorID_ActorNone, ge_RoomID_RoomArmory, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_ActorScenePrepare(ge_ActorID_ActorSwann, ge_ActorID_ActorNone, ge_RoomID_RoomArmory, ge_SceneType_Scene);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorSwann));
    ConversationDataPreloadLines("ScriptedScenesArmory");
    SoundLengthQueryWait();
    TriggerExecute(gt_ScriptSceneArmoryIntroSkippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    CinematicFade(false, 0.2, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    UnitRemove(lv_armoryStage02);
    autoD0829B89_g = lv_bGGroup;
    autoD0829B89_u = UnitGroupCount(autoD0829B89_g, c_unitCountAll);
    for (;; autoD0829B89_u -= 1) {
        autoD0829B89_var = UnitGroupUnitFromEnd(autoD0829B89_g, autoD0829B89_u);
        if (autoD0829B89_var == null) { break; }
        UnitRemove(autoD0829B89_var);
    }
    libNtve_gf_SendActorMessageToUnit(gf_RoomUnit(ge_RoomID_RoomArmory), "AnimSetPaused Default 0");
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_RoomUnit(ge_RoomID_RoomArmory), 0.0);
    gf_StopAllTransmissionConversation();
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    gf_SetAllSoundChannelVolumesStoryMode(libNtve_ge_VolumeChannelMode_Game);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_GoToRoom(ge_RoomID_RoomArmory, false);
    gf_EnterRoom(ge_RoomID_RoomArmory, false);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_SetWorldMode(ge_WorldMode_WorldModeGlobal);
    gf_SetIdleState(ge_IdleState_Idle);
    TriggerExecute(gt_TipArmoryConsole, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScriptSceneArmoryIntro_Init () {
    gt_ScriptSceneArmoryIntro = TriggerCreate("gt_ScriptSceneArmoryIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScriptScene - Armory Intro (Skippable)
//--------------------------------------------------------------------------------------------------
bool gt_ScriptSceneArmoryIntroSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(246));
    gf_ResetActorToLocation(ge_ActorID_ActorSwann, PointFromId(245));
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorSwann), "InstantStanding", libNtve_gf_PointWithZOffset(PointFromId(1000), 0.4));
    CameraApplyInfo(1, CameraInfoFromId(249), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ArmoryMusicIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(1.5, c_timeReal);
    SoundPlayAtPoint(SoundLink("ArmoryIntro_DoorOpen", -1), PlayerGroupAll(), PointFromId(399), 0.0, 100.0, 0.0);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorSwann), "MedStanding", libNtve_gf_PointWithZOffset(PointFromId(778), 0.5));
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(246));
    Wait(0.75, c_timeGame);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorSwann), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesArmorySwann00003", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 3.5);
    gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection(gf_ActorUnit(ge_ActorID_ActorRaynor), PointFromId(783), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomArmory)), c_animNameDefault, "Stand Morph", c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(ge_RoomID_RoomArmory)), c_animNameDefault, 1.0);
    libNtve_gf_SendActorMessageToUnit(gf_RoomUnit(ge_RoomID_RoomArmory), "AnimSetPaused Default");
    Wait(0.5, c_timeReal);
    gf_ResetActorToLocation(ge_ActorID_ActorSwann, PointFromId(1001));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorSwann), "InstantStanding", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    UnitIssueOrder(gv_armoryIntroBGUnit_Walk, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(534)), c_orderQueueReplace);
    CameraApplyInfo(1, CameraInfoFromId(989), 0.0, -1, 10, true);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(990), (2.5 + SoundLengthSync(SoundLink("ScriptedScenesArmoryRaynor00004", 0))), -1, 10, true);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "MedHeadOnly", gf_ActorUnit(ge_ActorID_ActorSwann), "Ref_Head");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_armoryIntroBGUnit_Wave), c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SendActorMessageToUnit(gf_RoomUnit(ge_RoomID_RoomArmory), "AnimSetPaused Default 0");
    SoundPlayAtPoint(SoundLink("ArmoryIntro_DoorsClose", -1), PlayerGroupAll(), PointFromId(399), 0.0, 100.0, 0.0);
    Wait(2.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_armoryIntroBGUnit_Walkup), c_animNameDefault, "Fidget 02", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(ge_ActorID_ActorSwann), "InstantStanding", gf_ActorUnit(ge_ActorID_ActorRaynor), "Ref_Head");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesArmoryRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(249), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorSwann), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesArmorySwann00005", 0), 0.0, c_transmissionDurationAdd, true);
    gf_ResetActorToLocation(ge_ActorID_ActorRaynor, PointFromId(233));
    gf_ResetActorToLocation(ge_ActorID_ActorSwann, PointFromId(241));
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(ge_ActorID_ActorRaynor), "InstantStanding");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, "Custom Walk End", c_animFlagNonLooping, 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorRaynor)), c_animNameDefault, 20.0);
    CameraApplyInfo(1, CameraInfoFromId(635), 0.0, -1, 10, true);
    CameraLookAt(1, CameraInfoGetTarget(CameraInfoFromId(997)), 3.0, -1, 20);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesArmoryRaynor00010", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 2.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorSwann), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesArmorySwann00001", 0), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorSwann)), c_animNameDefault, "Fidget 10", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_armoryIntroBGUnit_Fidget), c_animNameDefault, "Fidget B", c_animFlagNonLooping, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorRaynor));
    gf_RemoveVisibleUnit(false, gf_ActorUnit(ge_ActorID_ActorSwann));
    CameraApplyInfo(1, CameraInfoFromId(1002), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesArmoryRaynor00006", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_armoryIntroBGUnit_Wave), c_animNameDefault, "Fidget 04", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorSwann), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesArmorySwann00007", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynor), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesArmoryRaynor00008", 0), 0.0, c_transmissionDurationAdd, true);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(ge_ActorID_ActorSwann));
    CameraApplyInfo(1, CameraInfoFromId(1003), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorSwann), false, false, "Talk"), c_invalidPortraitId, SoundLink("ScriptedScenesArmorySwann00009", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScriptSceneArmoryIntroSkippable_Init () {
    gt_ScriptSceneArmoryIntroSkippable = TriggerCreate("gt_ScriptSceneArmoryIntroSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Back
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsBack2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gv_tVNewsCurrentThread);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsBack2_Init () {
    gt_TVNewsBack2 = TriggerCreate("gt_TVNewsBack2_Func");
    TriggerEnable(gt_TVNewsBack2, false);
    TriggerAddEventMouseClicked(gt_TVNewsBack2, c_playerAny, c_mouseButtonNone, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor00
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsMarSara2("TStory01", gt_TVNewsRaynor00Skippable);
    gf_TVNewsSetWatched("TStory01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor00_Init () {
    gt_TVNewsRaynor00 = TriggerCreate("gt_TVNewsRaynor00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor00 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor00Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(477), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(416), 30.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_newsreport_traynor00_00");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 24, c_textureVideoPlayFlagSynced, 0, ""));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Lockwell00001", -1), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Arcturus00005", -1), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Lockwell00002", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(481), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(427), 0.0, -1, 10, true);
    CameraShakeStart(1, c_cameraPositionEye, c_cameraDirectionZ, 0.01, 0.009, 0.0, 100.0);
    CameraShakeStart(1, c_cameraPositionEye, c_cameraDirectionY, 0.01, 0.0062, 0.0, 100.0);
    CameraShakeStart(1, c_cameraPositionEye, c_cameraDirectionX, 0.01, 0.005, 0.0, 100.0);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.02, 0.009, 0.0, 100.0);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionY, 0.02, 0.0062, 0.0, 100.0);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionX, 0.02, 0.005, 0.0, 100.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Lockwell00003", -1), 0.0, c_transmissionDurationSub, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Lockwell00008", -1), 0.0, c_transmissionDurationSub, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Lockwell00004", -1), 0.0, c_transmissionDurationSub, true);
    CameraApplyInfo(1, CameraInfoFromId(472), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Raynor00007", -1), 0.0, c_transmissionDurationSub, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor00Skippable_Init () {
    gt_TVNewsRaynor00Skippable = TriggerCreate("gt_TVNewsRaynor00Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor00 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor00Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_traynor01_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor00Preload_Init () {
    gt_TVNewsRaynor00Preload = TriggerCreate("gt_TVNewsRaynor00Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor01
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsMarSara2("TRaynor01", gt_TVNewsRaynor01Skippable);
    gf_TVNewsSetWatched("TRaynor01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor01_Init () {
    gt_TVNewsRaynor01 = TriggerCreate("gt_TVNewsRaynor01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor01Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), "C");
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(gf_ActorUnit(ge_ActorID_ActorTychus)), "Cover");
    CameraApplyInfo(1, CameraInfoFromId(429), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(468), 20.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_newsreport_traynor01_00");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor01Skippable_Init () {
    gt_TVNewsRaynor01Skippable = TriggerCreate("gt_TVNewsRaynor01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_traynor01_00.ogv", false);
    libNtve_gf_PreloadSoundObject("TVTRaynor01Raynor00005", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor01Preload_Init () {
    gt_TVNewsRaynor01Preload = TriggerCreate("gt_TVNewsRaynor01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor01 Event02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor01Event02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(247), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(470), 15.0, -1, 10, true);
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor01Event02_Init () {
    gt_TVNewsRaynor01Event02 = TriggerCreate("gt_TVNewsRaynor01Event02_Func");
    TriggerAddEventMovieFunction(gt_TVNewsRaynor01Event02, c_playerAny, "NewsRa1_02");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor01 Event05
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor01Event05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(482), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTRaynor01Raynor00005", -1), 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor01Event05_Init () {
    gt_TVNewsRaynor01Event05 = TriggerCreate("gt_TVNewsRaynor01Event05_Func");
    TriggerAddEventMovieFunction(gt_TVNewsRaynor01Event05, c_playerAny, "NewsRa1_05");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsMarSara2("TRaynor02", gt_TVNewsRaynor02Skippable);
    gf_TVNewsSetWatched("TRaynor02");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor02_Init () {
    gt_TVNewsRaynor02 = TriggerCreate("gt_TVNewsRaynor02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor02Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(429), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(468), 20.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_newsreport_traynor02_00");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor02Skippable_Init () {
    gt_TVNewsRaynor02Skippable = TriggerCreate("gt_TVNewsRaynor02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_traynor02_00.ogv", false);
    libNtve_gf_PreloadSoundObject("TVTRaynor02Raynor00003", false);
    libNtve_gf_PreloadSoundObject("TVTRaynor02Tychus00002", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor02Preload_Init () {
    gt_TVNewsRaynor02Preload = TriggerCreate("gt_TVNewsRaynor02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor02 Event03
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor02Event03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(247), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(470), 5.0, -1, 10, true);
    Wait(4.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor02Event03_Init () {
    gt_TVNewsRaynor02Event03 = TriggerCreate("gt_TVNewsRaynor02Event03_Func");
    TriggerAddEventMovieFunction(gt_TVNewsRaynor02Event03, c_playerAny, "NewsRa2_03");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor02 Event05
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor02Event05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(482), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(421), false, false, ""), c_invalidPortraitId, SoundLink("TVTRaynor02Tychus00002", -1), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.2);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor02Raynor00003", -1), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(429), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(468), 20.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor02Event05_Init () {
    gt_TVNewsRaynor02Event05 = TriggerCreate("gt_TVNewsRaynor02Event05_Func");
    TriggerAddEventMovieFunction(gt_TVNewsRaynor02Event05, c_playerAny, "NewsRa2_05");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson01
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("THanson01", gt_TVNewsHanson01Skippable);
    gf_TVNewsSetWatched("THanson01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson01_Init () {
    gt_TVNewsHanson01 = TriggerCreate("gt_TVNewsHanson01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson01Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(586), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(587), 30.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    if ((libWoLC_gf_MissionStatusCheck("THorner04", libWoLC_ge_MissionStatus_Completed) == true)) {
        libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thanson01_01");
    }
    else {
        libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thanson01_00");
    }
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson01Skippable_Init () {
    gt_TVNewsHanson01Skippable = TriggerCreate("gt_TVNewsHanson01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson01Preload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_actor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_actor = ge_ActorID_ActorNone;

    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_thanson01_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson01Preload_Init () {
    gt_TVNewsHanson01Preload = TriggerCreate("gt_TVNewsHanson01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - NewsHa1_01
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson01Event01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(4.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(583), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson01Event01_Init () {
    gt_TVNewsHanson01Event01 = TriggerCreate("gt_TVNewsHanson01Event01_Func");
    TriggerAddEventMovieFunction(gt_TVNewsHanson01Event01, c_playerAny, "NewsHa1_01");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson01 Event03
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson01Event03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(585), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTHanson01Raynor00012", -1), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.2);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(583), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 30.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson01Event03_Init () {
    gt_TVNewsHanson01Event03 = TriggerCreate("gt_TVNewsHanson01Event03_Func");
    TriggerAddEventMovieFunction(gt_TVNewsHanson01Event03, c_playerAny, "NewsHa1_03");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("THanson02", gt_TVNewsHanson02Skippable);
    gf_TVNewsSetWatched("THanson02");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson02_Init () {
    gt_TVNewsHanson02 = TriggerCreate("gt_TVNewsHanson02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson02Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(584), 0.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.01, c_timeGame);
    GameSetLighting("SMHyperionCantina", 0.0);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thanson02_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson02Skippable_Init () {
    gt_TVNewsHanson02Skippable = TriggerCreate("gt_TVNewsHanson02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_thanson02_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson02Preload_Init () {
    gt_TVNewsHanson02Preload = TriggerCreate("gt_TVNewsHanson02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson02 Event05
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson02Event05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(585), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTHanson02Raynor00014", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_SimpleLookAtStop(UnitFromId(424), "VerySlowHeadOnly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson02Event05_Init () {
    gt_TVNewsHanson02Event05 = TriggerCreate("gt_TVNewsHanson02Event05_Func");
    TriggerAddEventMovieFunction(gt_TVNewsHanson02Event05, c_playerAny, "NewsHa2_05");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson03A
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson03A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("THanson03A", gt_TVNewsHanson03ASkippable);
    gf_TVNewsSetWatched("THanson03A");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson03A_Init () {
    gt_TVNewsHanson03A = TriggerCreate("gt_TVNewsHanson03A_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson03A Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson03ASkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(583), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 60.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    if ((libWoLC_gf_MissionStatusCheck("THorner04", libWoLC_ge_MissionStatus_Completed) == true)) {
        libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thanson03a_01");
    }
    else {
        libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thanson03a_00");
    }
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson03ASkippable_Init () {
    gt_TVNewsHanson03ASkippable = TriggerCreate("gt_TVNewsHanson03ASkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson03A Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson03APreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_thanson03a_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson03APreload_Init () {
    gt_TVNewsHanson03APreload = TriggerCreate("gt_TVNewsHanson03APreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - NewsHa3a_02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson03aEvent02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson03aEvent02_Init () {
    gt_TVNewsHanson03aEvent02 = TriggerCreate("gt_TVNewsHanson03aEvent02_Func");
    TriggerAddEventMovieFunction(gt_TVNewsHanson03aEvent02, c_playerAny, "NewsHa3a_02");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson03a Event06
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson03aEvent06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(585), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTHanson03ARaynor00014", -1), 0.0, c_transmissionDurationAdd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson03aEvent06_Init () {
    gt_TVNewsHanson03aEvent06 = TriggerCreate("gt_TVNewsHanson03aEvent06_Func");
    TriggerAddEventMovieFunction(gt_TVNewsHanson03aEvent06, c_playerAny, "NewsHa3a_06");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson03B
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson03B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("THanson03B", gt_TVNewsHanson03BSkippable);
    gf_TVNewsSetWatched("THanson03B");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson03B_Init () {
    gt_TVNewsHanson03B = TriggerCreate("gt_TVNewsHanson03B_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson03B Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson03BSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(586), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 30.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    if ((libWoLC_gf_MissionStatusCheck("THorner04", libWoLC_ge_MissionStatus_Completed) == true)) {
        libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thanson03b_01");
    }
    else {
        libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thanson03b_00");
    }
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson03BSkippable_Init () {
    gt_TVNewsHanson03BSkippable = TriggerCreate("gt_TVNewsHanson03BSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson03B Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson03BPreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PreloadSoundObject("TVTHanson03BRaynor00014", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson03BPreload_Init () {
    gt_TVNewsHanson03BPreload = TriggerCreate("gt_TVNewsHanson03BPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Hanson03b Event06
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHanson03bEvent06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(585), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTHanson03BRaynor00014", -1), 0.0, c_transmissionDurationAdd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHanson03bEvent06_Init () {
    gt_TVNewsHanson03bEvent06 = TriggerCreate("gt_TVNewsHanson03bEvent06_Func");
    TriggerAddEventMovieFunction(gt_TVNewsHanson03bEvent06, c_playerAny, "NewsHa3b_06");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh01
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TTosh01", gt_TVNewsTosh01Skippable);
    gf_TVNewsSetWatched("TTosh01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh01_Init () {
    gt_TVNewsTosh01 = TriggerCreate("gt_TVNewsTosh01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh01Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(584), 0.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_ttosh01_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh01Skippable_Init () {
    gt_TVNewsTosh01Skippable = TriggerCreate("gt_TVNewsTosh01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_ttosh01_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh01Preload_Init () {
    gt_TVNewsTosh01Preload = TriggerCreate("gt_TVNewsTosh01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TTosh02", gt_TVNewsTosh02Skippable);
    gf_TVNewsSetWatched("TTosh02");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh02_Init () {
    gt_TVNewsTosh02 = TriggerCreate("gt_TVNewsTosh02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh02Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(586), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(587), 40.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_ttosh02_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    Wait(8.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(197), 0.0, -1, 10, true);
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh02Skippable_Init () {
    gt_TVNewsTosh02Skippable = TriggerCreate("gt_TVNewsTosh02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_ttosh02_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh02Preload_Init () {
    gt_TVNewsTosh02Preload = TriggerCreate("gt_TVNewsTosh02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - NewsTo2_01
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh02Event01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(583), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 40.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh02Event01_Init () {
    gt_TVNewsTosh02Event01 = TriggerCreate("gt_TVNewsTosh02Event01_Func");
    TriggerAddEventMovieFunction(gt_TVNewsTosh02Event01, c_playerAny, "NewsTo2_01");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh03A
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh03A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TTosh03A", gt_TVNewsTosh03ASkippable);
    gf_TVNewsSetWatched("TTosh03A");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh03A_Init () {
    gt_TVNewsTosh03A = TriggerCreate("gt_TVNewsTosh03A_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh03A Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh03ASkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(586), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(587), 50.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_ttosh03a_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh03ASkippable_Init () {
    gt_TVNewsTosh03ASkippable = TriggerCreate("gt_TVNewsTosh03ASkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh03A Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh03APreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_ttosh03a_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh03APreload_Init () {
    gt_TVNewsTosh03APreload = TriggerCreate("gt_TVNewsTosh03APreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh03a Event05
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh03aEvent05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(585), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTTosh03ARaynor00006", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_SimpleLookAtStop(UnitFromId(424), "SlowHeadOnly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh03aEvent05_Init () {
    gt_TVNewsTosh03aEvent05 = TriggerCreate("gt_TVNewsTosh03aEvent05_Func");
    TriggerAddEventMovieFunction(gt_TVNewsTosh03aEvent05, c_playerAny, "NewsTo3a_05");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh03B
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh03B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TTosh03B", gt_TVNewsTosh03BSkippable);
    gf_TVNewsSetWatched("TTosh03B");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh03B_Init () {
    gt_TVNewsTosh03B = TriggerCreate("gt_TVNewsTosh03B_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh03B Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh03BSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(587), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 60.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_ttosh03b_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh03BSkippable_Init () {
    gt_TVNewsTosh03BSkippable = TriggerCreate("gt_TVNewsTosh03BSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tosh03B Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTosh03BPreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_ttosh03b_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTosh03BPreload_Init () {
    gt_TVNewsTosh03BPreload = TriggerCreate("gt_TVNewsTosh03BPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus01
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TTychus01", gt_TVNewsTychus01Skippable);
    gf_TVNewsSetWatched("TTychus01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus01_Init () {
    gt_TVNewsTychus01 = TriggerCreate("gt_TVNewsTychus01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus01Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(586), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(587), 40.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_ttychus01_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus01Skippable_Init () {
    gt_TVNewsTychus01Skippable = TriggerCreate("gt_TVNewsTychus01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_ttychus01_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus01Preload_Init () {
    gt_TVNewsTychus01Preload = TriggerCreate("gt_TVNewsTychus01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - NewsTy1_04
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus01Event04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(4.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(585), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus01Event04_Init () {
    gt_TVNewsTychus01Event04 = TriggerCreate("gt_TVNewsTychus01Event04_Func");
    TriggerAddEventMovieFunction(gt_TVNewsTychus01Event04, c_playerAny, "NewsTy1_04");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TTychus02", gt_TVNewsTychus02Skippable);
    gf_TVNewsSetWatched("TTychus02");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus02_Init () {
    gt_TVNewsTychus02 = TriggerCreate("gt_TVNewsTychus02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus02Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(583), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 40.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_ttychus02_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus02Skippable_Init () {
    gt_TVNewsTychus02Skippable = TriggerCreate("gt_TVNewsTychus02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_ttychus02_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus02Preload_Init () {
    gt_TVNewsTychus02Preload = TriggerCreate("gt_TVNewsTychus02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus03
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TTychus03", gt_TVNewsTychus03Skippable);
    gf_TVNewsSetWatched("TTychus03");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus03_Init () {
    gt_TVNewsTychus03 = TriggerCreate("gt_TVNewsTychus03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus03Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(583), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 40.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_ttychus03_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus03Skippable_Init () {
    gt_TVNewsTychus03Skippable = TriggerCreate("gt_TVNewsTychus03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus03Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_ttychus03_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus03Preload_Init () {
    gt_TVNewsTychus03Preload = TriggerCreate("gt_TVNewsTychus03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus04
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TTychus04", gt_TVNewsTychus04Skippable);
    gf_TVNewsSetWatched("TTychus04");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus04_Init () {
    gt_TVNewsTychus04 = TriggerCreate("gt_TVNewsTychus04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus04 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus04Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(587), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 60.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_ttychus04_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus04Skippable_Init () {
    gt_TVNewsTychus04Skippable = TriggerCreate("gt_TVNewsTychus04Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus04 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus04Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_ttychus04_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus04Preload_Init () {
    gt_TVNewsTychus04Preload = TriggerCreate("gt_TVNewsTychus04Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus05
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TTychus05", gt_TVNewsTychus05Skippable);
    gf_TVNewsSetWatched("TTychus05");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus05_Init () {
    gt_TVNewsTychus05 = TriggerCreate("gt_TVNewsTychus05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus05 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus05Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(586), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(587), 40.0, -1, 10, true);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(ge_ActorID_ActorRaynor), "Ready T", false);
    gf_MakeUnitLookAtPointWithDebugControl(gf_ActorUnit(ge_ActorID_ActorRaynor), "FastStanding", PointFromId(164));
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_ttychus05_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus05Skippable_Init () {
    gt_TVNewsTychus05Skippable = TriggerCreate("gt_TVNewsTychus05Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Tychus05 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus05Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_ttychus05_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus05Preload_Init () {
    gt_TVNewsTychus05Preload = TriggerCreate("gt_TVNewsTychus05Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - NewsTy5_04
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsTychus05Event04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(619), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTTychus05Raynor00007", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsTychus05Event04_Init () {
    gt_TVNewsTychus05Event04 = TriggerCreate("gt_TVNewsTychus05Event04_Func");
    TriggerAddEventMovieFunction(gt_TVNewsTychus05Event04, c_playerAny, "NewsTy5_04");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner01
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("THorner01", gt_TVNewsHorner01Skippable);
    gf_TVNewsSetWatched("THorner01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner01_Init () {
    gt_TVNewsHorner01 = TriggerCreate("gt_TVNewsHorner01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner01Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(584), 0.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thorner01_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner01Skippable_Init () {
    gt_TVNewsHorner01Skippable = TriggerCreate("gt_TVNewsHorner01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_thornor01_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner01Preload_Init () {
    gt_TVNewsHorner01Preload = TriggerCreate("gt_TVNewsHorner01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner01 Event05
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner01Event05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(585), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTHorner01Raynor00006", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_SimpleLookAtStop(UnitFromId(424), "VerySlowHeadOnly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner01Event05_Init () {
    gt_TVNewsHorner01Event05 = TriggerCreate("gt_TVNewsHorner01Event05_Func");
    TriggerAddEventMovieFunction(gt_TVNewsHorner01Event05, c_playerAny, "NewsHo1_05");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("THorner02", gt_TVNewsHorner02Skippable);
    gf_TVNewsSetWatched("THorner02");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner02_Init () {
    gt_TVNewsHorner02 = TriggerCreate("gt_TVNewsHorner02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner02Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(586), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(587), 30.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thorner02_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner02Skippable_Init () {
    gt_TVNewsHorner02Skippable = TriggerCreate("gt_TVNewsHorner02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_thornor02_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner02Preload_Init () {
    gt_TVNewsHorner02Preload = TriggerCreate("gt_TVNewsHorner02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - NewsHo2_02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner02Event02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(3.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(584), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner02Event02_Init () {
    gt_TVNewsHorner02Event02 = TriggerCreate("gt_TVNewsHorner02Event02_Func");
    TriggerAddEventMovieFunction(gt_TVNewsHorner02Event02, c_playerAny, "NewsHo2_02");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner03
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("THorner03", gt_TVNewsHorner03Skippable);
    gf_TVNewsSetWatched("THorner03");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner03_Init () {
    gt_TVNewsHorner03 = TriggerCreate("gt_TVNewsHorner03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner03Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(583), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 60.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thorner03_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner03Skippable_Init () {
    gt_TVNewsHorner03Skippable = TriggerCreate("gt_TVNewsHorner03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner03Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_thornor03_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner03Preload_Init () {
    gt_TVNewsHorner03Preload = TriggerCreate("gt_TVNewsHorner03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner03 Event08
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner03Event08_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(267), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(421), false, false, ""), c_invalidPortraitId, SoundLink("TVTHorner03Tychus00006", -1), 0.0, c_transmissionDurationAdd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner03Event08_Init () {
    gt_TVNewsHorner03Event08 = TriggerCreate("gt_TVNewsHorner03Event08_Func");
    TriggerAddEventMovieFunction(gt_TVNewsHorner03Event08, c_playerAny, "NewsHo3_08");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner04
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("THorner04", gt_TVNewsHorner04Skippable);
    gf_TVNewsSetWatched("THorner04");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner04_Init () {
    gt_TVNewsHorner04 = TriggerCreate("gt_TVNewsHorner04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner04 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner04Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(583), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 60.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thorner04_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner04Skippable_Init () {
    gt_TVNewsHorner04Skippable = TriggerCreate("gt_TVNewsHorner04Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner04 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner04Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_thornor04_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner04Preload_Init () {
    gt_TVNewsHorner04Preload = TriggerCreate("gt_TVNewsHorner04Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner05S
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner05S_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("THorner05S", gt_TVNewsHorner05SSkippable);
    gf_TVNewsSetWatched("THorner05S");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner05S_Init () {
    gt_TVNewsHorner05S = TriggerCreate("gt_TVNewsHorner05S_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner05S Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner05SSkippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(583), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 60.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_thorner05_00");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner05SSkippable_Init () {
    gt_TVNewsHorner05SSkippable = TriggerCreate("gt_TVNewsHorner05SSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner05S Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner05SPreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_thornor05_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner05SPreload_Init () {
    gt_TVNewsHorner05SPreload = TriggerCreate("gt_TVNewsHorner05SPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Horner05S Event06
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsHorner05SEvent06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(3.5, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(585), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTHorner05SRaynor00006", -1), 0.0, c_transmissionDurationAdd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsHorner05SEvent06_Init () {
    gt_TVNewsHorner05SEvent06 = TriggerCreate("gt_TVNewsHorner05SEvent06_Func");
    TriggerAddEventMovieFunction(gt_TVNewsHorner05SEvent06, c_playerAny, "NewsHo5_06");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul01
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TZeratul01", gt_TVNewsZeratul01Skippable);
    gf_TVNewsSetWatched("TZeratul01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul01_Init () {
    gt_TVNewsZeratul01 = TriggerCreate("gt_TVNewsZeratul01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul01Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(583), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 90.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    if ((libWoLC_gf_MissionStatusCheck("THorner04", libWoLC_ge_MissionStatus_Completed) == true)) {
        libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_tzeratul01_01");
    }
    else {
        libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_tzeratul01_00");
    }
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul01Skippable_Init () {
    gt_TVNewsZeratul01Skippable = TriggerCreate("gt_TVNewsZeratul01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul01Preload_Init () {
    gt_TVNewsZeratul01Preload = TriggerCreate("gt_TVNewsZeratul01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul01 Event06
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul01Event06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(585), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTZeratul01Raynor00001", -1), 0.0, c_transmissionDurationAdd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul01Event06_Init () {
    gt_TVNewsZeratul01Event06 = TriggerCreate("gt_TVNewsZeratul01Event06_Func");
    TriggerAddEventMovieFunction(gt_TVNewsZeratul01Event06, c_playerAny, "NewsZe1_06");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TZeratul02", gt_TVNewsZeratul02Skippable);
    gf_TVNewsSetWatched("TZeratul02");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul02_Init () {
    gt_TVNewsZeratul02 = TriggerCreate("gt_TVNewsZeratul02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul02Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(586), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(584), 60.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_ad_l800etc");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul02Skippable_Init () {
    gt_TVNewsZeratul02Skippable = TriggerCreate("gt_TVNewsZeratul02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul02Preload_Init () {
    gt_TVNewsZeratul02Preload = TriggerCreate("gt_TVNewsZeratul02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul03
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TZeratul03", gt_TVNewsZeratul03Skippable);
    gf_TVNewsSetWatched("TZeratul03");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul03_Init () {
    gt_TVNewsZeratul03 = TriggerCreate("gt_TVNewsZeratul03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul03Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(586), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(587), 30.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    if (((libWoLC_gf_MissionStatusCheck("THorner04", libWoLC_ge_MissionStatus_Completed) == true) || (libWoLC_gf_LastSuccessfulMission() != "TZeratul03"))) {
        libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_newsreport_tzeratul03_00");
    }
    else {
        libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_ad_nukenoodle");
    }
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul03Skippable_Init () {
    gt_TVNewsZeratul03Skippable = TriggerCreate("gt_TVNewsZeratul03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul03Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul03Preload_Init () {
    gt_TVNewsZeratul03Preload = TriggerCreate("gt_TVNewsZeratul03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul03 Event04
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul03Event03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(585), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTZeratul03Raynor00001", -1), 0.0, c_transmissionDurationAdd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul03Event03_Init () {
    gt_TVNewsZeratul03Event03 = TriggerCreate("gt_TVNewsZeratul03Event03_Func");
    TriggerAddEventMovieFunction(gt_TVNewsZeratul03Event03, c_playerAny, "NewsZe3_03");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul04
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina3("TZeratul04", gt_TVNewsZeratul04Skippable);
    gf_TVNewsSetWatched("TZeratul04");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul04_Init () {
    gt_TVNewsZeratul04 = TriggerCreate("gt_TVNewsZeratul04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul04 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul04Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TriggerExecute(gt_TVNewsCantinaAsyncPreload, true, false);
    CameraApplyInfo(1, CameraInfoFromId(584), 0.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_cantinaTV, "video_ad_bubba");
    libNtve_gf_SendActorMessageToUnit(gv_cantinaTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul04Skippable_Init () {
    gt_TVNewsZeratul04Skippable = TriggerCreate("gt_TVNewsZeratul04Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Zeratul04 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsZeratul04Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsZeratul04Preload_Init () {
    gt_TVNewsZeratul04Preload = TriggerCreate("gt_TVNewsZeratul04Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Valerian01
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsValerian01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina4("TValerian01", gt_TVNewsValerian01Skippable);
    gf_TVNewsSetWatched("TValerian01");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsValerian01_Init () {
    gt_TVNewsValerian01 = TriggerCreate("gt_TVNewsValerian01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Valerian01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsValerian01Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(535), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(537), 5.0, -1, 20, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Center), "video_newsreport_tvalerian01_00");
    libNtve_gf_SendActorMessageToUnit(gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Center), MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 0, ""));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsValerian01Skippable_Init () {
    gt_TVNewsValerian01Skippable = TriggerCreate("gt_TVNewsValerian01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Valerian01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsValerian01Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_tvalerian01_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsValerian01Preload_Init () {
    gt_TVNewsValerian01Preload = TriggerCreate("gt_TVNewsValerian01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Valerian01 Event03
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsValerian01Event03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_UseConversationCamera(ge_RoomID_RoomChar, ge_ActorID_ActorWarfield, ge_ConvoCameraType_ConvoCameraRaynorMedium, null);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(ge_ActorID_ActorRaynorMarine), false, false, ""), c_invalidPortraitId, SoundLink("TVTValerian01Raynor00001", -1), 0.0, c_transmissionDurationAdd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsValerian01Event03_Init () {
    gt_TVNewsValerian01Event03 = TriggerCreate("gt_TVNewsValerian01Event03_Func");
    TriggerAddEventMovieFunction(gt_TVNewsValerian01Event03, c_playerAny, "NewsVa1_03");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Valerian02A
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsValerian02A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina4("TValerian02A", gt_TVNewsValerian02Skippable);
    gf_TVNewsSetWatched("TValerian02A");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsValerian02A_Init () {
    gt_TVNewsValerian02A = TriggerCreate("gt_TVNewsValerian02A_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Valerian02B
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsValerian02B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsCantina4("TValerian02B", gt_TVNewsValerian02Skippable);
    gf_TVNewsSetWatched("TValerian02A");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsValerian02B_Init () {
    gt_TVNewsValerian02B = TriggerCreate("gt_TVNewsValerian02B_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Valerian02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsValerian02Skippable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(535), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(537), 3.0, -1, 20, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Center), "video_newsreport_tvalerian02a_00");
    libNtve_gf_SendActorMessageToUnit(gf_BriefingScreen(ge_RoomID_RoomChar, ge_BriefingScreen_Center), MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 0, ""));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsValerian02Skippable_Init () {
    gt_TVNewsValerian02Skippable = TriggerCreate("gt_TVNewsValerian02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Valerian02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsValerian02Preload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_tvalerian02a_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsValerian02Preload_Init () {
    gt_TVNewsValerian02Preload = TriggerCreate("gt_TVNewsValerian02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNewsBarAsyncPreload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsBarAsyncPreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto764D959F_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto764D959F_val = libWoLC_gf_LastSuccessfulMission();
    if (auto764D959F_val == null) {
        gf_TVNewsPreload("TStory01");
    }
    else if (auto764D959F_val == "TRaynor01") {
        gf_TVNewsPreload("TRaynor01");
    }
    else if (auto764D959F_val == "TRaynor02") {
        gf_TVNewsPreload("TRaynor02");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsBarAsyncPreload_Init () {
    gt_TVNewsBarAsyncPreload = TriggerCreate("gt_TVNewsBarAsyncPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNewsCantinaAsyncPreload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsCantinaAsyncPreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoA357642E_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA357642E_val = libWoLC_gf_LastSuccessfulMission();
    if (autoA357642E_val == "THanson01") {
        gf_TVNewsPreload("THanson01");
    }
    else if (autoA357642E_val == "THanson02") {
        gf_TVNewsPreload("THanson02");
    }
    else if (autoA357642E_val == "THanson03A") {
        gf_TVNewsPreload("THanson03A");
    }
    else if (autoA357642E_val == "THanson03B") {
        gf_TVNewsPreload("THanson03B");
    }
    else if (autoA357642E_val == "TTosh01") {
        gf_TVNewsPreload("TTosh01");
    }
    else if (autoA357642E_val == "TTosh02") {
        gf_TVNewsPreload("TTosh02");
    }
    else if (autoA357642E_val == "TTosh03A") {
        gf_TVNewsPreload("TTosh03A");
    }
    else if (autoA357642E_val == "TTosh03B") {
        gf_TVNewsPreload("TTosh03B");
    }
    else if (autoA357642E_val == "TTychus01") {
        gf_TVNewsPreload("TTychus01");
    }
    else if (autoA357642E_val == "TTychus02") {
        gf_TVNewsPreload("TTychus02");
    }
    else if (autoA357642E_val == "TTychus03") {
        gf_TVNewsPreload("TTychus03");
    }
    else if (autoA357642E_val == "TTychus04") {
        gf_TVNewsPreload("TTychus04");
    }
    else if (autoA357642E_val == "TTychus05") {
        gf_TVNewsPreload("TTychus05");
    }
    else if (autoA357642E_val == "THorner01") {
        gf_TVNewsPreload("THorner01");
    }
    else if (autoA357642E_val == "THorner02") {
        gf_TVNewsPreload("THorner02");
    }
    else if (autoA357642E_val == "THorner03") {
        gf_TVNewsPreload("THorner03");
    }
    else if (autoA357642E_val == "THorner04") {
        gf_TVNewsPreload("THorner04");
    }
    else if (autoA357642E_val == "THorner05S") {
        gf_TVNewsPreload("THorner05S");
    }
    else if (autoA357642E_val == "TZeratul01") {
        gf_TVNewsPreload("TZeratul01");
    }
    else if (autoA357642E_val == "TZeratul02") {
        gf_TVNewsPreload("TZeratul02");
    }
    else if (autoA357642E_val == "TZeratul03") {
        gf_TVNewsPreload("TZeratul03");
    }
    else if (autoA357642E_val == "TZeratul04") {
        gf_TVNewsPreload("TZeratul04");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsCantinaAsyncPreload_Init () {
    gt_TVNewsCantinaAsyncPreload = TriggerCreate("gt_TVNewsCantinaAsyncPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNewsCharAsyncPreload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsCharAsyncPreload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoCB61CE57_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoCB61CE57_val = libWoLC_gf_LastSuccessfulMission();
    if (autoCB61CE57_val == "TValerian01") {
        gf_TVNewsPreload("TValerian01");
    }
    else if (autoCB61CE57_val == "TValerian02A") {
        gf_TVNewsPreload("TValerian02A");
    }
    else if (autoCB61CE57_val == "TValerian02B") {
        gf_TVNewsPreload("TValerian02B");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsCharAsyncPreload_Init () {
    gt_TVNewsCharAsyncPreload = TriggerCreate("gt_TVNewsCharAsyncPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Event End
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsEventEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsEventEnd_Init () {
    gt_TVNewsEventEnd = TriggerCreate("gt_TVNewsEventEnd_Func");
    TriggerAddEventMovieFunction(gt_TVNewsEventEnd, c_playerAny, "NewsEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Event End 2
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsEventAdStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWoLC_gf_LastSuccessfulMission() == "TTychus03")) {
        libNtve_gf_PlayMovieTextureOnUnitActor(UnitFromId(161), "video_ad_psiops");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(161), MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 0, ""));
    }
    else {
        libNtve_gf_PlayMovieTextureOnUnitActor(UnitFromId(161), "video_ad_ipistol");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(161), MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 0, ""));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsEventAdStart_Init () {
    gt_TVNewsEventAdStart = TriggerCreate("gt_TVNewsEventAdStart_Func");
    TriggerAddEventMovieFunction(gt_TVNewsEventAdStart, c_playerAny, "AdStart");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - After TRaynor01
//--------------------------------------------------------------------------------------------------
bool gt_TipAfterTRaynor01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddTip("StoryTips|Objects");
    gf_AddTip("StoryTips|MissionCase");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipAfterTRaynor01_Init () {
    gt_TipAfterTRaynor01 = TriggerCreate("gt_TipAfterTRaynor01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - After TRaynor02
//--------------------------------------------------------------------------------------------------
bool gt_TipAfterTRaynor02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddTip("StoryTips|Credits");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipAfterTRaynor02_Init () {
    gt_TipAfterTRaynor02 = TriggerCreate("gt_TipAfterTRaynor02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - After TRaynor03
//--------------------------------------------------------------------------------------------------
bool gt_TipAfterTRaynor03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddTip("StoryTips|Hyperion");
    TriggerExecute(gt_TipArmory, true, true);
    TriggerExecute(gt_TipStarmap, true, true);
    TriggerExecute(gt_TipMissionArchieves, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipAfterTRaynor03_Init () {
    gt_TipAfterTRaynor03 = TriggerCreate("gt_TipAfterTRaynor03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - After THanson01 or TTychus01
//--------------------------------------------------------------------------------------------------
bool gt_TipAfterTHanson01orTTychus01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libWoLC_gf_MissionStatusCheck("THanson01", libWoLC_ge_MissionStatus_Completed) == false) || (libWoLC_gf_MissionStatusCheck("TTychus01", libWoLC_ge_MissionStatus_Completed) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TipMercenaries, true, false);
    gf_AddTip("StoryTips|NewTechnology");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipAfterTHanson01orTTychus01_Init () {
    gt_TipAfterTHanson01orTTychus01 = TriggerCreate("gt_TipAfterTHanson01orTTychus01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Starmap
//--------------------------------------------------------------------------------------------------
bool gt_TipStarmap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_currentRoom == ge_RoomID_RoomBridge))) {
        Wait(1.0, c_timeReal);
    }
    gf_AddTip("StoryTips|StarMap");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipStarmap_Init () {
    gt_TipStarmap = TriggerCreate("gt_TipStarmap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Mission Archieves
//--------------------------------------------------------------------------------------------------
bool gt_TipMissionArchieves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_currentRoom == ge_RoomID_RoomBridge))) {
        Wait(1.0, c_timeReal);
    }
    gf_AddTip("StoryTips|BattleReport");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissionArchieves_Init () {
    gt_TipMissionArchieves = TriggerCreate("gt_TipMissionArchieves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Armory
//--------------------------------------------------------------------------------------------------
bool gt_TipArmory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_armoryOpenedNew == true)) {
        gf_AddTip("StoryTips|Armory");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipArmory_Init () {
    gt_TipArmory = TriggerCreate("gt_TipArmory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Armory Console
//--------------------------------------------------------------------------------------------------
bool gt_TipArmoryConsole_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddTip("StoryTips|ArmoryConsole");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipArmoryConsole_Init () {
    gt_TipArmoryConsole = TriggerCreate("gt_TipArmoryConsole_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Conscription
//--------------------------------------------------------------------------------------------------
bool gt_TipConscription_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_conscriptionOpenedNew == true)) {
        gf_AddTip("StoryTips|Armory");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipConscription_Init () {
    gt_TipConscription = TriggerCreate("gt_TipConscription_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Cantina
//--------------------------------------------------------------------------------------------------
bool gt_TipCantina_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_cantinaOpenedNew == true)) {
        gf_AddTip("StoryTips|Cantina");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipCantina_Init () {
    gt_TipCantina = TriggerCreate("gt_TipCantina_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Mercenaries
//--------------------------------------------------------------------------------------------------
bool gt_TipMercenaries_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (libWoLC_gf_StoryState("CantinaIntroDone")) {
        gf_AddTip("StoryTips|Mercenaries");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMercenaries_Init () {
    gt_TipMercenaries = TriggerCreate("gt_TipMercenaries_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - New Mercenaries
//--------------------------------------------------------------------------------------------------
bool gt_TipNewMercenaries_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddTip("StoryTips|NewMercenaries");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipNewMercenaries_Init () {
    gt_TipNewMercenaries = TriggerCreate("gt_TipNewMercenaries_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Lab
//--------------------------------------------------------------------------------------------------
bool gt_TipLab_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_labOpenedNew == true)) {
        gf_AddTip("StoryTips|Lab");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipLab_Init () {
    gt_TipLab = TriggerCreate("gt_TipLab_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Lab Research
//--------------------------------------------------------------------------------------------------
bool gt_TipLabResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddTip("StoryTips|Research");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipLabResearch_Init () {
    gt_TipLabResearch = TriggerCreate("gt_TipLabResearch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - New Protoss Research
//--------------------------------------------------------------------------------------------------
bool gt_TipNewProtossResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libWoLC_gf_StoryState("TipNewProtossResearchPlayed") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libWoLC_gf_SetStoryStateBoolean("TipNewProtossResearchPlayed", true);
    gf_AddTip("StoryTips|NewProtossResearch");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipNewProtossResearch_Init () {
    gt_TipNewProtossResearch = TriggerCreate("gt_TipNewProtossResearch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - New Zerg Research
//--------------------------------------------------------------------------------------------------
bool gt_TipNewZergResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libWoLC_gf_StoryState("TipNewZergResearchPlayed") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libWoLC_gf_SetStoryStateBoolean("TipNewZergResearchPlayed", true);
    gf_AddTip("StoryTips|NewZergResearch");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipNewZergResearch_Init () {
    gt_TipNewZergResearch = TriggerCreate("gt_TipNewZergResearch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - Lab Crystal
//--------------------------------------------------------------------------------------------------
bool gt_TipLabCrystal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddTip("StoryTips|Crystal");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipLabCrystal_Init () {
    gt_TipLabCrystal = TriggerCreate("gt_TipLabCrystal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - After TValerian01
//--------------------------------------------------------------------------------------------------
bool gt_TipAfterTValerian01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddTip("StoryTips|Char");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipAfterTValerian01_Init () {
    gt_TipAfterTValerian01 = TriggerCreate("gt_TipAfterTValerian01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Cheats_Init();
    gt_WaitForSkipTrig_Init();
    gt_BackButtonClicked_Init();
    gt_BackButtonEscape_Init();
    gt_BackButtonEscapeSkippable_Init();
    gt_TBDWindowCloseClicked_Init();
    gt_JukeboxClicked_Init();
    gt_JukeboxTrackLoop_Init();
    gt_JukeboxTrackAnimation_Init();
    gt_JukeboxTrackComments_Init();
    gt_StopSoundtrackMultiple_Init();
    gt_PinboardClicked_Init();
    gt_PinboardZoom_Init();
    gt_PinboardLeave_Init();
    gt_PinboardItemClicked_Init();
    gt_PinboardItemClickedPreCallback_Init();
    gt_PinboardItemClickedPostCallback_Init();
    gt_PinboardItemClickedCamera_Init();
    gt_PinboardItemClickedCameraChanged_Init();
    gt_PinboardItemSkippable_Init();
    gt_PinboardItemBack_Init();
    gt_DisplayNewItems_Init();
    gt_NewItemAvailable_Init();
    gt_CreateNewItem_Init();
    gt_MoveNewItem_Init();
    gt_RemoveNewItem_Init();
    gt_DebugEnabledLookAt_Init();
    gt_DebugDisabledLookAt_Init();
    gt_QueryDialogDismissed_Init();
    gt_MapInit_Init();
    gt_Init00DebugCheckforcinematicsizesetting_Init();
    gt_Init01StoryData_Init();
    gt_Init01AData_Init();
    gt_Init01CDerivedStates_Init();
    gt_Init01CDerivedStatesTrophies_Init();
    gt_Init01CDerivedStatesResearch_Init();
    gt_Init01CDerivedStatesMerc_Init();
    gt_Init01CDerivedStatesNews_Init();
    gt_Init01CDerivedStatesTransitionalLoad_Init();
    gt_Init02World_Init();
    gt_Init02AActors_Init();
    gt_Init02BRooms_Init();
    gt_Init02BRoomsLabResearchSamples_Init();
    gt_Init02CCameras_Init();
    gt_Init02DHotspots_Init();
    gt_Init02DHotspotsPinboard_Init();
    gt_Init02EStarmap_Init();
    gt_Init02FScenes_Init();
    gt_Init02GBriefingABChoice_Init();
    gt_Init02HDebriefing_Init();
    gt_Init02ITVNews_Init();
    gt_Init02JPreloading_Init();
    gt_Init03UI_Init();
    gt_Init04Environment_Init();
    gt_Init05Sounds_Init();
    gt_Init06Intro_Init();
    gt_ReturnToArmory_Init();
    gt_ReturnToBridge_Init();
    gt_ReturnToCantina_Init();
    gt_ReturnToCantinaArcade_Init();
    gt_ReturnToChar_Init();
    gt_ReturnToConscription_Init();
    gt_ReturnToLab_Init();
    gt_ReturnToMarSara_Init();
    gt_ReturnToBattleReport_Init();
    gt_ReturnToObservatory_Init();
    gt_ReturnToObservatoryBackToBridge_Init();
    gt_ReturnGeneric_Init();
    gt_ReturnGeneric2_Init();
    gt_ReturnABChoice_Init();
    gt_PlayerQuitsStorymode_Init();
    gt_StorySave_Init();
    gt_EndofTime_Init();
    gt_EnableDebug_Init();
    gt_DisableDebug_Init();
    gt_DebugAutomatedTesting_Init();
    gt_TerranUptheNight_Init();
    gt_DebugSceneCreateDialog_Init();
    gt_DebugSceneClicked_Init();
    gt_DebugSceneExit_Init();
    gt_DebugSCENE_Init();
    gt_DebugScenePerformanceTestGetFPS_Init();
    gt_RoomCheatButtonResponse_Init();
    gt_DebugROOM_Init();
    gt_DebugROOMCHEAT_Init();
    gt_DebugTESTCAMERA_Init();
    gt_DebugGAMECAMERA_Init();
    gt_DebugGLOBALVIEW_Init();
    gt_DebugUNLOCKCAMERA_Init();
    gt_RoomCameraButtonResponse_Init();
    gt_DebugROOMCAMERA_Init();
    gt_Debug_Briefing_Init();
    gt_Debug_BriefingDialogMissionButtonResponse_Init();
    gt_Debug_BriefingDialogClose_Init();
    gt_Debug_TVNews_Init();
    gt_Debug_TVNewsDialogMissionButtonResponse_Init();
    gt_Debug_TVNewsDialogClose_Init();
    gt_DebugABChoice_Init();
    gt_DebugMercIntro_Init();
    gt_DebugLabIntro_Init();
    gt_DebugArmoryIntro_Init();
    gt_BlizzconScreenWait_Init();
    gt_DebugOutputSets_Init();
    gt_DebugCINEMATICMODE_Init();
    gt_DebugSHOWALL_Init();
    gt_DebugDOOR_Init();
    gt_DebugIDLETIMES_Init();
    gt_DebugCredits_Init();
    gt_DebugDoorAnimation_Init();
    gt_DebugPauseMusic_Init();
    gt_DebugAttachmentLocation_Init();
    gt_DebugHideUnclickables_Init();
    gt_DebugStoryState_Init();
    gt_DebugClickTurnOn_Init();
    gt_DebugClick_Init();
    gt_DebugStarmap_Init();
    gt_DebugCloseStarmap_Init();
    gt_DebugMissionArchieves_Init();
    gt_DebugShowActor_Init();
    gt_DebugHideActor_Init();
    gt_DebugRoomPreloadStates_Init();
    gt_DebugSize_Init();
    gt_DebugPos_Init();
    gt_DebugBGUnitPicked_Init();
    gt_DebugToshPortrait_Init();
    gt_DebugToshPortrait2_Init();
    gt_DebugStopTransmission_Init();
    gt_DebugZeratulPlanetPanel_Init();
    gt_DebugTemp_Init();
    gt_ActorClicked_Init();
    gt_PrepareRoomArmory_Init();
    gt_PrepareRoomBridge_Init();
    gt_PrepareRoomCantina_Init();
    gt_PrepareRoomChar_Init();
    gt_CharArtifactAnimation_Init();
    gt_PrepareRoomConscription_Init();
    gt_PrepareRoomCorridor_Init();
    gt_PrepareRoomFlagship_Init();
    gt_PrepareRoomGalaxy_Init();
    gt_PrepareRoomLab_Init();
    gt_PrepareRoomLabResearch_Init();
    gt_PrepareRoomMarSara_Init();
    gt_PrepareRoomObservatory_Init();
    gt_PrepareRoomTechPurchase_Init();
    gt_PrepareRoomMercenary_Init();
    gt_PrepareRoomMissionArchieves_Init();
    gt_PrepareRoomVoid_Init();
    gt_WalkinRoomDoor_Init();
    gt_WalkinArmory_Init();
    gt_WalkinBridge_Init();
    gt_WalkinCantina_Init();
    gt_WalkinChar_Init();
    gt_WalkinConscription_Init();
    gt_WalkinLab_Init();
    gt_WalkinMarSara_Init();
    gt_EnterArmory_Init();
    gt_EnterBridge_Init();
    gt_EnterCantina_Init();
    gt_EnterCantinaStartJukebox_Init();
    gt_EnterChar_Init();
    gt_EnterConscription_Init();
    gt_EnterLab_Init();
    gt_EnterMarSara_Init();
    gt_EnterCantinaStartJukebox2_Init();
    gt_RoomStatesDefaultCallback_Init();
    gt_CharTychusAnimation_Init();
    gt_RoomChangeButtonResponse_Init();
    gt_RoomChangeButtonUpdate_Init();
    gt_BGActorNodeMoveArrive_Init();
    gt_BGActorNodeStayExpires_Init();
    gt_BGActorNodeDo_Init();
    gt_ArmoryBackgroundActivitiesStart_Init();
    gt_ArmoryBackgroundActivitiesStop_Init();
    gt_CantinaBackgroundActivitiesStart_Init();
    gt_CantinaBackgroundActivitiesStop_Init();
    gt_CantinaBackgroundOthersInit_Init();
    gt_CantinaBackgroundOthersStart_Init();
    gt_CantinaBackgroundOthersStop_Init();
    gt_LabBackgroundActivitiesStart_Init();
    gt_LabBackgroundActivitiesStop_Init();
    gt_BridgeBackgroundActivitiesStart_Init();
    gt_BridgeBackgroundActivitiesStop_Init();
    gt_BridgeBackgroundBralikInit_Init();
    gt_BridgeBackgroundBralikStart_Init();
    gt_BridgeBackgroundBralikStop_Init();
    gt_BridgeBackgroundBralikPause_Init();
    gt_BridgeBackgroundBralikTalkToRaynor_Init();
    gt_BridgeBackgroundBralikResume_Init();
    gt_BridgeBackgroundCadeInit_Init();
    gt_BridgeBackgroundCadeStart_Init();
    gt_BridgeBackgroundCadeStop_Init();
    gt_BridgeBackgroundCadePause_Init();
    gt_BridgeBackgroundCadeTalkToRaynor_Init();
    gt_BridgeBackgroundCadeResume_Init();
    gt_BridgeBackgroundMonkeyInit_Init();
    gt_BridgeBackgroundMonkeyDoorEnter_Init();
    gt_BridgeBackgroundMonkeyDoorLeft_Init();
    gt_BridgeBackgroundMonkeyStart_Init();
    gt_BridgeBackgroundMonkeyStop_Init();
    gt_BridgeBackgroundMonkeyPause_Init();
    gt_BridgeBackgroundMonkeyResume_Init();
    gt_HotspotClicked_Init();
    gt_HotspotHighlighted_Init();
    gt_HotspotUnhighlighted_Init();
    gt_ArmorySimulatorClicked_Init();
    gt_ArmorySimulatorLeave_Init();
    gt_ArmorySimulatorPlay_Init();
    gt_ArmoryTechConsoleClicked_Init();
    gt_ArmoryTechConsoleLeave_Init();
    gt_ArmoryTech_VikingClicked_Init();
    gt_ArmoryTech_VikingLeave_Init();
    gt_ArmoryTech_BansheeClicked_Init();
    gt_ArmoryTech_BansheeLeave_Init();
    gt_ArmoryTech_DropshipClicked_Init();
    gt_ArmoryTech_DropshipLeave_Init();
    gt_ArmoryTech_TankClicked_Init();
    gt_ArmoryTech_TankLeave_Init();
    gt_ArmoryTech_GhostClicked_Init();
    gt_ArmoryTech_GhostClickedEasteregg_Init();
    gt_ArmoryTech_GhostLeave_Init();
    gt_ArmoryTech_FirebatClicked_Init();
    gt_ArmoryTech_FirebatLeave_Init();
    gt_ArmoryTech_MarauderClicked_Init();
    gt_ArmoryTech_MarauderLeave_Init();
    gt_ArmoryTech_SpectreClicked_Init();
    gt_ArmoryTech_SpectreLeave_Init();
    gt_ArmoryTech_SpiderMineClicked_Init();
    gt_ArmoryTech_SpiderMineLeave_Init();
    gt_BridgeStarmapClicked_Init();
    gt_BridgeStarmapLeave_Init();
    gt_BridgeWindowClicked_Init();
    gt_BridgeWindowLeave_Init();
    gt_BridgeWindowInitNose_Init();
    gt_BridgeMissionArchivesClicked_Init();
    gt_BridgeMissionArchivesLeave_Init();
    gt_BridgeMissionArchivesSceneFinish_Init();
    gt_BridgeMissionArchivesHighlighted_Init();
    gt_BridgeMissionArchivesUnhighlighted_Init();
    gt_CantinaArcadeClicked_Init();
    gt_CantinaArcadeLeave_Init();
    gt_CantinaArcadePlay_Init();
    gt_CantinaBadgeClicked_Init();
    gt_CantinaJukeboxInit_Init();
    gt_CantinaJukeboxClickedPreCallback_Init();
    gt_CantinaJukeboxClickedPostCallback_Init();
    gt_CantinaJukeboxClickedCamera_Init();
    gt_CantinaJukeboxClickedFidget_Init();
    gt_CantinaJukeboxClicked_Init();
    gt_CantinaMercClicked_Init();
    gt_CantinaMercFidget_Init();
    gt_CantinaMercLeave_Init();
    gt_CantinaTrophiesFrameClicked_Init();
    gt_CantinaTrophiesItemClicked_Init();
    gt_CantinaTrophiesLeave_Init();
    gt_CantinaTrophiesHighlighted_Init();
    gt_CantinaTrophiesUnhighlighted_Init();
    gt_CantinaTVClicked_Init();
    gt_CharArtifactClickedCamera_Init();
    gt_CharArtifactClicked_Init();
    gt_CharArtifactOpen_Init();
    gt_CharArtifactClickedSkippable_Init();
    gt_CharArtifactClickedCameraChange_Init();
    gt_CharArtifactClickedCameraChangeNoChange_Init();
    gt_CharConsoleClicked_Init();
    gt_CharConsoleLeave_Init();
    gt_LabArtifactClickedPreCallback_Init();
    gt_LabArtifactClickedPostCallback_Init();
    gt_LabArtifactClickedCamera_Init();
    gt_LabArtifactClicked_Init();
    gt_LabArtifactClickedCameraChange_Init();
    gt_LabArtifactClickedCameraChangeNoWait_Init();
    gt_LabArtifactClickedPositionCharacters_Init();
    gt_LabArtifactHighlighted_Init();
    gt_LabArtifactUnhighlighted_Init();
    gt_LabConsoleClicked_Init();
    gt_LabConsoleLeave_Init();
    gt_LabCrystalClicked_Init();
    gt_LabCrystalLeave_Init();
    gt_LabCrystalNoMissionClicked_Init();
    gt_LabCrystalNoMissionLeave_Init();
    gt_LabTubeClickedProtoss_Init();
    gt_LabTubeClickedZerg_Init();
    gt_LabTubeLeave_Init();
    gt_MarSaraBadgeClickedPreCallback_Init();
    gt_MarSaraBadgeClickedPostCallback_Init();
    gt_MarSaraBadgeClickedCamera_Init();
    gt_MarSaraBadgeClicked_Init();
    gt_MarSaraHydraClickedPreCallback_Init();
    gt_MarSaraHydraClickedPostCallback_Init();
    gt_MarSaraHydraClickedCamera_Init();
    gt_MarSaraHydraClicked_Init();
    gt_MarSaraJukeboxInit_Init();
    gt_MarSaraJukeboxClickedPreCallback_Init();
    gt_MarSaraJukeboxClickedPostCallback_Init();
    gt_MarSaraJukeboxClickedCamera_Init();
    gt_MarSaraJukeboxClicked_Init();
    gt_MarSaraBriefcaseClicked_Init();
    gt_MarSaraBriefcaseLeave_Init();
    gt_MarSaraBriefcaseLeaveUIYesNo_Init();
    gt_MarSaraBriefcaseHighlighted_Init();
    gt_MarSaraBriefcaseHologramHighlighted_Init();
    gt_MarSaraBriefcaseUnhighlighted_Init();
    gt_MarSaraBriefcaseHologramUnhighlighted_Init();
    gt_MarSaraTVClicked_Init();
    gt_MarSaraTVHighlighted_Init();
    gt_MarSaraTVUnhighlighted_Init();
    gt_ObservatoryPaintingClickedPreCallback_Init();
    gt_ObservatoryPaintingClickedPostCallback_Init();
    gt_ObservatoryPaintingClickedCamera_Init();
    gt_ObservatoryPaintingClicked_Init();
    gt_TravelPanelLaunch_Init();
    gt_TravelPanelLeave_Init();
    gt_TravelPanelCharInvasionDialog_Init();
    gt_TravelPanelZeratulLaunch_Init();
    gt_TravelPanelZeratulLeave_Init();
    gt_CharRoomUIButtonResponse_Init();
    gt_CharRoomUILeaveUI_Init();
    gt_CharRoomUIButtonUpdate_Init();
    gt_ArmoryKachinskiClicked_Init();
    gt_ArmoryEarlClicked_Init();
    gt_BridgeBralikClicked_Init();
    gt_BridgeCadeClicked_Init();
    gt_ConvoCameraTriggerMaster_Init();
    gt_ConvoCameraTriggerCustom_Init();
    gt_ConvoCameraTriggerCharacter1Closeup_Init();
    gt_ConvoCameraTriggerCharacter1Medium_Init();
    gt_ConvoCameraTriggerCharacter1Shoulder_Init();
    gt_ConvoCameraTriggerCharacter1Pushin_Init();
    gt_ConvoCameraTriggerCharacter1Pushout_Init();
    gt_ConvoCameraTriggerCharacter1Pan_Init();
    gt_ConvoCameraTriggerCharacter2Closeup_Init();
    gt_ConvoCameraTriggerCharacter2Medium_Init();
    gt_ConvoCameraTriggerCharacter2Shoulder_Init();
    gt_ConvoCameraTriggerCharacter2Pushin_Init();
    gt_ConvoCameraTriggerCharacter2Pushout_Init();
    gt_ConvoCameraTriggerCharacter2Pan_Init();
    gt_ConvoCameraTriggerRaynorCloseup_Init();
    gt_ConvoCameraTriggerRaynorMedium_Init();
    gt_ConvoCameraTriggerRaynorShoulder_Init();
    gt_ConvoCameraTriggerRaynorPushin_Init();
    gt_ConvoCameraTriggerRaynorPushout_Init();
    gt_ConvoCameraTriggerRaynorPan_Init();
    gt_ArmorySwannClickedPreCallback_Init();
    gt_ArmorySwannClickedPostCallback_Init();
    gt_ArmorySwannClicked_Init();
    gt_BridgeHornerClickedPreCallback_Init();
    gt_BridgeHornerClickedPostCallback_Init();
    gt_BridgeHornerClicked_Init();
    gt_BridgeTychusClickedPreCallback_Init();
    gt_BridgeTychusClickedPostCallback_Init();
    gt_BridgeTychusClicked_Init();
    gt_BridgeHansonClickedPreCallback_Init();
    gt_BridgeHansonClickedPostCallback_Init();
    gt_BridgeHansonClicked_Init();
    gt_BridgeToshClicked_Init();
    gt_BridgeCommunicatorClickedPreCallback_Init();
    gt_BridgeCommunicatorClickedPostCallback_Init();
    gt_BridgeCommunicatorClickedCustomCamera_Init();
    gt_BridgeCommunicatorClicked_Init();
    gt_CantinaTychusClickedPreCallback_Init();
    gt_CantinaTychusClickedPostCallback_Init();
    gt_CantinaTychusClicked_Init();
    gt_CantinaTychusClickedCameraChange_Init();
    gt_CantinaTychusClickedCameraChangeNoWait_Init();
    gt_CantinaToshClickedPreCallback_Init();
    gt_CantinaToshClickedPostCallback_Init();
    gt_CantinaToshClicked_Init();
    gt_CharWarfieldClickedPreCallback_Init();
    gt_CharWarfieldClickedPostCallback_Init();
    gt_CharWarfieldClicked_Init();
    gt_CharWarfieldClickedAOD_Init();
    gt_CharTychusClickedPreCallback_Init();
    gt_CharTychusClickedPostCallback_Init();
    gt_CharTychusClicked_Init();
    gt_CharTychusTalkAnimation_Init();
    gt_LabHansonClickedPreCallback_Init();
    gt_LabHansonClickedPostCallback_Init();
    gt_LabHansonClicked_Init();
    gt_MarSaraTychusClickedPreCallback_Init();
    gt_MarSaraTychusClickedPostCallback_Init();
    gt_MarSaraTychusClicked_Init();
    gt_ObservatoryValerianClickedPreCallback_Init();
    gt_ObservatoryValerianClickedPostCallback_Init();
    gt_ObservatoryValerianClicked_Init();
    gt_TychusObsession_Init();
    gt_HornerObsession_Init();
    gt_SceneSkippable_Init();
    gt_Scene01RaynorIntro_Init();
    gt_Scene03ZeratulWarning_Init();
    gt_Scene04TychusIntro_Init();
    gt_Scene05EscapefromMarSara_Init();
    gt_Scene06ValerianIntro_Init();
    gt_Scene06ValerianIntroTimestamp_Init();
    gt_Scene07BarFight_Init();
    gt_Scene08HansonEndA_Init();
    gt_Scene09ToshEndA_Init();
    gt_Scene10RaynorsDream_Init();
    gt_Scene10RaynorsDreamTimestamp_Init();
    gt_Scene11CharBattlefieldIntro_Init();
    gt_Scene12HornerEnd_Init();
    gt_Scene13HansonEndB_Init();
    gt_Scene14ToshEndB_Init();
    gt_Scene15KerriganIntro_Init();
    gt_Scene15KerriganIntroTimestamp_Init();
    gt_Scene16CharIntro_Init();
    gt_Scene16CharIntroNoFadeIn_Init();
    gt_Scene16CharIntroTimestamp_Init();
    gt_Scene17CharBattlefieldEnd_Init();
    gt_Animatic01RaynorIntro_Init();
    gt_Animatic01RaynorIntroSkippable_Init();
    gt_Animatic04TychusIntro_Init();
    gt_Animatic04TychusIntroSkippable_Init();
    gt_Animatic05EscapefromMarSara_Init();
    gt_Animatic05EscapefromMarSaraSkippable_Init();
    gt_Animatic06ValerianIntro_Init();
    gt_Animatic06ValerianIntroSkippable_Init();
    gt_Animatic07BarFight_Init();
    gt_Animatic07BarFightSkippable_Init();
    gt_Animatic08HansenEndA_Init();
    gt_Animatic08HansenEndASkippable_Init();
    gt_Animatic09ToshEndA_Init();
    gt_Animatic09ToshEndASkippable_Init();
    gt_Animatic10RaynorsDream_Init();
    gt_Animatic10RaynorsDreamSkippable_Init();
    gt_Animatic11CharBattlefieldIntro_Init();
    gt_Animatic11CharBattlefieldIntroSkippable_Init();
    gt_Animatic12HornerEnd_Init();
    gt_Animatic12HornerEndSkippable_Init();
    gt_Animatic13HansenEndB_Init();
    gt_Animatic13HansenEndBSkippable_Init();
    gt_Animatic14ToshEndB_Init();
    gt_Animatic14ToshEndBSkippable_Init();
    gt_Animatic15KerriganIntro_Init();
    gt_Animatic15KerriganIntroSkippable_Init();
    gt_Animatic16CharIntro_Init();
    gt_Animatic16CharIntroSkippable_Init();
    gt_Animatic17CharBattlefieldEnd_Init();
    gt_Animatic17CharBattlefieldEndSkippable_Init();
    gt_Rendered01OldRivals_Init();
    gt_Rendered01OldRivalsSkippable_Init();
    gt_Rendered02BetterMarine_Init();
    gt_Rendered02BetterMarineSkippable_Init();
    gt_Rendered03TheDream_Init();
    gt_Rendered03TheDreamNoCleanup_Init();
    gt_Rendered03TheDreamSkippable_Init();
    gt_Rendered04End_Init();
    gt_Rendered04EndSkippable_Init();
    gt_BriefingTemplate_Init();
    gt_BriefingTemplateSkippable_Init();
    gt_BriefingTemplatePreload_Init();
    gt_BriefingPlayVideoTargetingCursorSound_Init();
    gt_BriefingTRaynor01_Init();
    gt_BriefingTRaynor01Skippable_Init();
    gt_BriefingTRaynor01PreloadRough_Init();
    gt_BriefingTRaynor01Preload_Init();
    gt_BriefingTRaynor02_Init();
    gt_BriefingTRaynor02Skippable_Init();
    gt_BriefingTRaynor02PreloadRough_Init();
    gt_BriefingTRaynor02Preload_Init();
    gt_BriefingTRaynor03_Init();
    gt_BriefingTRaynor03Skippable_Init();
    gt_BriefingTRaynor03PreloadRough_Init();
    gt_BriefingTRaynor03Preload_Init();
    gt_BriefingTHanson01_Init();
    gt_BriefingTHanson01Skippable_Init();
    gt_BriefingTHanson01PreloadRough_Init();
    gt_BriefingTHanson01Preload_Init();
    gt_BriefingTHanson02_Init();
    gt_BriefingTHanson02Skippable_Init();
    gt_BriefingTHanson02PreloadRough_Init();
    gt_BriefingTHanson02Preload_Init();
    gt_BriefingTHanson02Camera2_Init();
    gt_BriefingTHanson02ButDelay_Init();
    gt_BriefingTHanson03A_Init();
    gt_BriefingTHanson03ASkippable_Init();
    gt_BriefingTHanson03APreloadRough_Init();
    gt_BriefingTHanson03APreload_Init();
    gt_BriefingTHanson03B_Init();
    gt_BriefingTHanson03BSkippable_Init();
    gt_BriefingTHanson03BPreloadRough_Init();
    gt_BriefingTHanson03BPreload_Init();
    gt_BriefingTHorner01_Init();
    gt_BriefingTHorner01Skippable_Init();
    gt_BriefingTHorner01PreloadRough_Init();
    gt_BriefingTHorner01Preload_Init();
    gt_BriefingTHorner02_Init();
    gt_BriefingTHorner02Skippable_Init();
    gt_BriefingTHorner02HanText_Init();
    gt_BriefingTHorner02PreloadRough_Init();
    gt_BriefingTHorner02Preload_Init();
    gt_BriefingTHorner02IncomingTransmission_Init();
    gt_BriefingTHorner03_Init();
    gt_BriefingTHorner03Skippable_Init();
    gt_BriefingTHorner03PreloadRough_Init();
    gt_BriefingTHorner03Preload_Init();
    gt_BriefingTHorner03Odin_Init();
    gt_BriefingTHorner04_Init();
    gt_BriefingTHorner04Skippable_Init();
    gt_BriefingTHorner04CameraPan1_Init();
    gt_BriefingTHorner04PreloadRough_Init();
    gt_BriefingTHorner04Preload_Init();
    gt_BriefingTHorner05s_Init();
    gt_BriefingTHorner05sSkippable_Init();
    gt_BriefingTHorner05sTimestamp_Init();
    gt_BriefingTHorner05sPreloadRough_Init();
    gt_BriefingTHorner05sPreload_Init();
    gt_BriefingTTosh01_Init();
    gt_BriefingTTosh01Skippable_Init();
    gt_BriefingTTosh01Timestamp_Init();
    gt_BriefingTTosh01PreloadRough_Init();
    gt_BriefingTTosh01Preload_Init();
    gt_BriefingTTosh02_Init();
    gt_BriefingTTosh02Skippable_Init();
    gt_BriefingTTosh02PreloadRough_Init();
    gt_BriefingTTosh02Preload_Init();
    gt_BriefingTTosh03A_Init();
    gt_BriefingTTosh03ASkippable_Init();
    gt_BriefingTTosh03APreloadRough_Init();
    gt_BriefingTTosh03APreload_Init();
    gt_BriefingTTosh03B_Init();
    gt_BriefingTTosh03BSkippable_Init();
    gt_BriefingTTosh03BPreloadRough_Init();
    gt_BriefingTTosh03BPreload_Init();
    gt_BriefingTTychus01_Init();
    gt_BriefingTTychus01Skippable_Init();
    gt_BriefingTTychus01PreloadRough_Init();
    gt_BriefingTTychus01Preload_Init();
    gt_BriefingTTychus02_Init();
    gt_BriefingTTychus02Skippable_Init();
    gt_BriefingTTychus02PreloadRough_Init();
    gt_BriefingTTychus02Preload_Init();
    gt_BriefingTTychus03_Init();
    gt_BriefingTTychus03Skippable_Init();
    gt_BriefingTTychus03PreloadRough_Init();
    gt_BriefingTTychus03Preload_Init();
    gt_BriefingTTychus04_Init();
    gt_BriefingTTychus04Skippable_Init();
    gt_BriefingTTychus04RaynorBentDownAnimation_Init();
    gt_BriefingTTychus04PreloadRough_Init();
    gt_BriefingTTychus04Preload_Init();
    gt_BriefingTTychus05_Init();
    gt_BriefingTTychus05Skippable_Init();
    gt_BriefingTTychus05GreenReticleSound_Init();
    gt_BriefingTTychus05PreloadRough_Init();
    gt_BriefingTTychus05Preload_Init();
    gt_BriefingTZeratul01_Init();
    gt_BriefingTZeratul01Skippable_Init();
    gt_BriefingTZeratul01PreloadRough_Init();
    gt_BriefingTZeratul01Preload_Init();
    gt_BriefingTZeratul02_Init();
    gt_BriefingTZeratul02Skippable_Init();
    gt_BriefingTZeratul02PreloadRough_Init();
    gt_BriefingTZeratul02Preload_Init();
    gt_BriefingTZeratul03_Init();
    gt_BriefingTZeratul03Skippable_Init();
    gt_BriefingTZeratul03PreloadRough_Init();
    gt_BriefingTZeratul03Preload_Init();
    gt_BriefingTZeratul04_Init();
    gt_BriefingTZeratul04Skippable_Init();
    gt_BriefingTZeratul04PreloadRough_Init();
    gt_BriefingTZeratul04Preload_Init();
    gt_BriefingTValerian01_Init();
    gt_BriefingTValerian01Skippable_Init();
    gt_BriefingTValerian01PreloadRough_Init();
    gt_BriefingTValerian01Preload_Init();
    gt_BriefingTValerian02A_Init();
    gt_BriefingTValerian02ASkippable_Init();
    gt_BriefingTValerian02APreloadRough_Init();
    gt_BriefingTValerian02APreload_Init();
    gt_BriefingTValerian02B_Init();
    gt_BriefingTValerian02BSkippable_Init();
    gt_BriefingTValerian02BPreloadRough_Init();
    gt_BriefingTValerian02BPreload_Init();
    gt_BriefingTValerian03_Init();
    gt_BriefingTValerian03Skippable_Init();
    gt_BriefingTValerian03PreloadRough_Init();
    gt_BriefingTValerian03Preload_Init();
    gt_ABChoiceButtonClick_Init();
    gt_ABChoiceTHanson03_Init();
    gt_ABChoiceTHanson03Skippable_Init();
    gt_ABChoiceTHanson03Back_Init();
    gt_ABChoiceTHanson03Replay_Init();
    gt_ABChoiceTHanson03A_Init();
    gt_ABChoiceTHanson03ASkippable_Init();
    gt_ABChoiceTHanson03B_Init();
    gt_ABChoiceTHanson03BSkippable_Init();
    gt_ABChoiceTHanson03Preload_Init();
    gt_ABChoiceTTosh03_Init();
    gt_ABChoiceTTosh03Skippable_Init();
    gt_ABChoiceTTosh03Back_Init();
    gt_ABChoiceTTosh03Replay_Init();
    gt_ABChoiceTTosh03A_Init();
    gt_ABChoiceTTosh03ASkippable_Init();
    gt_ABChoiceTTosh03B_Init();
    gt_ABChoiceTTosh03BSkippable_Init();
    gt_ABChoiceTTosh03Preload_Init();
    gt_ABChoiceTValerian02_Init();
    gt_ABChoiceTValerian02Skippable_Init();
    gt_ABChoiceTValerian02Back_Init();
    gt_ABChoiceTValerian02Replay_Init();
    gt_ABChoiceTValerian02A_Init();
    gt_ABChoiceTValerian02ASkippable_Init();
    gt_ABChoiceTValerian02B_Init();
    gt_ABChoiceTValerian02BSkippable_Init();
    gt_ABChoiceTValerian02Preload_Init();
    gt_DebriefingLabCantinaOpened_Init();
    gt_DebriefingCommunicatorUnlocked_Init();
    gt_DebriefingTRaynor03_Init();
    gt_DebriefingTRaynor03Skippable_Init();
    gt_DebriefingTRaynor03CameraChange_Init();
    gt_DebriefingTRaynor03CameraChangeNoWait_Init();
    gt_DebriefingTHanson01_Init();
    gt_DebriefingTHanson01Skippable_Init();
    gt_DebriefingTHanson01CameraChange_Init();
    gt_DebriefingTHanson01CameraChangeNoWait_Init();
    gt_DebriefingTHanson02_1_Init();
    gt_DebriefingTHanson02_2_Init();
    gt_DebriefingTHanson02_2Skippable_Init();
    gt_DebriefingTHanson02_2CameraChanged_Init();
    gt_DebriefingTHanson02_2CameraChangedNoWait_Init();
    gt_DebriefingTHorner01_Init();
    gt_DebriefingTHorner01_1_Init();
    gt_DebriefingTHorner01_1Skippable_Init();
    gt_DebriefingTHorner01_2_Init();
    gt_DebriefingTHorner01_2Skippable_Init();
    gt_DebriefingTHorner01_2CameraChange_Init();
    gt_DebriefingTHorner01_2CameraChangeNoWait_Init();
    gt_DebriefingTHorner02_Init();
    gt_DebriefingTHorner02_1_Init();
    gt_DebriefingTHorner02_1Skippable_Init();
    gt_DebriefingTHorner02_2_Init();
    gt_DebriefingTHorner02_2Skippable_Init();
    gt_DebriefingTHorner02_2CameraChange_Init();
    gt_DebriefingTHorner02_2CameraChangeNoWait_Init();
    gt_DebriefingTHorner03_Init();
    gt_DebriefingTHorner03Skippable_Init();
    gt_DebriefingTHorner05S_Init();
    gt_DebriefingTHorner05SSkippable_Init();
    gt_DebriefingTTosh01_Init();
    gt_DebriefingTTosh01Skippable_Init();
    gt_DebriefingTTosh01RaynorCustomCamera_Init();
    gt_DebriefingTTosh01RaynorCustomCameraNoWait_Init();
    gt_DebriefingTTosh02_Init();
    gt_DebriefingTTosh02Skippable_Init();
    gt_DebriefingTTosh02ChangeCamera_Init();
    gt_DebriefingTTosh02ChangeCameraNoWait_Init();
    gt_DebriefingTTosh03B_Init();
    gt_DebriefingTTosh03BSkippable_Init();
    gt_DebriefingTTosh03BRaynorCustomCamera_Init();
    gt_DebriefingTTychus01_Init();
    gt_DebriefingTTychus01Skippable_Init();
    gt_DebriefingTTychus01HornerCustomCamera_Init();
    gt_DebriefingTTychus01CameraChanged_Init();
    gt_DebriefingTTychus01CameraChangedNoWait_Init();
    gt_DebriefingTTychus02_Init();
    gt_DebriefingTTychus02Skippable_Init();
    gt_DebriefingTTychus04_Init();
    gt_DebriefingTTychus04Preload_Init();
    gt_DebriefingTTychus04_1_Init();
    gt_DebriefingTTychus04_1Preload_Init();
    gt_DebriefingTTychus04_1Skippable_Init();
    gt_DebriefingTTychus04_1CameraChange_Init();
    gt_DebriefingTTychus04_1CameraChangeNoWait_Init();
    gt_DebriefingTTychus04_2_Init();
    gt_DebriefingTTychus04_2Preload_Init();
    gt_DebriefingTTychus04_2Skippable_Init();
    gt_DebriefingTTychus04_2CameraChange_Init();
    gt_DebriefingTTychus04_2CameraChangeNoWait_Init();
    gt_DebriefingTZeratul04_Init();
    gt_DebriefingTZeratul04Skippable_Init();
    gt_DebriefingTZeratul04PreloadRough_Init();
    gt_DebriefingTZeratul04Preload_Init();
    gt_ScriptSceneLabIntro_Init();
    gt_ScriptSceneLabIntroSkippable_Init();
    gt_ScriptSceneMercIntro_Init();
    gt_ScriptSceneMercIntroSkippable_Init();
    gt_ScriptSceneArmoryIntro_Init();
    gt_ScriptSceneArmoryIntroSkippable_Init();
    gt_TVNewsBack2_Init();
    gt_TVNewsRaynor00_Init();
    gt_TVNewsRaynor00Skippable_Init();
    gt_TVNewsRaynor00Preload_Init();
    gt_TVNewsRaynor01_Init();
    gt_TVNewsRaynor01Skippable_Init();
    gt_TVNewsRaynor01Preload_Init();
    gt_TVNewsRaynor01Event02_Init();
    gt_TVNewsRaynor01Event05_Init();
    gt_TVNewsRaynor02_Init();
    gt_TVNewsRaynor02Skippable_Init();
    gt_TVNewsRaynor02Preload_Init();
    gt_TVNewsRaynor02Event03_Init();
    gt_TVNewsRaynor02Event05_Init();
    gt_TVNewsHanson01_Init();
    gt_TVNewsHanson01Skippable_Init();
    gt_TVNewsHanson01Preload_Init();
    gt_TVNewsHanson01Event01_Init();
    gt_TVNewsHanson01Event03_Init();
    gt_TVNewsHanson02_Init();
    gt_TVNewsHanson02Skippable_Init();
    gt_TVNewsHanson02Preload_Init();
    gt_TVNewsHanson02Event05_Init();
    gt_TVNewsHanson03A_Init();
    gt_TVNewsHanson03ASkippable_Init();
    gt_TVNewsHanson03APreload_Init();
    gt_TVNewsHanson03aEvent02_Init();
    gt_TVNewsHanson03aEvent06_Init();
    gt_TVNewsHanson03B_Init();
    gt_TVNewsHanson03BSkippable_Init();
    gt_TVNewsHanson03BPreload_Init();
    gt_TVNewsHanson03bEvent06_Init();
    gt_TVNewsTosh01_Init();
    gt_TVNewsTosh01Skippable_Init();
    gt_TVNewsTosh01Preload_Init();
    gt_TVNewsTosh02_Init();
    gt_TVNewsTosh02Skippable_Init();
    gt_TVNewsTosh02Preload_Init();
    gt_TVNewsTosh02Event01_Init();
    gt_TVNewsTosh03A_Init();
    gt_TVNewsTosh03ASkippable_Init();
    gt_TVNewsTosh03APreload_Init();
    gt_TVNewsTosh03aEvent05_Init();
    gt_TVNewsTosh03B_Init();
    gt_TVNewsTosh03BSkippable_Init();
    gt_TVNewsTosh03BPreload_Init();
    gt_TVNewsTychus01_Init();
    gt_TVNewsTychus01Skippable_Init();
    gt_TVNewsTychus01Preload_Init();
    gt_TVNewsTychus01Event04_Init();
    gt_TVNewsTychus02_Init();
    gt_TVNewsTychus02Skippable_Init();
    gt_TVNewsTychus02Preload_Init();
    gt_TVNewsTychus03_Init();
    gt_TVNewsTychus03Skippable_Init();
    gt_TVNewsTychus03Preload_Init();
    gt_TVNewsTychus04_Init();
    gt_TVNewsTychus04Skippable_Init();
    gt_TVNewsTychus04Preload_Init();
    gt_TVNewsTychus05_Init();
    gt_TVNewsTychus05Skippable_Init();
    gt_TVNewsTychus05Preload_Init();
    gt_TVNewsTychus05Event04_Init();
    gt_TVNewsHorner01_Init();
    gt_TVNewsHorner01Skippable_Init();
    gt_TVNewsHorner01Preload_Init();
    gt_TVNewsHorner01Event05_Init();
    gt_TVNewsHorner02_Init();
    gt_TVNewsHorner02Skippable_Init();
    gt_TVNewsHorner02Preload_Init();
    gt_TVNewsHorner02Event02_Init();
    gt_TVNewsHorner03_Init();
    gt_TVNewsHorner03Skippable_Init();
    gt_TVNewsHorner03Preload_Init();
    gt_TVNewsHorner03Event08_Init();
    gt_TVNewsHorner04_Init();
    gt_TVNewsHorner04Skippable_Init();
    gt_TVNewsHorner04Preload_Init();
    gt_TVNewsHorner05S_Init();
    gt_TVNewsHorner05SSkippable_Init();
    gt_TVNewsHorner05SPreload_Init();
    gt_TVNewsHorner05SEvent06_Init();
    gt_TVNewsZeratul01_Init();
    gt_TVNewsZeratul01Skippable_Init();
    gt_TVNewsZeratul01Preload_Init();
    gt_TVNewsZeratul01Event06_Init();
    gt_TVNewsZeratul02_Init();
    gt_TVNewsZeratul02Skippable_Init();
    gt_TVNewsZeratul02Preload_Init();
    gt_TVNewsZeratul03_Init();
    gt_TVNewsZeratul03Skippable_Init();
    gt_TVNewsZeratul03Preload_Init();
    gt_TVNewsZeratul03Event03_Init();
    gt_TVNewsZeratul04_Init();
    gt_TVNewsZeratul04Skippable_Init();
    gt_TVNewsZeratul04Preload_Init();
    gt_TVNewsValerian01_Init();
    gt_TVNewsValerian01Skippable_Init();
    gt_TVNewsValerian01Preload_Init();
    gt_TVNewsValerian01Event03_Init();
    gt_TVNewsValerian02A_Init();
    gt_TVNewsValerian02B_Init();
    gt_TVNewsValerian02Skippable_Init();
    gt_TVNewsValerian02Preload_Init();
    gt_TVNewsBarAsyncPreload_Init();
    gt_TVNewsCantinaAsyncPreload_Init();
    gt_TVNewsCharAsyncPreload_Init();
    gt_TVNewsEventEnd_Init();
    gt_TVNewsEventAdStart_Init();
    gt_TipAfterTRaynor01_Init();
    gt_TipAfterTRaynor02_Init();
    gt_TipAfterTRaynor03_Init();
    gt_TipAfterTHanson01orTTychus01_Init();
    gt_TipStarmap_Init();
    gt_TipMissionArchieves_Init();
    gt_TipArmory_Init();
    gt_TipArmoryConsole_Init();
    gt_TipConscription_Init();
    gt_TipCantina_Init();
    gt_TipMercenaries_Init();
    gt_TipNewMercenaries_Init();
    gt_TipLab_Init();
    gt_TipLabResearch_Init();
    gt_TipNewProtossResearch_Init();
    gt_TipNewZergResearch_Init();
    gt_TipLabCrystal_Init();
    gt_TipAfterTValerian01_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
